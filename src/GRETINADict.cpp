//
// File generated by rootcint at Thu Sep  8 12:05:45 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdIGRETINADict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GRETINADict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::PM PM;
      #else
      class PM  {
         public:
         //friend XX;
         int np1; //
         int np2; //
         int p1[20]; //
         int p2[20]; //
         float s1; //
         float s2; //
         float likely1; //
         float likely2; //
         float dist; //
         float FOM1; //
         float FOM2; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::globalHeader globalHeader;
      #else
      class globalHeader  {
         public:
         //friend XX;
         int type; //
         int length; //
         G__int64 timestamp; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::mode3DataPacket mode3DataPacket;
      #else
      class mode3DataPacket  {
         public:
         //friend XX;
         unsigned short aahdr[2]; //
         unsigned short hdr[14]; //
         unsigned short waveform[3000]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::mode3HistoryPacket mode3HistoryPacket;
      #else
      class mode3HistoryPacket  {
         public:
         //friend XX;
         unsigned short aahdr[2]; //
         unsigned short hdr[8]; //
         unsigned short data[3000]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::historyEvent historyEvent;
      #else
      class historyEvent  {
         public:
         //friend XX;
         float energy; //
         G__int64 TS; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ip ip;
      #else
      class ip  {
         public:
         //friend XX;
         float x; //
         float y; //
         float z; //
         float e; //Here, e refers to the fraction. */
         int seg; //Segment hit. */
         float seg_energy; //Energy of hit segment. */
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ipOLD ipOLD;
      #else
      class ipOLD  {
         public:
         //friend XX;
         float x; //
         float y; //
         float z; //
         float e; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::mode2Old mode2Old;
      #else
      class mode2Old  {
         public:
         //friend XX;
         int num; //
         int crystal_id; //
         float tot_e; //
         float t0; //
         float chisq; //
         float norm_chisq; //
         G__int64 timestamp; //
         ::ipOLD intpts[16]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::mode2ABCD1234 mode2ABCD1234;
      #else
      class mode2ABCD1234  {
         public:
         //friend XX;
         int type; //
         int crystal_id; //
         int num; //
         float tot_e; //
         G__int64 timestamp; //
         G__int64 trig_time; //
         float t0; //
         float cfd; //
         float chisq; //
         float norm_chisq; //
         float baseline; //
         int pad; //To ensure 8-byte alignment of struct. */
         ::ip intpts[16]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::mode2ABCD5678 mode2ABCD5678;
      #else
      class mode2ABCD5678  {
         public:
         //friend XX;
         int type; //
         int crystal_id; //
         int num; //
         float tot_e; //
         int core_e[4]; //
         G__int64 timestamp; //
         G__int64 trig_time; //
         float t0; //
         float cfd; //
         float chisq; //
         float norm_chisq; //
         float baseline; //
         float prestep; //
         float poststep; //
         int pad; //
         ::ip intpts[16]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::trackedGamma trackedGamma;
      #else
      class trackedGamma  {
         public:
         //friend XX;
         float esum; //gamma ray energy */
         int ndet; //number of interactions */
         float fom; //figure of merit */
         int tracked; //tracked == 1 if successful */
         G__int64 timestamp; //timestamp of first interaction point */
         float x0; //
         float y0; //
         float z0; //
         float e0; //first interaction point */
         float x1; //
         float y1; //
         float z1; //
         float e1; //second interaction point */
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::g4Sim_emittedGamma g4Sim_emittedGamma;
      #else
      class g4Sim_emittedGamma  {
         public:
         //friend XX;
         float e; //
         float x; //
         float y; //
         float z; //
         float phi; //
         float theta; //
         float beta; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::g4Sim_abcd1234 g4Sim_abcd1234;
      #else
      class g4Sim_abcd1234  {
         public:
         //friend XX;
         int type; //
         int num; //
         int full; //
         ::g4Sim_emittedGamma gammas[10]; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void PM_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void PM_Dictionary();
   static void *new_PM(void *p = 0);
   static void *newArray_PM(Long_t size, void *p);
   static void delete_PM(void *p);
   static void deleteArray_PM(void *p);
   static void destruct_PM(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PM*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::PM) == sizeof(::ROOT::Shadow::PM));
      ::PM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::PM),0);
      static ::ROOT::TGenericClassInfo 
         instance("PM", "./src/Track.h", 38,
                  typeid(::PM), DefineBehavior(ptr, ptr),
                  &PM_ShowMembers, &PM_Dictionary, isa_proxy, 4,
                  sizeof(::PM) );
      instance.SetNew(&new_PM);
      instance.SetNewArray(&newArray_PM);
      instance.SetDelete(&delete_PM);
      instance.SetDeleteArray(&deleteArray_PM);
      instance.SetDestructor(&destruct_PM);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PM*)
   {
      return GenerateInitInstanceLocal((::PM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PM*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void PM_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::PM*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TrackClusterIP_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackClusterIP(void *p = 0);
   static void *newArray_TrackClusterIP(Long_t size, void *p);
   static void delete_TrackClusterIP(void *p);
   static void deleteArray_TrackClusterIP(void *p);
   static void destruct_TrackClusterIP(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackClusterIP*)
   {
      ::TrackClusterIP *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackClusterIP >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackClusterIP", ::TrackClusterIP::Class_Version(), "./src/Track.h", 47,
                  typeid(::TrackClusterIP), DefineBehavior(ptr, ptr),
                  &::TrackClusterIP::Dictionary, isa_proxy, 4,
                  sizeof(::TrackClusterIP) );
      instance.SetNew(&new_TrackClusterIP);
      instance.SetNewArray(&newArray_TrackClusterIP);
      instance.SetDelete(&delete_TrackClusterIP);
      instance.SetDeleteArray(&deleteArray_TrackClusterIP);
      instance.SetDestructor(&destruct_TrackClusterIP);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TrackClusterIP*)
   {
      return GenerateInitInstanceLocal((::TrackClusterIP*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackClusterIP*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TrackCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackCluster(void *p = 0);
   static void *newArray_TrackCluster(Long_t size, void *p);
   static void delete_TrackCluster(void *p);
   static void deleteArray_TrackCluster(void *p);
   static void destruct_TrackCluster(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackCluster*)
   {
      ::TrackCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackCluster", ::TrackCluster::Class_Version(), "./src/Track.h", 68,
                  typeid(::TrackCluster), DefineBehavior(ptr, ptr),
                  &::TrackCluster::Dictionary, isa_proxy, 4,
                  sizeof(::TrackCluster) );
      instance.SetNew(&new_TrackCluster);
      instance.SetNewArray(&newArray_TrackCluster);
      instance.SetDelete(&delete_TrackCluster);
      instance.SetDeleteArray(&deleteArray_TrackCluster);
      instance.SetDestructor(&destruct_TrackCluster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TrackCluster*)
   {
      return GenerateInitInstanceLocal((::TrackCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TrackShell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackShell(void *p = 0);
   static void *newArray_TrackShell(Long_t size, void *p);
   static void delete_TrackShell(void *p);
   static void deleteArray_TrackShell(void *p);
   static void destruct_TrackShell(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackShell*)
   {
      ::TrackShell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackShell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackShell", ::TrackShell::Class_Version(), "./src/Track.h", 95,
                  typeid(::TrackShell), DefineBehavior(ptr, ptr),
                  &::TrackShell::Dictionary, isa_proxy, 4,
                  sizeof(::TrackShell) );
      instance.SetNew(&new_TrackShell);
      instance.SetNewArray(&newArray_TrackShell);
      instance.SetDelete(&delete_TrackShell);
      instance.SetDeleteArray(&deleteArray_TrackShell);
      instance.SetDestructor(&destruct_TrackShell);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TrackShell*)
   {
      return GenerateInitInstanceLocal((::TrackShell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackShell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TrackCtrl_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackCtrl(void *p = 0);
   static void *newArray_TrackCtrl(Long_t size, void *p);
   static void delete_TrackCtrl(void *p);
   static void deleteArray_TrackCtrl(void *p);
   static void destruct_TrackCtrl(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackCtrl*)
   {
      ::TrackCtrl *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackCtrl >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackCtrl", ::TrackCtrl::Class_Version(), "./src/Track.h", 138,
                  typeid(::TrackCtrl), DefineBehavior(ptr, ptr),
                  &::TrackCtrl::Dictionary, isa_proxy, 4,
                  sizeof(::TrackCtrl) );
      instance.SetNew(&new_TrackCtrl);
      instance.SetNewArray(&newArray_TrackCtrl);
      instance.SetDelete(&delete_TrackCtrl);
      instance.SetDeleteArray(&deleteArray_TrackCtrl);
      instance.SetDestructor(&destruct_TrackCtrl);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TrackCtrl*)
   {
      return GenerateInitInstanceLocal((::TrackCtrl*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackCtrl*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TrackStat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackStat(void *p = 0);
   static void *newArray_TrackStat(Long_t size, void *p);
   static void delete_TrackStat(void *p);
   static void deleteArray_TrackStat(void *p);
   static void destruct_TrackStat(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackStat*)
   {
      ::TrackStat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackStat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackStat", ::TrackStat::Class_Version(), "./src/Track.h", 219,
                  typeid(::TrackStat), DefineBehavior(ptr, ptr),
                  &::TrackStat::Dictionary, isa_proxy, 4,
                  sizeof(::TrackStat) );
      instance.SetNew(&new_TrackStat);
      instance.SetNewArray(&newArray_TrackStat);
      instance.SetDelete(&delete_TrackStat);
      instance.SetDeleteArray(&deleteArray_TrackStat);
      instance.SetDestructor(&destruct_TrackStat);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TrackStat*)
   {
      return GenerateInitInstanceLocal((::TrackStat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackStat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TrackPerm_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackPerm(void *p = 0);
   static void *newArray_TrackPerm(Long_t size, void *p);
   static void delete_TrackPerm(void *p);
   static void deleteArray_TrackPerm(void *p);
   static void destruct_TrackPerm(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackPerm*)
   {
      ::TrackPerm *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackPerm >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackPerm", ::TrackPerm::Class_Version(), "./src/Track.h", 268,
                  typeid(::TrackPerm), DefineBehavior(ptr, ptr),
                  &::TrackPerm::Dictionary, isa_proxy, 4,
                  sizeof(::TrackPerm) );
      instance.SetNew(&new_TrackPerm);
      instance.SetNewArray(&newArray_TrackPerm);
      instance.SetDelete(&delete_TrackPerm);
      instance.SetDeleteArray(&deleteArray_TrackPerm);
      instance.SetDestructor(&destruct_TrackPerm);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TrackPerm*)
   {
      return GenerateInitInstanceLocal((::TrackPerm*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackPerm*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Track(void *p = 0);
   static void *newArray_Track(Long_t size, void *p);
   static void delete_Track(void *p);
   static void deleteArray_Track(void *p);
   static void destruct_Track(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Track*)
   {
      ::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Track", ::Track::Class_Version(), "./src/Track.h", 280,
                  typeid(::Track), DefineBehavior(ptr, ptr),
                  &::Track::Dictionary, isa_proxy, 4,
                  sizeof(::Track) );
      instance.SetNew(&new_Track);
      instance.SetNewArray(&newArray_Track);
      instance.SetDelete(&delete_Track);
      instance.SetDeleteArray(&deleteArray_Track);
      instance.SetDestructor(&destruct_Track);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Track*)
   {
      return GenerateInitInstanceLocal((::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void controlVariables_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_controlVariables(void *p = 0);
   static void *newArray_controlVariables(Long_t size, void *p);
   static void delete_controlVariables(void *p);
   static void deleteArray_controlVariables(void *p);
   static void destruct_controlVariables(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::controlVariables*)
   {
      ::controlVariables *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::controlVariables >(0);
      static ::ROOT::TGenericClassInfo 
         instance("controlVariables", ::controlVariables::Class_Version(), "./src/SortingStructures.h", 21,
                  typeid(::controlVariables), DefineBehavior(ptr, ptr),
                  &::controlVariables::Dictionary, isa_proxy, 4,
                  sizeof(::controlVariables) );
      instance.SetNew(&new_controlVariables);
      instance.SetNewArray(&newArray_controlVariables);
      instance.SetDelete(&delete_controlVariables);
      instance.SetDeleteArray(&deleteArray_controlVariables);
      instance.SetDestructor(&destruct_controlVariables);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::controlVariables*)
   {
      return GenerateInitInstanceLocal((::controlVariables*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::controlVariables*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void counterVariables_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_counterVariables(void *p = 0);
   static void *newArray_counterVariables(Long_t size, void *p);
   static void delete_counterVariables(void *p);
   static void deleteArray_counterVariables(void *p);
   static void destruct_counterVariables(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::counterVariables*)
   {
      ::counterVariables *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::counterVariables >(0);
      static ::ROOT::TGenericClassInfo 
         instance("counterVariables", ::counterVariables::Class_Version(), "./src/SortingStructures.h", 131,
                  typeid(::counterVariables), DefineBehavior(ptr, ptr),
                  &::counterVariables::Dictionary, isa_proxy, 4,
                  sizeof(::counterVariables) );
      instance.SetNew(&new_counterVariables);
      instance.SetNewArray(&newArray_counterVariables);
      instance.SetDelete(&delete_counterVariables);
      instance.SetDeleteArray(&deleteArray_counterVariables);
      instance.SetDestructor(&destruct_counterVariables);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::counterVariables*)
   {
      return GenerateInitInstanceLocal((::counterVariables*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::counterVariables*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void GRETINA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GRETINA(void *p = 0);
   static void *newArray_GRETINA(Long_t size, void *p);
   static void delete_GRETINA(void *p);
   static void deleteArray_GRETINA(void *p);
   static void destruct_GRETINA(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GRETINA*)
   {
      ::GRETINA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GRETINA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GRETINA", ::GRETINA::Class_Version(), "./src/GRETINA.h", 728,
                  typeid(::GRETINA), DefineBehavior(ptr, ptr),
                  &::GRETINA::Dictionary, isa_proxy, 4,
                  sizeof(::GRETINA) );
      instance.SetNew(&new_GRETINA);
      instance.SetNewArray(&newArray_GRETINA);
      instance.SetDelete(&delete_GRETINA);
      instance.SetDeleteArray(&deleteArray_GRETINA);
      instance.SetDestructor(&destruct_GRETINA);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GRETINA*)
   {
      return GenerateInitInstanceLocal((::GRETINA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GRETINA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void rotationMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_rotationMatrix(void *p = 0);
   static void *newArray_rotationMatrix(Long_t size, void *p);
   static void delete_rotationMatrix(void *p);
   static void deleteArray_rotationMatrix(void *p);
   static void destruct_rotationMatrix(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::rotationMatrix*)
   {
      ::rotationMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::rotationMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("rotationMatrix", ::rotationMatrix::Class_Version(), "./src/GRETINA.h", 32,
                  typeid(::rotationMatrix), DefineBehavior(ptr, ptr),
                  &::rotationMatrix::Dictionary, isa_proxy, 4,
                  sizeof(::rotationMatrix) );
      instance.SetNew(&new_rotationMatrix);
      instance.SetNewArray(&newArray_rotationMatrix);
      instance.SetDelete(&delete_rotationMatrix);
      instance.SetDeleteArray(&deleteArray_rotationMatrix);
      instance.SetDestructor(&destruct_rotationMatrix);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::rotationMatrix*)
   {
      return GenerateInitInstanceLocal((::rotationMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::rotationMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void GRETINAVariables_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GRETINAVariables(void *p = 0);
   static void *newArray_GRETINAVariables(Long_t size, void *p);
   static void delete_GRETINAVariables(void *p);
   static void deleteArray_GRETINAVariables(void *p);
   static void destruct_GRETINAVariables(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GRETINAVariables*)
   {
      ::GRETINAVariables *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GRETINAVariables >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GRETINAVariables", ::GRETINAVariables::Class_Version(), "./src/GRETINA.h", 51,
                  typeid(::GRETINAVariables), DefineBehavior(ptr, ptr),
                  &::GRETINAVariables::Dictionary, isa_proxy, 4,
                  sizeof(::GRETINAVariables) );
      instance.SetNew(&new_GRETINAVariables);
      instance.SetNewArray(&newArray_GRETINAVariables);
      instance.SetDelete(&delete_GRETINAVariables);
      instance.SetDeleteArray(&deleteArray_GRETINAVariables);
      instance.SetDestructor(&destruct_GRETINAVariables);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GRETINAVariables*)
   {
      return GenerateInitInstanceLocal((::GRETINAVariables*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GRETINAVariables*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void globalHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void globalHeader_Dictionary();
   static void *new_globalHeader(void *p = 0);
   static void *newArray_globalHeader(Long_t size, void *p);
   static void delete_globalHeader(void *p);
   static void deleteArray_globalHeader(void *p);
   static void destruct_globalHeader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::globalHeader*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::globalHeader) == sizeof(::ROOT::Shadow::globalHeader));
      ::globalHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::globalHeader),0);
      static ::ROOT::TGenericClassInfo 
         instance("globalHeader", "./src/GRETINA.h", 103,
                  typeid(::globalHeader), DefineBehavior(ptr, ptr),
                  &globalHeader_ShowMembers, &globalHeader_Dictionary, isa_proxy, 4,
                  sizeof(::globalHeader) );
      instance.SetNew(&new_globalHeader);
      instance.SetNewArray(&newArray_globalHeader);
      instance.SetDelete(&delete_globalHeader);
      instance.SetDeleteArray(&deleteArray_globalHeader);
      instance.SetDestructor(&destruct_globalHeader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::globalHeader*)
   {
      return GenerateInitInstanceLocal((::globalHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::globalHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void globalHeader_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::globalHeader*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void mode3DataPacket_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void mode3DataPacket_Dictionary();
   static void *new_mode3DataPacket(void *p = 0);
   static void *newArray_mode3DataPacket(Long_t size, void *p);
   static void delete_mode3DataPacket(void *p);
   static void deleteArray_mode3DataPacket(void *p);
   static void destruct_mode3DataPacket(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mode3DataPacket*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::mode3DataPacket) == sizeof(::ROOT::Shadow::mode3DataPacket));
      ::mode3DataPacket *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::mode3DataPacket),0);
      static ::ROOT::TGenericClassInfo 
         instance("mode3DataPacket", "./src/GRETINA.h", 113,
                  typeid(::mode3DataPacket), DefineBehavior(ptr, ptr),
                  &mode3DataPacket_ShowMembers, &mode3DataPacket_Dictionary, isa_proxy, 4,
                  sizeof(::mode3DataPacket) );
      instance.SetNew(&new_mode3DataPacket);
      instance.SetNewArray(&newArray_mode3DataPacket);
      instance.SetDelete(&delete_mode3DataPacket);
      instance.SetDeleteArray(&deleteArray_mode3DataPacket);
      instance.SetDestructor(&destruct_mode3DataPacket);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mode3DataPacket*)
   {
      return GenerateInitInstanceLocal((::mode3DataPacket*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mode3DataPacket*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void mode3DataPacket_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::mode3DataPacket*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void g3Waveform_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g3Waveform(void *p = 0);
   static void *newArray_g3Waveform(Long_t size, void *p);
   static void delete_g3Waveform(void *p);
   static void deleteArray_g3Waveform(void *p);
   static void destruct_g3Waveform(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g3Waveform*)
   {
      ::g3Waveform *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g3Waveform >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g3Waveform", ::g3Waveform::Class_Version(), "./src/GRETINA.h", 120,
                  typeid(::g3Waveform), DefineBehavior(ptr, ptr),
                  &::g3Waveform::Dictionary, isa_proxy, 4,
                  sizeof(::g3Waveform) );
      instance.SetNew(&new_g3Waveform);
      instance.SetNewArray(&newArray_g3Waveform);
      instance.SetDelete(&delete_g3Waveform);
      instance.SetDeleteArray(&deleteArray_g3Waveform);
      instance.SetDestructor(&destruct_g3Waveform);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g3Waveform*)
   {
      return GenerateInitInstanceLocal((::g3Waveform*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g3Waveform*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void g3ChannelEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g3ChannelEvent(void *p = 0);
   static void *newArray_g3ChannelEvent(Long_t size, void *p);
   static void delete_g3ChannelEvent(void *p);
   static void deleteArray_g3ChannelEvent(void *p);
   static void destruct_g3ChannelEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g3ChannelEvent*)
   {
      ::g3ChannelEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g3ChannelEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g3ChannelEvent", ::g3ChannelEvent::Class_Version(), "./src/GRETINA.h", 152,
                  typeid(::g3ChannelEvent), DefineBehavior(ptr, ptr),
                  &::g3ChannelEvent::Dictionary, isa_proxy, 4,
                  sizeof(::g3ChannelEvent) );
      instance.SetNew(&new_g3ChannelEvent);
      instance.SetNewArray(&newArray_g3ChannelEvent);
      instance.SetDelete(&delete_g3ChannelEvent);
      instance.SetDeleteArray(&deleteArray_g3ChannelEvent);
      instance.SetDestructor(&destruct_g3ChannelEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g3ChannelEvent*)
   {
      return GenerateInitInstanceLocal((::g3ChannelEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g3ChannelEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void g3CrystalEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g3CrystalEvent(void *p = 0);
   static void *newArray_g3CrystalEvent(Long_t size, void *p);
   static void delete_g3CrystalEvent(void *p);
   static void deleteArray_g3CrystalEvent(void *p);
   static void destruct_g3CrystalEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g3CrystalEvent*)
   {
      ::g3CrystalEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g3CrystalEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g3CrystalEvent", ::g3CrystalEvent::Class_Version(), "./src/GRETINA.h", 186,
                  typeid(::g3CrystalEvent), DefineBehavior(ptr, ptr),
                  &::g3CrystalEvent::Dictionary, isa_proxy, 4,
                  sizeof(::g3CrystalEvent) );
      instance.SetNew(&new_g3CrystalEvent);
      instance.SetNewArray(&newArray_g3CrystalEvent);
      instance.SetDelete(&delete_g3CrystalEvent);
      instance.SetDeleteArray(&deleteArray_g3CrystalEvent);
      instance.SetDestructor(&destruct_g3CrystalEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g3CrystalEvent*)
   {
      return GenerateInitInstanceLocal((::g3CrystalEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g3CrystalEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void g3OUT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g3OUT(void *p = 0);
   static void *newArray_g3OUT(Long_t size, void *p);
   static void delete_g3OUT(void *p);
   static void deleteArray_g3OUT(void *p);
   static void destruct_g3OUT(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g3OUT*)
   {
      ::g3OUT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g3OUT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g3OUT", ::g3OUT::Class_Version(), "./src/GRETINA.h", 234,
                  typeid(::g3OUT), DefineBehavior(ptr, ptr),
                  &::g3OUT::Dictionary, isa_proxy, 4,
                  sizeof(::g3OUT) );
      instance.SetNew(&new_g3OUT);
      instance.SetNewArray(&newArray_g3OUT);
      instance.SetDelete(&delete_g3OUT);
      instance.SetDeleteArray(&deleteArray_g3OUT);
      instance.SetDestructor(&destruct_g3OUT);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g3OUT*)
   {
      return GenerateInitInstanceLocal((::g3OUT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g3OUT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void mode3HistoryPacket_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void mode3HistoryPacket_Dictionary();
   static void *new_mode3HistoryPacket(void *p = 0);
   static void *newArray_mode3HistoryPacket(Long_t size, void *p);
   static void delete_mode3HistoryPacket(void *p);
   static void deleteArray_mode3HistoryPacket(void *p);
   static void destruct_mode3HistoryPacket(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mode3HistoryPacket*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::mode3HistoryPacket) == sizeof(::ROOT::Shadow::mode3HistoryPacket));
      ::mode3HistoryPacket *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::mode3HistoryPacket),0);
      static ::ROOT::TGenericClassInfo 
         instance("mode3HistoryPacket", "./src/GRETINA.h", 250,
                  typeid(::mode3HistoryPacket), DefineBehavior(ptr, ptr),
                  &mode3HistoryPacket_ShowMembers, &mode3HistoryPacket_Dictionary, isa_proxy, 4,
                  sizeof(::mode3HistoryPacket) );
      instance.SetNew(&new_mode3HistoryPacket);
      instance.SetNewArray(&newArray_mode3HistoryPacket);
      instance.SetDelete(&delete_mode3HistoryPacket);
      instance.SetDeleteArray(&deleteArray_mode3HistoryPacket);
      instance.SetDestructor(&destruct_mode3HistoryPacket);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mode3HistoryPacket*)
   {
      return GenerateInitInstanceLocal((::mode3HistoryPacket*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mode3HistoryPacket*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void mode3HistoryPacket_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::mode3HistoryPacket*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void historyEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void historyEvent_Dictionary();
   static void *new_historyEvent(void *p = 0);
   static void *newArray_historyEvent(Long_t size, void *p);
   static void delete_historyEvent(void *p);
   static void deleteArray_historyEvent(void *p);
   static void destruct_historyEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::historyEvent*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::historyEvent) == sizeof(::ROOT::Shadow::historyEvent));
      ::historyEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::historyEvent),0);
      static ::ROOT::TGenericClassInfo 
         instance("historyEvent", "./src/GRETINA.h", 256,
                  typeid(::historyEvent), DefineBehavior(ptr, ptr),
                  &historyEvent_ShowMembers, &historyEvent_Dictionary, isa_proxy, 4,
                  sizeof(::historyEvent) );
      instance.SetNew(&new_historyEvent);
      instance.SetNewArray(&newArray_historyEvent);
      instance.SetDelete(&delete_historyEvent);
      instance.SetDeleteArray(&deleteArray_historyEvent);
      instance.SetDestructor(&destruct_historyEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::historyEvent*)
   {
      return GenerateInitInstanceLocal((::historyEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::historyEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void historyEvent_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::historyEvent*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void g3HistoryEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g3HistoryEvent(void *p = 0);
   static void *newArray_g3HistoryEvent(Long_t size, void *p);
   static void delete_g3HistoryEvent(void *p);
   static void deleteArray_g3HistoryEvent(void *p);
   static void destruct_g3HistoryEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g3HistoryEvent*)
   {
      ::g3HistoryEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g3HistoryEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g3HistoryEvent", ::g3HistoryEvent::Class_Version(), "./src/GRETINA.h", 261,
                  typeid(::g3HistoryEvent), DefineBehavior(ptr, ptr),
                  &::g3HistoryEvent::Dictionary, isa_proxy, 4,
                  sizeof(::g3HistoryEvent) );
      instance.SetNew(&new_g3HistoryEvent);
      instance.SetNewArray(&newArray_g3HistoryEvent);
      instance.SetDelete(&delete_g3HistoryEvent);
      instance.SetDeleteArray(&deleteArray_g3HistoryEvent);
      instance.SetDestructor(&destruct_g3HistoryEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g3HistoryEvent*)
   {
      return GenerateInitInstanceLocal((::g3HistoryEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g3HistoryEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Bank29_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Bank29(void *p = 0);
   static void *newArray_Bank29(Long_t size, void *p);
   static void delete_Bank29(void *p);
   static void deleteArray_Bank29(void *p);
   static void destruct_Bank29(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Bank29*)
   {
      ::Bank29 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Bank29 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Bank29", ::Bank29::Class_Version(), "./src/GRETINA.h", 275,
                  typeid(::Bank29), DefineBehavior(ptr, ptr),
                  &::Bank29::Dictionary, isa_proxy, 4,
                  sizeof(::Bank29) );
      instance.SetNew(&new_Bank29);
      instance.SetNewArray(&newArray_Bank29);
      instance.SetDelete(&delete_Bank29);
      instance.SetDeleteArray(&deleteArray_Bank29);
      instance.SetDestructor(&destruct_Bank29);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Bank29*)
   {
      return GenerateInitInstanceLocal((::Bank29*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Bank29*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ip_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ip_Dictionary();
   static void *new_ip(void *p = 0);
   static void *newArray_ip(Long_t size, void *p);
   static void delete_ip(void *p);
   static void deleteArray_ip(void *p);
   static void destruct_ip(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ip*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ip) == sizeof(::ROOT::Shadow::ip));
      ::ip *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ip),0);
      static ::ROOT::TGenericClassInfo 
         instance("ip", "./src/GRETINA.h", 294,
                  typeid(::ip), DefineBehavior(ptr, ptr),
                  &ip_ShowMembers, &ip_Dictionary, isa_proxy, 4,
                  sizeof(::ip) );
      instance.SetNew(&new_ip);
      instance.SetNewArray(&newArray_ip);
      instance.SetDelete(&delete_ip);
      instance.SetDeleteArray(&deleteArray_ip);
      instance.SetDestructor(&destruct_ip);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ip*)
   {
      return GenerateInitInstanceLocal((::ip*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ip*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ip_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ip*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ipOLD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ipOLD_Dictionary();
   static void *new_ipOLD(void *p = 0);
   static void *newArray_ipOLD(Long_t size, void *p);
   static void delete_ipOLD(void *p);
   static void deleteArray_ipOLD(void *p);
   static void destruct_ipOLD(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ipOLD*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ipOLD) == sizeof(::ROOT::Shadow::ipOLD));
      ::ipOLD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ipOLD),0);
      static ::ROOT::TGenericClassInfo 
         instance("ipOLD", "./src/GRETINA.h", 300,
                  typeid(::ipOLD), DefineBehavior(ptr, ptr),
                  &ipOLD_ShowMembers, &ipOLD_Dictionary, isa_proxy, 4,
                  sizeof(::ipOLD) );
      instance.SetNew(&new_ipOLD);
      instance.SetNewArray(&newArray_ipOLD);
      instance.SetDelete(&delete_ipOLD);
      instance.SetDeleteArray(&deleteArray_ipOLD);
      instance.SetDestructor(&destruct_ipOLD);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ipOLD*)
   {
      return GenerateInitInstanceLocal((::ipOLD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ipOLD*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ipOLD_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ipOLD*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void mode2Old_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void mode2Old_Dictionary();
   static void *new_mode2Old(void *p = 0);
   static void *newArray_mode2Old(Long_t size, void *p);
   static void delete_mode2Old(void *p);
   static void deleteArray_mode2Old(void *p);
   static void destruct_mode2Old(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mode2Old*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::mode2Old) == sizeof(::ROOT::Shadow::mode2Old));
      ::mode2Old *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::mode2Old),0);
      static ::ROOT::TGenericClassInfo 
         instance("mode2Old", "./src/GRETINA.h", 304,
                  typeid(::mode2Old), DefineBehavior(ptr, ptr),
                  &mode2Old_ShowMembers, &mode2Old_Dictionary, isa_proxy, 4,
                  sizeof(::mode2Old) );
      instance.SetNew(&new_mode2Old);
      instance.SetNewArray(&newArray_mode2Old);
      instance.SetDelete(&delete_mode2Old);
      instance.SetDeleteArray(&deleteArray_mode2Old);
      instance.SetDestructor(&destruct_mode2Old);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mode2Old*)
   {
      return GenerateInitInstanceLocal((::mode2Old*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mode2Old*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void mode2Old_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::mode2Old*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void mode2ABCD1234_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void mode2ABCD1234_Dictionary();
   static void *new_mode2ABCD1234(void *p = 0);
   static void *newArray_mode2ABCD1234(Long_t size, void *p);
   static void delete_mode2ABCD1234(void *p);
   static void deleteArray_mode2ABCD1234(void *p);
   static void destruct_mode2ABCD1234(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mode2ABCD1234*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::mode2ABCD1234) == sizeof(::ROOT::Shadow::mode2ABCD1234));
      ::mode2ABCD1234 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::mode2ABCD1234),0);
      static ::ROOT::TGenericClassInfo 
         instance("mode2ABCD1234", "./src/GRETINA.h", 315,
                  typeid(::mode2ABCD1234), DefineBehavior(ptr, ptr),
                  &mode2ABCD1234_ShowMembers, &mode2ABCD1234_Dictionary, isa_proxy, 4,
                  sizeof(::mode2ABCD1234) );
      instance.SetNew(&new_mode2ABCD1234);
      instance.SetNewArray(&newArray_mode2ABCD1234);
      instance.SetDelete(&delete_mode2ABCD1234);
      instance.SetDeleteArray(&deleteArray_mode2ABCD1234);
      instance.SetDestructor(&destruct_mode2ABCD1234);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mode2ABCD1234*)
   {
      return GenerateInitInstanceLocal((::mode2ABCD1234*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mode2ABCD1234*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void mode2ABCD1234_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::mode2ABCD1234*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void mode2ABCD5678_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void mode2ABCD5678_Dictionary();
   static void *new_mode2ABCD5678(void *p = 0);
   static void *newArray_mode2ABCD5678(Long_t size, void *p);
   static void delete_mode2ABCD5678(void *p);
   static void deleteArray_mode2ABCD5678(void *p);
   static void destruct_mode2ABCD5678(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mode2ABCD5678*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::mode2ABCD5678) == sizeof(::ROOT::Shadow::mode2ABCD5678));
      ::mode2ABCD5678 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::mode2ABCD5678),0);
      static ::ROOT::TGenericClassInfo 
         instance("mode2ABCD5678", "./src/GRETINA.h", 331,
                  typeid(::mode2ABCD5678), DefineBehavior(ptr, ptr),
                  &mode2ABCD5678_ShowMembers, &mode2ABCD5678_Dictionary, isa_proxy, 4,
                  sizeof(::mode2ABCD5678) );
      instance.SetNew(&new_mode2ABCD5678);
      instance.SetNewArray(&newArray_mode2ABCD5678);
      instance.SetDelete(&delete_mode2ABCD5678);
      instance.SetDeleteArray(&deleteArray_mode2ABCD5678);
      instance.SetDestructor(&destruct_mode2ABCD5678);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mode2ABCD5678*)
   {
      return GenerateInitInstanceLocal((::mode2ABCD5678*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mode2ABCD5678*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void mode2ABCD5678_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::mode2ABCD5678*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void g2IntPt_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g2IntPt(void *p = 0);
   static void *newArray_g2IntPt(Long_t size, void *p);
   static void delete_g2IntPt(void *p);
   static void deleteArray_g2IntPt(void *p);
   static void destruct_g2IntPt(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g2IntPt*)
   {
      ::g2IntPt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g2IntPt >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g2IntPt", ::g2IntPt::Class_Version(), "./src/GRETINA.h", 358,
                  typeid(::g2IntPt), DefineBehavior(ptr, ptr),
                  &::g2IntPt::Dictionary, isa_proxy, 4,
                  sizeof(::g2IntPt) );
      instance.SetNew(&new_g2IntPt);
      instance.SetNewArray(&newArray_g2IntPt);
      instance.SetDelete(&delete_g2IntPt);
      instance.SetDeleteArray(&deleteArray_g2IntPt);
      instance.SetDestructor(&destruct_g2IntPt);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g2IntPt*)
   {
      return GenerateInitInstanceLocal((::g2IntPt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g2IntPt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void g2CrystalEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g2CrystalEvent(void *p = 0);
   static void *newArray_g2CrystalEvent(Long_t size, void *p);
   static void delete_g2CrystalEvent(void *p);
   static void deleteArray_g2CrystalEvent(void *p);
   static void destruct_g2CrystalEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g2CrystalEvent*)
   {
      ::g2CrystalEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g2CrystalEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g2CrystalEvent", ::g2CrystalEvent::Class_Version(), "./src/GRETINA.h", 385,
                  typeid(::g2CrystalEvent), DefineBehavior(ptr, ptr),
                  &::g2CrystalEvent::Dictionary, isa_proxy, 4,
                  sizeof(::g2CrystalEvent) );
      instance.SetNew(&new_g2CrystalEvent);
      instance.SetNewArray(&newArray_g2CrystalEvent);
      instance.SetDelete(&delete_g2CrystalEvent);
      instance.SetDeleteArray(&deleteArray_g2CrystalEvent);
      instance.SetDestructor(&destruct_g2CrystalEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g2CrystalEvent*)
   {
      return GenerateInitInstanceLocal((::g2CrystalEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g2CrystalEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void g2OUT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g2OUT(void *p = 0);
   static void *newArray_g2OUT(Long_t size, void *p);
   static void delete_g2OUT(void *p);
   static void deleteArray_g2OUT(void *p);
   static void destruct_g2OUT(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g2OUT*)
   {
      ::g2OUT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g2OUT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g2OUT", ::g2OUT::Class_Version(), "./src/GRETINA.h", 438,
                  typeid(::g2OUT), DefineBehavior(ptr, ptr),
                  &::g2OUT::Dictionary, isa_proxy, 4,
                  sizeof(::g2OUT) );
      instance.SetNew(&new_g2OUT);
      instance.SetNewArray(&newArray_g2OUT);
      instance.SetDelete(&delete_g2OUT);
      instance.SetDeleteArray(&deleteArray_g2OUT);
      instance.SetDestructor(&destruct_g2OUT);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g2OUT*)
   {
      return GenerateInitInstanceLocal((::g2OUT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g2OUT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void trackedGamma_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void trackedGamma_Dictionary();
   static void *new_trackedGamma(void *p = 0);
   static void *newArray_trackedGamma(Long_t size, void *p);
   static void delete_trackedGamma(void *p);
   static void deleteArray_trackedGamma(void *p);
   static void destruct_trackedGamma(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::trackedGamma*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::trackedGamma) == sizeof(::ROOT::Shadow::trackedGamma));
      ::trackedGamma *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::trackedGamma),0);
      static ::ROOT::TGenericClassInfo 
         instance("trackedGamma", "./src/GRETINA.h", 461,
                  typeid(::trackedGamma), DefineBehavior(ptr, ptr),
                  &trackedGamma_ShowMembers, &trackedGamma_Dictionary, isa_proxy, 4,
                  sizeof(::trackedGamma) );
      instance.SetNew(&new_trackedGamma);
      instance.SetNewArray(&newArray_trackedGamma);
      instance.SetDelete(&delete_trackedGamma);
      instance.SetDeleteArray(&deleteArray_trackedGamma);
      instance.SetDestructor(&destruct_trackedGamma);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::trackedGamma*)
   {
      return GenerateInitInstanceLocal((::trackedGamma*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::trackedGamma*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void trackedGamma_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::trackedGamma*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void GTrackEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GTrackEvent(void *p = 0);
   static void *newArray_GTrackEvent(Long_t size, void *p);
   static void delete_GTrackEvent(void *p);
   static void deleteArray_GTrackEvent(void *p);
   static void destruct_GTrackEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GTrackEvent*)
   {
      ::GTrackEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GTrackEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GTrackEvent", ::GTrackEvent::Class_Version(), "./src/GRETINA.h", 471,
                  typeid(::GTrackEvent), DefineBehavior(ptr, ptr),
                  &::GTrackEvent::Dictionary, isa_proxy, 4,
                  sizeof(::GTrackEvent) );
      instance.SetNew(&new_GTrackEvent);
      instance.SetNewArray(&newArray_GTrackEvent);
      instance.SetDelete(&delete_GTrackEvent);
      instance.SetDeleteArray(&deleteArray_GTrackEvent);
      instance.SetDestructor(&destruct_GTrackEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GTrackEvent*)
   {
      return GenerateInitInstanceLocal((::GTrackEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GTrackEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void g1GammaEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g1GammaEvent(void *p = 0);
   static void *newArray_g1GammaEvent(Long_t size, void *p);
   static void delete_g1GammaEvent(void *p);
   static void deleteArray_g1GammaEvent(void *p);
   static void destruct_g1GammaEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g1GammaEvent*)
   {
      ::g1GammaEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g1GammaEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g1GammaEvent", ::g1GammaEvent::Class_Version(), "./src/GRETINA.h", 483,
                  typeid(::g1GammaEvent), DefineBehavior(ptr, ptr),
                  &::g1GammaEvent::Dictionary, isa_proxy, 4,
                  sizeof(::g1GammaEvent) );
      instance.SetNew(&new_g1GammaEvent);
      instance.SetNewArray(&newArray_g1GammaEvent);
      instance.SetDelete(&delete_g1GammaEvent);
      instance.SetDeleteArray(&deleteArray_g1GammaEvent);
      instance.SetDestructor(&destruct_g1GammaEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g1GammaEvent*)
   {
      return GenerateInitInstanceLocal((::g1GammaEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g1GammaEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void g1OUT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g1OUT(void *p = 0);
   static void *newArray_g1OUT(Long_t size, void *p);
   static void delete_g1OUT(void *p);
   static void deleteArray_g1OUT(void *p);
   static void destruct_g1OUT(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g1OUT*)
   {
      ::g1OUT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g1OUT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g1OUT", ::g1OUT::Class_Version(), "./src/GRETINA.h", 513,
                  typeid(::g1OUT), DefineBehavior(ptr, ptr),
                  &::g1OUT::Dictionary, isa_proxy, 4,
                  sizeof(::g1OUT) );
      instance.SetNew(&new_g1OUT);
      instance.SetNewArray(&newArray_g1OUT);
      instance.SetDelete(&delete_g1OUT);
      instance.SetDeleteArray(&deleteArray_g1OUT);
      instance.SetDestructor(&destruct_g1OUT);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g1OUT*)
   {
      return GenerateInitInstanceLocal((::g1OUT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g1OUT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void g4Sim_emittedGamma_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void g4Sim_emittedGamma_Dictionary();
   static void *new_g4Sim_emittedGamma(void *p = 0);
   static void *newArray_g4Sim_emittedGamma(Long_t size, void *p);
   static void delete_g4Sim_emittedGamma(void *p);
   static void deleteArray_g4Sim_emittedGamma(void *p);
   static void destruct_g4Sim_emittedGamma(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g4Sim_emittedGamma*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::g4Sim_emittedGamma) == sizeof(::ROOT::Shadow::g4Sim_emittedGamma));
      ::g4Sim_emittedGamma *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::g4Sim_emittedGamma),0);
      static ::ROOT::TGenericClassInfo 
         instance("g4Sim_emittedGamma", "./src/GRETINA.h", 532,
                  typeid(::g4Sim_emittedGamma), DefineBehavior(ptr, ptr),
                  &g4Sim_emittedGamma_ShowMembers, &g4Sim_emittedGamma_Dictionary, isa_proxy, 4,
                  sizeof(::g4Sim_emittedGamma) );
      instance.SetNew(&new_g4Sim_emittedGamma);
      instance.SetNewArray(&newArray_g4Sim_emittedGamma);
      instance.SetDelete(&delete_g4Sim_emittedGamma);
      instance.SetDeleteArray(&deleteArray_g4Sim_emittedGamma);
      instance.SetDestructor(&destruct_g4Sim_emittedGamma);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g4Sim_emittedGamma*)
   {
      return GenerateInitInstanceLocal((::g4Sim_emittedGamma*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g4Sim_emittedGamma*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void g4Sim_emittedGamma_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::g4Sim_emittedGamma*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void g4Sim_abcd1234_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void g4Sim_abcd1234_Dictionary();
   static void *new_g4Sim_abcd1234(void *p = 0);
   static void *newArray_g4Sim_abcd1234(Long_t size, void *p);
   static void delete_g4Sim_abcd1234(void *p);
   static void deleteArray_g4Sim_abcd1234(void *p);
   static void destruct_g4Sim_abcd1234(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g4Sim_abcd1234*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::g4Sim_abcd1234) == sizeof(::ROOT::Shadow::g4Sim_abcd1234));
      ::g4Sim_abcd1234 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::g4Sim_abcd1234),0);
      static ::ROOT::TGenericClassInfo 
         instance("g4Sim_abcd1234", "./src/GRETINA.h", 539,
                  typeid(::g4Sim_abcd1234), DefineBehavior(ptr, ptr),
                  &g4Sim_abcd1234_ShowMembers, &g4Sim_abcd1234_Dictionary, isa_proxy, 4,
                  sizeof(::g4Sim_abcd1234) );
      instance.SetNew(&new_g4Sim_abcd1234);
      instance.SetNewArray(&newArray_g4Sim_abcd1234);
      instance.SetDelete(&delete_g4Sim_abcd1234);
      instance.SetDeleteArray(&deleteArray_g4Sim_abcd1234);
      instance.SetDestructor(&destruct_g4Sim_abcd1234);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g4Sim_abcd1234*)
   {
      return GenerateInitInstanceLocal((::g4Sim_abcd1234*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g4Sim_abcd1234*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void g4Sim_abcd1234_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::g4Sim_abcd1234*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void g4SimOUT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_g4SimOUT(void *p = 0);
   static void *newArray_g4SimOUT(Long_t size, void *p);
   static void delete_g4SimOUT(void *p);
   static void deleteArray_g4SimOUT(void *p);
   static void destruct_g4SimOUT(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::g4SimOUT*)
   {
      ::g4SimOUT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::g4SimOUT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("g4SimOUT", ::g4SimOUT::Class_Version(), "./src/GRETINA.h", 546,
                  typeid(::g4SimOUT), DefineBehavior(ptr, ptr),
                  &::g4SimOUT::Dictionary, isa_proxy, 4,
                  sizeof(::g4SimOUT) );
      instance.SetNew(&new_g4SimOUT);
      instance.SetNewArray(&newArray_g4SimOUT);
      instance.SetDelete(&delete_g4SimOUT);
      instance.SetDeleteArray(&deleteArray_g4SimOUT);
      instance.SetDestructor(&destruct_g4SimOUT);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::g4SimOUT*)
   {
      return GenerateInitInstanceLocal((::g4SimOUT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::g4SimOUT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void gHistos_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_gHistos(void *p = 0);
   static void *newArray_gHistos(Long_t size, void *p);
   static void delete_gHistos(void *p);
   static void deleteArray_gHistos(void *p);
   static void destruct_gHistos(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::gHistos*)
   {
      ::gHistos *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::gHistos >(0);
      static ::ROOT::TGenericClassInfo 
         instance("gHistos", ::gHistos::Class_Version(), "./src/GRETINA.h", 570,
                  typeid(::gHistos), DefineBehavior(ptr, ptr),
                  &::gHistos::Dictionary, isa_proxy, 4,
                  sizeof(::gHistos) );
      instance.SetNew(&new_gHistos);
      instance.SetNewArray(&newArray_gHistos);
      instance.SetDelete(&delete_gHistos);
      instance.SetDeleteArray(&deleteArray_gHistos);
      instance.SetDestructor(&destruct_gHistos);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::gHistos*)
   {
      return GenerateInitInstanceLocal((::gHistos*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::gHistos*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SuperPulse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SuperPulse(void *p = 0);
   static void *newArray_SuperPulse(Long_t size, void *p);
   static void delete_SuperPulse(void *p);
   static void deleteArray_SuperPulse(void *p);
   static void destruct_SuperPulse(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SuperPulse*)
   {
      ::SuperPulse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SuperPulse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SuperPulse", ::SuperPulse::Class_Version(), "./src/GRETINA.h", 596,
                  typeid(::SuperPulse), DefineBehavior(ptr, ptr),
                  &::SuperPulse::Dictionary, isa_proxy, 4,
                  sizeof(::SuperPulse) );
      instance.SetNew(&new_SuperPulse);
      instance.SetNewArray(&newArray_SuperPulse);
      instance.SetDelete(&delete_SuperPulse);
      instance.SetDeleteArray(&deleteArray_SuperPulse);
      instance.SetDestructor(&destruct_SuperPulse);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SuperPulse*)
   {
      return GenerateInitInstanceLocal((::SuperPulse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SuperPulse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void INLCorrection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_INLCorrection(void *p = 0);
   static void *newArray_INLCorrection(Long_t size, void *p);
   static void delete_INLCorrection(void *p);
   static void deleteArray_INLCorrection(void *p);
   static void destruct_INLCorrection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::INLCorrection*)
   {
      ::INLCorrection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::INLCorrection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("INLCorrection", ::INLCorrection::Class_Version(), "./src/INLCorrection.h", 37,
                  typeid(::INLCorrection), DefineBehavior(ptr, ptr),
                  &::INLCorrection::Dictionary, isa_proxy, 4,
                  sizeof(::INLCorrection) );
      instance.SetNew(&new_INLCorrection);
      instance.SetNewArray(&newArray_INLCorrection);
      instance.SetDelete(&delete_INLCorrection);
      instance.SetDeleteArray(&deleteArray_INLCorrection);
      instance.SetDestructor(&destruct_INLCorrection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::INLCorrection*)
   {
      return GenerateInitInstanceLocal((::INLCorrection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::INLCorrection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Histos_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Histos(void *p = 0);
   static void *newArray_Histos(Long_t size, void *p);
   static void delete_Histos(void *p);
   static void deleteArray_Histos(void *p);
   static void destruct_Histos(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Histos*)
   {
      ::Histos *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Histos >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Histos", ::Histos::Class_Version(), "./src/Histos.h", 13,
                  typeid(::Histos), DefineBehavior(ptr, ptr),
                  &::Histos::Dictionary, isa_proxy, 4,
                  sizeof(::Histos) );
      instance.SetNew(&new_Histos);
      instance.SetNewArray(&newArray_Histos);
      instance.SetDelete(&delete_Histos);
      instance.SetDeleteArray(&deleteArray_Histos);
      instance.SetDestructor(&destruct_Histos);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Histos*)
   {
      return GenerateInitInstanceLocal((::Histos*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Histos*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TrackClusterIP::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TrackClusterIP::Class_Name()
{
   return "TrackClusterIP";
}

//______________________________________________________________________________
const char *TrackClusterIP::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackClusterIP*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackClusterIP::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackClusterIP*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackClusterIP::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackClusterIP*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackClusterIP::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackClusterIP*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TrackCluster::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TrackCluster::Class_Name()
{
   return "TrackCluster";
}

//______________________________________________________________________________
const char *TrackCluster::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackCluster::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackCluster::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackCluster::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackCluster*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TrackShell::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TrackShell::Class_Name()
{
   return "TrackShell";
}

//______________________________________________________________________________
const char *TrackShell::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackShell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackShell::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackShell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackShell::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackShell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackShell::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackShell*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TrackCtrl::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TrackCtrl::Class_Name()
{
   return "TrackCtrl";
}

//______________________________________________________________________________
const char *TrackCtrl::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackCtrl*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackCtrl::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackCtrl*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackCtrl::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackCtrl*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackCtrl::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackCtrl*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TrackStat::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TrackStat::Class_Name()
{
   return "TrackStat";
}

//______________________________________________________________________________
const char *TrackStat::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackStat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackStat::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackStat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackStat::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackStat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackStat::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackStat*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TrackPerm::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TrackPerm::Class_Name()
{
   return "TrackPerm";
}

//______________________________________________________________________________
const char *TrackPerm::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackPerm*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackPerm::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackPerm*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackPerm::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackPerm*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackPerm::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackPerm*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Track::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Track::Class_Name()
{
   return "Track";
}

//______________________________________________________________________________
const char *Track::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Track::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Track::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Track::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *controlVariables::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *controlVariables::Class_Name()
{
   return "controlVariables";
}

//______________________________________________________________________________
const char *controlVariables::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::controlVariables*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int controlVariables::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::controlVariables*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void controlVariables::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::controlVariables*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *controlVariables::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::controlVariables*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *counterVariables::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *counterVariables::Class_Name()
{
   return "counterVariables";
}

//______________________________________________________________________________
const char *counterVariables::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::counterVariables*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int counterVariables::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::counterVariables*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void counterVariables::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::counterVariables*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *counterVariables::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::counterVariables*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GRETINA::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GRETINA::Class_Name()
{
   return "GRETINA";
}

//______________________________________________________________________________
const char *GRETINA::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRETINA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GRETINA::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRETINA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GRETINA::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRETINA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GRETINA::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRETINA*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *rotationMatrix::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *rotationMatrix::Class_Name()
{
   return "rotationMatrix";
}

//______________________________________________________________________________
const char *rotationMatrix::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rotationMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int rotationMatrix::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::rotationMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void rotationMatrix::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rotationMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *rotationMatrix::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::rotationMatrix*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GRETINAVariables::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GRETINAVariables::Class_Name()
{
   return "GRETINAVariables";
}

//______________________________________________________________________________
const char *GRETINAVariables::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRETINAVariables*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GRETINAVariables::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GRETINAVariables*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GRETINAVariables::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRETINAVariables*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GRETINAVariables::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GRETINAVariables*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g3Waveform::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g3Waveform::Class_Name()
{
   return "g3Waveform";
}

//______________________________________________________________________________
const char *g3Waveform::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3Waveform*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g3Waveform::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3Waveform*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g3Waveform::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3Waveform*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g3Waveform::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3Waveform*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g3ChannelEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g3ChannelEvent::Class_Name()
{
   return "g3ChannelEvent";
}

//______________________________________________________________________________
const char *g3ChannelEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3ChannelEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g3ChannelEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3ChannelEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g3ChannelEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3ChannelEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g3ChannelEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3ChannelEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g3CrystalEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g3CrystalEvent::Class_Name()
{
   return "g3CrystalEvent";
}

//______________________________________________________________________________
const char *g3CrystalEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3CrystalEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g3CrystalEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3CrystalEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g3CrystalEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3CrystalEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g3CrystalEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3CrystalEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g3OUT::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g3OUT::Class_Name()
{
   return "g3OUT";
}

//______________________________________________________________________________
const char *g3OUT::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3OUT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g3OUT::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3OUT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g3OUT::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3OUT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g3OUT::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3OUT*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g3HistoryEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g3HistoryEvent::Class_Name()
{
   return "g3HistoryEvent";
}

//______________________________________________________________________________
const char *g3HistoryEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3HistoryEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g3HistoryEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g3HistoryEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g3HistoryEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3HistoryEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g3HistoryEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g3HistoryEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Bank29::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Bank29::Class_Name()
{
   return "Bank29";
}

//______________________________________________________________________________
const char *Bank29::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Bank29*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Bank29::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Bank29*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Bank29::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Bank29*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Bank29::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Bank29*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g2IntPt::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g2IntPt::Class_Name()
{
   return "g2IntPt";
}

//______________________________________________________________________________
const char *g2IntPt::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g2IntPt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g2IntPt::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g2IntPt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g2IntPt::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g2IntPt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g2IntPt::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g2IntPt*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g2CrystalEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g2CrystalEvent::Class_Name()
{
   return "g2CrystalEvent";
}

//______________________________________________________________________________
const char *g2CrystalEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g2CrystalEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g2CrystalEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g2CrystalEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g2CrystalEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g2CrystalEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g2CrystalEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g2CrystalEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g2OUT::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g2OUT::Class_Name()
{
   return "g2OUT";
}

//______________________________________________________________________________
const char *g2OUT::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g2OUT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g2OUT::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g2OUT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g2OUT::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g2OUT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g2OUT::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g2OUT*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GTrackEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GTrackEvent::Class_Name()
{
   return "GTrackEvent";
}

//______________________________________________________________________________
const char *GTrackEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GTrackEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GTrackEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GTrackEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GTrackEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GTrackEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GTrackEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GTrackEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g1GammaEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g1GammaEvent::Class_Name()
{
   return "g1GammaEvent";
}

//______________________________________________________________________________
const char *g1GammaEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g1GammaEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g1GammaEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g1GammaEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g1GammaEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g1GammaEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g1GammaEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g1GammaEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g1OUT::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g1OUT::Class_Name()
{
   return "g1OUT";
}

//______________________________________________________________________________
const char *g1OUT::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g1OUT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g1OUT::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g1OUT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g1OUT::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g1OUT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g1OUT::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g1OUT*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *g4SimOUT::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *g4SimOUT::Class_Name()
{
   return "g4SimOUT";
}

//______________________________________________________________________________
const char *g4SimOUT::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g4SimOUT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int g4SimOUT::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::g4SimOUT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void g4SimOUT::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g4SimOUT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *g4SimOUT::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::g4SimOUT*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *gHistos::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *gHistos::Class_Name()
{
   return "gHistos";
}

//______________________________________________________________________________
const char *gHistos::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::gHistos*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int gHistos::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::gHistos*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void gHistos::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::gHistos*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *gHistos::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::gHistos*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SuperPulse::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SuperPulse::Class_Name()
{
   return "SuperPulse";
}

//______________________________________________________________________________
const char *SuperPulse::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SuperPulse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SuperPulse::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SuperPulse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SuperPulse::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SuperPulse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SuperPulse::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SuperPulse*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *INLCorrection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *INLCorrection::Class_Name()
{
   return "INLCorrection";
}

//______________________________________________________________________________
const char *INLCorrection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::INLCorrection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int INLCorrection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::INLCorrection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void INLCorrection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::INLCorrection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *INLCorrection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::INLCorrection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Histos::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Histos::Class_Name()
{
   return "Histos";
}

//______________________________________________________________________________
const char *Histos::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Histos*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Histos::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Histos*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Histos::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Histos*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Histos::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Histos*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void rotationMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class rotationMatrix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(rotationMatrix::Class(),this);
   } else {
      R__b.WriteClassBuffer(rotationMatrix::Class(),this);
   }
}

//______________________________________________________________________________
void rotationMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class rotationMatrix.
      TClass *R__cl = ::rotationMatrix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crmat[31][4][4][4]", crmat);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_rotationMatrix(void *p) {
      return  p ? new(p) ::rotationMatrix : new ::rotationMatrix;
   }
   static void *newArray_rotationMatrix(Long_t nElements, void *p) {
      return p ? new(p) ::rotationMatrix[nElements] : new ::rotationMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_rotationMatrix(void *p) {
      delete ((::rotationMatrix*)p);
   }
   static void deleteArray_rotationMatrix(void *p) {
      delete [] ((::rotationMatrix*)p);
   }
   static void destruct_rotationMatrix(void *p) {
      typedef ::rotationMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::rotationMatrix

//______________________________________________________________________________
void g3ChannelEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class g3ChannelEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g3ChannelEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(g3ChannelEvent::Class(),this);
   }
}

//______________________________________________________________________________
void g3ChannelEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g3ChannelEvent.
      TClass *R__cl = ::g3ChannelEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hdr0", &hdr0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hdr1", &hdr1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hdr7", &hdr7);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ID", &ID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segNum", &segNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eRaw", &eRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCal", &eCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCalPO", &eCalPO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prevE1", &prevE1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prevE2", &prevE2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaT1", &deltaT1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaT2", &deltaT2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PZrollover", &PZrollover);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCalc", &eCalc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calcTime", &calcTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CFDtimestamp", &CFDtimestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "baseline", &baseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "riseTime", &riseTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wf", &wf);
      R__insp.InspectMember(wf, "wf.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g3ChannelEvent(void *p) {
      return  p ? new(p) ::g3ChannelEvent : new ::g3ChannelEvent;
   }
   static void *newArray_g3ChannelEvent(Long_t nElements, void *p) {
      return p ? new(p) ::g3ChannelEvent[nElements] : new ::g3ChannelEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_g3ChannelEvent(void *p) {
      delete ((::g3ChannelEvent*)p);
   }
   static void deleteArray_g3ChannelEvent(void *p) {
      delete [] ((::g3ChannelEvent*)p);
   }
   static void destruct_g3ChannelEvent(void *p) {
      typedef ::g3ChannelEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g3ChannelEvent

//______________________________________________________________________________
void g3Waveform::Streamer(TBuffer &R__b)
{
   // Stream an object of class g3Waveform.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g3Waveform::Class(),this);
   } else {
      R__b.WriteClassBuffer(g3Waveform::Class(),this);
   }
}

//______________________________________________________________________________
void g3Waveform::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g3Waveform.
      TClass *R__cl = ::g3Waveform::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "raw", (void*)&raw);
      R__insp.InspectMember("vector<Short_t>", (void*)&raw, "raw.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", (void*)&pz);
      R__insp.InspectMember("vector<Float_t>", (void*)&pz, "pz.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g3Waveform(void *p) {
      return  p ? new(p) ::g3Waveform : new ::g3Waveform;
   }
   static void *newArray_g3Waveform(Long_t nElements, void *p) {
      return p ? new(p) ::g3Waveform[nElements] : new ::g3Waveform[nElements];
   }
   // Wrapper around operator delete
   static void delete_g3Waveform(void *p) {
      delete ((::g3Waveform*)p);
   }
   static void deleteArray_g3Waveform(void *p) {
      delete [] ((::g3Waveform*)p);
   }
   static void destruct_g3Waveform(void *p) {
      typedef ::g3Waveform current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g3Waveform

//______________________________________________________________________________
void g3CrystalEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class g3CrystalEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g3CrystalEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(g3CrystalEvent::Class(),this);
   }
}

//______________________________________________________________________________
void g3CrystalEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g3CrystalEvent.
      TClass *R__cl = ::g3CrystalEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystalNum", &crystalNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quadNum", &quadNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runNumber", &runNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dopplerSeg", &dopplerSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dopplerCrystal", &dopplerCrystal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "traceLength", &traceLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segSum", &segSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segSumTimed", &segSumTimed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segSumTimed2", &segSumTimed2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chn", (void*)&chn);
      R__insp.InspectMember("vector<g3ChannelEvent>", (void*)&chn, "chn.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g3CrystalEvent(void *p) {
      return  p ? new(p) ::g3CrystalEvent : new ::g3CrystalEvent;
   }
   static void *newArray_g3CrystalEvent(Long_t nElements, void *p) {
      return p ? new(p) ::g3CrystalEvent[nElements] : new ::g3CrystalEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_g3CrystalEvent(void *p) {
      delete ((::g3CrystalEvent*)p);
   }
   static void deleteArray_g3CrystalEvent(void *p) {
      delete [] ((::g3CrystalEvent*)p);
   }
   static void destruct_g3CrystalEvent(void *p) {
      typedef ::g3CrystalEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g3CrystalEvent

//______________________________________________________________________________
void g3OUT::Streamer(TBuffer &R__b)
{
   // Stream an object of class g3OUT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g3OUT::Class(),this);
   } else {
      R__b.WriteClassBuffer(g3OUT::Class(),this);
   }
}

//______________________________________________________________________________
void g3OUT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g3OUT.
      TClass *R__cl = ::g3OUT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtals", (void*)&xtals);
      R__insp.InspectMember("vector<g3CrystalEvent>", (void*)&xtals, "xtals.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g3OUT(void *p) {
      return  p ? new(p) ::g3OUT : new ::g3OUT;
   }
   static void *newArray_g3OUT(Long_t nElements, void *p) {
      return p ? new(p) ::g3OUT[nElements] : new ::g3OUT[nElements];
   }
   // Wrapper around operator delete
   static void delete_g3OUT(void *p) {
      delete ((::g3OUT*)p);
   }
   static void deleteArray_g3OUT(void *p) {
      delete [] ((::g3OUT*)p);
   }
   static void destruct_g3OUT(void *p) {
      typedef ::g3OUT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g3OUT

//______________________________________________________________________________
void g3HistoryEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class g3HistoryEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g3HistoryEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(g3HistoryEvent::Class(),this);
   }
}

//______________________________________________________________________________
void g3HistoryEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g3HistoryEvent.
      TClass *R__cl = ::g3HistoryEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "past", (void*)&past);
      R__insp.InspectMember("vector<historyEvent>", (void*)&past, "past.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g3HistoryEvent(void *p) {
      return  p ? new(p) ::g3HistoryEvent : new ::g3HistoryEvent;
   }
   static void *newArray_g3HistoryEvent(Long_t nElements, void *p) {
      return p ? new(p) ::g3HistoryEvent[nElements] : new ::g3HistoryEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_g3HistoryEvent(void *p) {
      delete ((::g3HistoryEvent*)p);
   }
   static void deleteArray_g3HistoryEvent(void *p) {
      delete [] ((::g3HistoryEvent*)p);
   }
   static void destruct_g3HistoryEvent(void *p) {
      typedef ::g3HistoryEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g3HistoryEvent

//______________________________________________________________________________
void Bank29::Streamer(TBuffer &R__b)
{
   // Stream an object of class Bank29.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Bank29::Class(),this);
   } else {
      R__b.WriteClassBuffer(Bank29::Class(),this);
   }
}

//______________________________________________________________________________
void Bank29::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Bank29.
      TClass *R__cl = ::Bank29::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chn", (void*)&chn);
      R__insp.InspectMember("vector<g3ChannelEvent>", (void*)&chn, "chn.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wfCFD", &wfCFD);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Bank29(void *p) {
      return  p ? new(p) ::Bank29 : new ::Bank29;
   }
   static void *newArray_Bank29(Long_t nElements, void *p) {
      return p ? new(p) ::Bank29[nElements] : new ::Bank29[nElements];
   }
   // Wrapper around operator delete
   static void delete_Bank29(void *p) {
      delete ((::Bank29*)p);
   }
   static void deleteArray_Bank29(void *p) {
      delete [] ((::Bank29*)p);
   }
   static void destruct_Bank29(void *p) {
      typedef ::Bank29 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Bank29

//______________________________________________________________________________
void g2IntPt::Streamer(TBuffer &R__b)
{
   // Stream an object of class g2IntPt.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g2IntPt::Class(),this);
   } else {
      R__b.WriteClassBuffer(g2IntPt::Class(),this);
   }
}

//______________________________________________________________________________
void g2IntPt::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g2IntPt.
      TClass *R__cl = ::g2IntPt::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segNum", &segNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyz", &xyz);
      R__insp.InspectMember(xyz, "xyz.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyzLab", &xyzLab);
      R__insp.InspectMember(xyzLab, "xyzLab.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyzLabSeg", &xyzLabSeg);
      R__insp.InspectMember(xyzLabSeg, "xyzLabSeg.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyzLabCrys", &xyzLabCrys);
      R__insp.InspectMember(xyzLabCrys, "xyzLabCrys.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e", &e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segE", &segE);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g2IntPt(void *p) {
      return  p ? new(p) ::g2IntPt : new ::g2IntPt;
   }
   static void *newArray_g2IntPt(Long_t nElements, void *p) {
      return p ? new(p) ::g2IntPt[nElements] : new ::g2IntPt[nElements];
   }
   // Wrapper around operator delete
   static void delete_g2IntPt(void *p) {
      delete ((::g2IntPt*)p);
   }
   static void deleteArray_g2IntPt(void *p) {
      delete [] ((::g2IntPt*)p);
   }
   static void destruct_g2IntPt(void *p) {
      typedef ::g2IntPt current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g2IntPt

//______________________________________________________________________________
void g2CrystalEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class g2CrystalEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g2CrystalEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(g2CrystalEvent::Class(),this);
   }
}

//______________________________________________________________________________
void g2CrystalEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g2CrystalEvent.
      TClass *R__cl = ::g2CrystalEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystalID", &crystalID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystalNum", &crystalNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quadNum", &quadNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chiSq", &chiSq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normChiSq", &normChiSq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bl", &bl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "error", &error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cc", &cc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cc1", &cc1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cc2", &cc2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cc3", &cc3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cc4", &cc4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segSum", &segSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doppler", &doppler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dopplerSeg", &dopplerSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dopplerCrystal", &dopplerCrystal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intpts", (void*)&intpts);
      R__insp.InspectMember("vector<g2IntPt>", (void*)&intpts, "intpts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "waveAll", (void*)&waveAll);
      R__insp.InspectMember("vector<Short_t>", (void*)&waveAll, "waveAll.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g2CrystalEvent(void *p) {
      return  p ? new(p) ::g2CrystalEvent : new ::g2CrystalEvent;
   }
   static void *newArray_g2CrystalEvent(Long_t nElements, void *p) {
      return p ? new(p) ::g2CrystalEvent[nElements] : new ::g2CrystalEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_g2CrystalEvent(void *p) {
      delete ((::g2CrystalEvent*)p);
   }
   static void deleteArray_g2CrystalEvent(void *p) {
      delete [] ((::g2CrystalEvent*)p);
   }
   static void destruct_g2CrystalEvent(void *p) {
      typedef ::g2CrystalEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g2CrystalEvent

//______________________________________________________________________________
void g2OUT::Streamer(TBuffer &R__b)
{
   // Stream an object of class g2OUT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g2OUT::Class(),this);
   } else {
      R__b.WriteClassBuffer(g2OUT::Class(),this);
   }
}

//______________________________________________________________________________
void g2OUT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g2OUT.
      TClass *R__cl = ::g2OUT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runNumber", &runNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtals", (void*)&xtals);
      R__insp.InspectMember("vector<g2CrystalEvent>", (void*)&xtals, "xtals.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g2OUT(void *p) {
      return  p ? new(p) ::g2OUT : new ::g2OUT;
   }
   static void *newArray_g2OUT(Long_t nElements, void *p) {
      return p ? new(p) ::g2OUT[nElements] : new ::g2OUT[nElements];
   }
   // Wrapper around operator delete
   static void delete_g2OUT(void *p) {
      delete ((::g2OUT*)p);
   }
   static void deleteArray_g2OUT(void *p) {
      delete [] ((::g2OUT*)p);
   }
   static void destruct_g2OUT(void *p) {
      typedef ::g2OUT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g2OUT

//______________________________________________________________________________
void GTrackEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class GTrackEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GTrackEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(GTrackEvent::Class(),this);
   }
}

//______________________________________________________________________________
void GTrackEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GTrackEvent.
      TClass *R__cl = ::GTrackEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "obj", (void*)&obj);
      R__insp.InspectMember("vector<trackedGamma>", (void*)&obj, "obj.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GTrackEvent(void *p) {
      return  p ? new(p) ::GTrackEvent : new ::GTrackEvent;
   }
   static void *newArray_GTrackEvent(Long_t nElements, void *p) {
      return p ? new(p) ::GTrackEvent[nElements] : new ::GTrackEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_GTrackEvent(void *p) {
      delete ((::GTrackEvent*)p);
   }
   static void deleteArray_GTrackEvent(void *p) {
      delete [] ((::GTrackEvent*)p);
   }
   static void destruct_GTrackEvent(void *p) {
      typedef ::GTrackEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GTrackEvent

//______________________________________________________________________________
void g1GammaEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class g1GammaEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g1GammaEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(g1GammaEvent::Class(),this);
   }
}

//______________________________________________________________________________
void g1GammaEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g1GammaEvent.
      TClass *R__cl = ::g1GammaEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracked", &tracked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FOM", &FOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nIntPts", &nIntPts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cc", &cc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doppler", &doppler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyzLab1", &xyzLab1);
      R__insp.InspectMember(xyzLab1, "xyzLab1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyzLab2", &xyzLab2);
      R__insp.InspectMember(xyzLab2, "xyzLab2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e1", &e1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e2", &e2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &t0);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g1GammaEvent(void *p) {
      return  p ? new(p) ::g1GammaEvent : new ::g1GammaEvent;
   }
   static void *newArray_g1GammaEvent(Long_t nElements, void *p) {
      return p ? new(p) ::g1GammaEvent[nElements] : new ::g1GammaEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_g1GammaEvent(void *p) {
      delete ((::g1GammaEvent*)p);
   }
   static void deleteArray_g1GammaEvent(void *p) {
      delete [] ((::g1GammaEvent*)p);
   }
   static void destruct_g1GammaEvent(void *p) {
      typedef ::g1GammaEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g1GammaEvent

//______________________________________________________________________________
void g1OUT::Streamer(TBuffer &R__b)
{
   // Stream an object of class g1OUT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g1OUT::Class(),this);
   } else {
      R__b.WriteClassBuffer(g1OUT::Class(),this);
   }
}

//______________________________________________________________________________
void g1OUT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g1OUT.
      TClass *R__cl = ::g1OUT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammas", (void*)&gammas);
      R__insp.InspectMember("vector<g1GammaEvent>", (void*)&gammas, "gammas.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g1OUT(void *p) {
      return  p ? new(p) ::g1OUT : new ::g1OUT;
   }
   static void *newArray_g1OUT(Long_t nElements, void *p) {
      return p ? new(p) ::g1OUT[nElements] : new ::g1OUT[nElements];
   }
   // Wrapper around operator delete
   static void delete_g1OUT(void *p) {
      delete ((::g1OUT*)p);
   }
   static void deleteArray_g1OUT(void *p) {
      delete [] ((::g1OUT*)p);
   }
   static void destruct_g1OUT(void *p) {
      typedef ::g1OUT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g1OUT

//______________________________________________________________________________
void g4SimOUT::Streamer(TBuffer &R__b)
{
   // Stream an object of class g4SimOUT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(g4SimOUT::Class(),this);
   } else {
      R__b.WriteClassBuffer(g4SimOUT::Class(),this);
   }
}

//______________________________________________________________________________
void g4SimOUT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class g4SimOUT.
      TClass *R__cl = ::g4SimOUT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sim", (void*)&sim);
      R__insp.InspectMember("vector<g4Sim_abcd1234>", (void*)&sim, "sim.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g4SimOUT(void *p) {
      return  p ? new(p) ::g4SimOUT : new ::g4SimOUT;
   }
   static void *newArray_g4SimOUT(Long_t nElements, void *p) {
      return p ? new(p) ::g4SimOUT[nElements] : new ::g4SimOUT[nElements];
   }
   // Wrapper around operator delete
   static void delete_g4SimOUT(void *p) {
      delete ((::g4SimOUT*)p);
   }
   static void deleteArray_g4SimOUT(void *p) {
      delete [] ((::g4SimOUT*)p);
   }
   static void destruct_g4SimOUT(void *p) {
      typedef ::g4SimOUT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g4SimOUT

//______________________________________________________________________________
void gHistos::Streamer(TBuffer &R__b)
{
   // Stream an object of class gHistos.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(gHistos::Class(),this);
   } else {
      R__b.WriteClassBuffer(gHistos::Class(),this);
   }
}

//______________________________________________________________________________
void gHistos::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class gHistos.
      TClass *R__cl = ::gHistos::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtalkThresh", &xtalkThresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eRaw[4800]", &eRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eCal[4800]", &eCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult2Pair[40][40]", &mult2Pair);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_gHistos(void *p) {
      return  p ? new(p) ::gHistos : new ::gHistos;
   }
   static void *newArray_gHistos(Long_t nElements, void *p) {
      return p ? new(p) ::gHistos[nElements] : new ::gHistos[nElements];
   }
   // Wrapper around operator delete
   static void delete_gHistos(void *p) {
      delete ((::gHistos*)p);
   }
   static void deleteArray_gHistos(void *p) {
      delete [] ((::gHistos*)p);
   }
   static void destruct_gHistos(void *p) {
      typedef ::gHistos current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::gHistos

//______________________________________________________________________________
void GRETINAVariables::Streamer(TBuffer &R__b)
{
   // Stream an object of class GRETINAVariables.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GRETINAVariables::Class(),this);
   } else {
      R__b.WriteClassBuffer(GRETINAVariables::Class(),this);
   }
}

//______________________________________________________________________________
void GRETINAVariables::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GRETINAVariables.
      TClass *R__cl = ::GRETINAVariables::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hole[30]", hole);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electronicsOrder[30]", electronicsOrder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targetXYZ", &targetXYZ);
      R__insp.InspectMember(targetXYZ, "targetXYZ.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "radiusCor[120]", radiusCor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ataCor", &ataCor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "btaCor", &btaCor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehiGeOffset[4800]", ehiGeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehiGeGain[4800]", ehiGeGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dnlLU[4800][5000]", dnlLU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dinoFactor[120][40][40]", dinoFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minCrossTime", &minCrossTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCrossTime", &maxCrossTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Q1Special[4][36]", Q1Special);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Q2Special[4][36]", Q2Special);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "QSegmentOrder[4][36]", QSegmentOrder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CrystalAPositions[3][36]", CrystalAPositions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CrystalBPositions[3][36]", CrystalBPositions);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GRETINAVariables(void *p) {
      return  p ? new(p) ::GRETINAVariables : new ::GRETINAVariables;
   }
   static void *newArray_GRETINAVariables(Long_t nElements, void *p) {
      return p ? new(p) ::GRETINAVariables[nElements] : new ::GRETINAVariables[nElements];
   }
   // Wrapper around operator delete
   static void delete_GRETINAVariables(void *p) {
      delete ((::GRETINAVariables*)p);
   }
   static void deleteArray_GRETINAVariables(void *p) {
      delete [] ((::GRETINAVariables*)p);
   }
   static void destruct_GRETINAVariables(void *p) {
      typedef ::GRETINAVariables current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GRETINAVariables

//______________________________________________________________________________
void GRETINA::Streamer(TBuffer &R__b)
{
   // Stream an object of class GRETINA.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GRETINA::Class(),this);
   } else {
      R__b.WriteClassBuffer(GRETINA::Class(),this);
   }
}

//______________________________________________________________________________
void GRETINA::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GRETINA.
      TClass *R__cl = ::GRETINA::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rot", &rot);
      R__insp.InspectMember(rot, "rot.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sp", &sp);
      R__insp.InspectMember(sp, "sp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "g1X", &g1X);
      R__insp.InspectMember(g1X, "g1X.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "g2X", &g2X);
      R__insp.InspectMember(g2X, "g2X.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.InspectMember(pt, "pt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "g3X", &g3X);
      R__insp.InspectMember(g3X, "g3X.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "g3ch", &g3ch);
      R__insp.InspectMember(g3ch, "g3ch.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "g3Temp", (void*)&g3Temp);
      R__insp.InspectMember("vector<g3ChannelEvent>", (void*)&g3Temp, "g3Temp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gH", (void*)&gH);
      R__insp.InspectMember("historyEvent", (void*)&gH, "gH.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gBuf[1048576]", gBuf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "g3H", &g3H);
      R__insp.InspectMember(g3H, "g3H.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "g3out", &g3out);
      R__insp.InspectMember(g3out, "g3out.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "g2out", &g2out);
      R__insp.InspectMember(g2out, "g2out.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "g1out", &g1out);
      R__insp.InspectMember(g1out, "g1out.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gSimOut", &gSimOut);
      R__insp.InspectMember(gSimOut, "gSimOut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "b29", &b29);
      R__insp.InspectMember(b29, "b29.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track", &track);
      R__insp.InspectMember(track, "track.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gHist", &gHist);
      R__insp.InspectMember(gHist, "gHist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xA[36]", xA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yA[36]", yA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zA[36]", zA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xB[36]", xB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yB[36]", yB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zB[36]", zB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cloverModuleNumber", &cloverModuleNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cloverSlope[40]", cloverSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cloverOffset[40]", cloverOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wfMinCrossTime", &wfMinCrossTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wfMaxCrossTime", &wfMaxCrossTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "QNormal[4][40]", QNormal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Q1Special[4][40]", Q1Special);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Q2Special[4][40]", Q2Special);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scalerBuf[8192]", scalerBuf);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GRETINA(void *p) {
      return  p ? new(p) ::GRETINA : new ::GRETINA;
   }
   static void *newArray_GRETINA(Long_t nElements, void *p) {
      return p ? new(p) ::GRETINA[nElements] : new ::GRETINA[nElements];
   }
   // Wrapper around operator delete
   static void delete_GRETINA(void *p) {
      delete ((::GRETINA*)p);
   }
   static void deleteArray_GRETINA(void *p) {
      delete [] ((::GRETINA*)p);
   }
   static void destruct_GRETINA(void *p) {
      typedef ::GRETINA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GRETINA

//______________________________________________________________________________
void controlVariables::Streamer(TBuffer &R__b)
{
   // Stream an object of class controlVariables.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(controlVariables::Class(),this);
   } else {
      R__b.WriteClassBuffer(controlVariables::Class(),this);
   }
}

//______________________________________________________________________________
void controlVariables::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class controlVariables.
      TClass *R__cl = ::controlVariables::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doTRACK", &doTRACK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "withWAVE", &withWAVE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "withSEG", &withSEG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "withHISTOS", &withHISTOS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "withTREE", &withTREE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dopplerSimple", &dopplerSimple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startRun", &startRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileType", &fileType);
      R__insp.InspectMember(fileType, "fileType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileName", &fileName);
      R__insp.InspectMember(fileName, "fileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outputSuffix", &outputSuffix);
      R__insp.InspectMember(outputSuffix, "outputSuffix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outfileName", &outfileName);
      R__insp.InspectMember(outfileName, "outfileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "directory", &directory);
      R__insp.InspectMember(directory, "directory.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outputON", &outputON);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outputName", &outputName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "outputFileName", &outputFileName);
      R__insp.InspectMember(outputFileName, "outputFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "compressedFile", &compressedFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "compressedFileB", &compressedFileB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noHFC", &noHFC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "suppressTS", &suppressTS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pgh", &pgh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noEB", &noEB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibration", &calibration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "specifyCalibration", &specifyCalibration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibrationFile", &calibrationFile);
      R__insp.InspectMember(calibrationFile, "calibrationFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtalkAnalysis", &xtalkAnalysis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtalkID", &xtalkID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtLowE", &xtLowE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtHighE", &xtHighE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "superPulse", &superPulse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "spLowE", &spLowE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "spHighE", &spHighE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "spXtalkFile", &spXtalkFile);
      R__insp.InspectMember(spXtalkFile, "spXtalkFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*spCalibDirectory", &spCalibDirectory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "INLcorrection", &INLcorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "INLCConly", &INLCConly);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "digMapFileName", &digMapFileName);
      R__insp.InspectMember(digMapFileName, "digMapFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gateTree", &gateTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mode2Old", &mode2Old);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WITH_TRACETREE", &WITH_TRACETREE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CHECK_PILEUP", &CHECK_PILEUP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FALLON_TIME", &FALLON_TIME);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LEDCROSSING", &LEDCROSSING);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FIT_BASELINE", &FIT_BASELINE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PZ_BASELINE", &PZ_BASELINE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PZ_ZERO_BASELINE", &PZ_ZERO_BASELINE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RADFORD_BASELINE", &RADFORD_BASELINE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RADFORD_ENERGY", &RADFORD_ENERGY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "GREGORICH_ENERGY", &GREGORICH_ENERGY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "POLEZERO_TRACE", &POLEZERO_TRACE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FPGA_ENERGY", &FPGA_ENERGY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BASIC_ENERGY", &BASIC_ENERGY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "INL_CORRECT", &INL_CORRECT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "analyze2AND3", &analyze2AND3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileName2", &fileName2);
      R__insp.InspectMember(fileName2, "fileName2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s800File", &s800File);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s800ControlFile", &s800ControlFile);
      R__insp.InspectMember(s800ControlFile, "s800ControlFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s800VariableFile", &s800VariableFile);
      R__insp.InspectMember(s800VariableFile, "s800VariableFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "S800_DIAG", &S800_DIAG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E1_RAW", &E1_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E1_CAL", &E1_CAL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E2_RAW", &E2_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E2_CAL", &E2_CAL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E3_RAW", &E3_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E3_CAL", &E3_CAL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IC_RAW", &IC_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IC_CAL", &IC_CAL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IC_SUMS", &IC_SUMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CRDC1_RAW_PADS", &CRDC1_RAW_PADS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CRDC1_RAW_CALC", &CRDC1_RAW_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CRDC1_CALC", &CRDC1_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CRDC2_RAW_PADS", &CRDC2_RAW_PADS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CRDC2_RAW_CALC", &CRDC2_RAW_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CRDC2_CALC", &CRDC2_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FP_TRACK_RAW", &FP_TRACK_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FP_TRACK_COR", &FP_TRACK_COR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HODO_RAW", &HODO_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HODO_CAL", &HODO_CAL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TARGET_PPAC_RAW", &TARGET_PPAC_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TARGET_PPAC_CALC", &TARGET_PPAC_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TARGET_PIN1_RAW", &TARGET_PIN1_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TARGET_PIN1_CAL", &TARGET_PIN1_CAL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TARGET_PIN2_RAW", &TARGET_PIN2_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TARGET_PIN2_CAL", &TARGET_PIN2_CAL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TARGET_TOTAL", &TARGET_TOTAL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_CALC", &IMAGE_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_TPPAC1_RAW", &IMAGE_TPPAC1_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_TPPAC1_CALC", &IMAGE_TPPAC1_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_TPPAC2_RAW", &IMAGE_TPPAC2_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_TPPAC2_CALC", &IMAGE_TPPAC2_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_TRACK", &IMAGE_TRACK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_PPAC1_RAW", &IMAGE_PPAC1_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_PPAC1_CALC", &IMAGE_PPAC1_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_PPAC2_RAW", &IMAGE_PPAC2_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IMAGE_PPAC2_CALC", &IMAGE_PPAC2_CALC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "OBJECT_PIN_RAW", &OBJECT_PIN_RAW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "OBJECT_PIN_CAL", &OBJECT_PIN_CAL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TRIGGER", &TRIGGER);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "S800_TIMESTAMP", &S800_TIMESTAMP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TOF", &TOF);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_controlVariables(void *p) {
      return  p ? new(p) ::controlVariables : new ::controlVariables;
   }
   static void *newArray_controlVariables(Long_t nElements, void *p) {
      return p ? new(p) ::controlVariables[nElements] : new ::controlVariables[nElements];
   }
   // Wrapper around operator delete
   static void delete_controlVariables(void *p) {
      delete ((::controlVariables*)p);
   }
   static void deleteArray_controlVariables(void *p) {
      delete [] ((::controlVariables*)p);
   }
   static void destruct_controlVariables(void *p) {
      typedef ::controlVariables current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::controlVariables

//______________________________________________________________________________
void counterVariables::Streamer(TBuffer &R__b)
{
   // Stream an object of class counterVariables.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(counterVariables::Class(),this);
   } else {
      R__b.WriteClassBuffer(counterVariables::Class(),this);
   }
}

//______________________________________________________________________________
void counterVariables::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class counterVariables.
      TClass *R__cl = ::counterVariables::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event", &event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runNum", &runNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TSFirst", &TSFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TSLast", &TSLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "headerType[100]", headerType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TSerrors", &TSerrors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bytes_read", &bytes_read);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bytes_read_since_last_time", &bytes_read_since_last_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MBread", &MBread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eoBuffer", &eoBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eofInBuffer", &eofInBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eofPosInBuffer", &eofPosInBuffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mode3i", &mode3i);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "b29i", &b29i);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "old3Bytes", &old3Bytes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badEvent", &badEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badSegment", &badSegment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badCC1", &badCC1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badCC2", &badCC2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "goodTraceE_PU[4800]", goodTraceE_PU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "goodTraceE[4800]", goodTraceE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badFPGA_zero_PU[4800]", badFPGA_zero_PU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badFPGA_zero[4800]", badFPGA_zero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badFPGA_neg_PU[4800]", badFPGA_neg_PU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badFPGA_neg[4800]", badFPGA_neg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystalBuildEvent", &crystalBuildEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystalBuildEventXtal[120]", crystalBuildEventXtal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalCrystalEvent", &totalCrystalEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalCrystalEventXtal[120]", totalCrystalEventXtal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tossed4Time", &tossed4Time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastBdTS[480]", lastBdTS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nGammasThisHeader", &nGammasThisHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nGammasRead", &nGammasRead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMode3Skipped[120][41]", nMode3Skipped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMode3SkippedAtEnd[120][41]", nMode3SkippedAtEnd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMode2NoTraces[120]", nMode2NoTraces);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMode3NoMode2[120]", nMode3NoMode2);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_counterVariables(void *p) {
      return  p ? new(p) ::counterVariables : new ::counterVariables;
   }
   static void *newArray_counterVariables(Long_t nElements, void *p) {
      return p ? new(p) ::counterVariables[nElements] : new ::counterVariables[nElements];
   }
   // Wrapper around operator delete
   static void delete_counterVariables(void *p) {
      delete ((::counterVariables*)p);
   }
   static void deleteArray_counterVariables(void *p) {
      delete [] ((::counterVariables*)p);
   }
   static void destruct_counterVariables(void *p) {
      typedef ::counterVariables current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::counterVariables

//______________________________________________________________________________
void SuperPulse::Streamer(TBuffer &R__b)
{
   // Stream an object of class SuperPulse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SuperPulse::Class(),this);
   } else {
      R__b.WriteClassBuffer(SuperPulse::Class(),this);
   }
}

//______________________________________________________________________________
void SuperPulse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SuperPulse.
      TClass *R__cl = ::SuperPulse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CFD_INT_LEN", &CFD_INT_LEN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CFD_DELAY", &CFD_DELAY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CFD_FRACTION", &CFD_FRACTION);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TR_SCALE", &TR_SCALE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehiGeOffset[4800]", ehiGeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ehiGeGain[4800]", ehiGeGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trGain[4800]", trGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map[120][40]", map);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delay1[120][40]", delay1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lowE", &lowE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "highE", &highE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trLength", &trLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mult[120]", mult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystalBuild[120]", crystalBuild);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ccE[120]", ccE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segE[120]", segE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "netSeg[120]", netSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segEventIndex[120][40]", segEventIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segsNet[120][40]", segsNet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segs[120][40]", segs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data4net[120][36]", data4net);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gain[120][40]", gain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "waves[120][40][2048]", waves);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "averageTrace[120][40][4096]", averageTrace);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "averageTraceINT[120][40][4096]", averageTraceINT);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SuperPulse(void *p) {
      return  p ? new(p) ::SuperPulse : new ::SuperPulse;
   }
   static void *newArray_SuperPulse(Long_t nElements, void *p) {
      return p ? new(p) ::SuperPulse[nElements] : new ::SuperPulse[nElements];
   }
   // Wrapper around operator delete
   static void delete_SuperPulse(void *p) {
      delete ((::SuperPulse*)p);
   }
   static void deleteArray_SuperPulse(void *p) {
      delete [] ((::SuperPulse*)p);
   }
   static void destruct_SuperPulse(void *p) {
      typedef ::SuperPulse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SuperPulse

//______________________________________________________________________________
void INLCorrection::Streamer(TBuffer &R__b)
{
   // Stream an object of class INLCorrection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(INLCorrection::Class(),this);
   } else {
      R__b.WriteClassBuffer(INLCorrection::Class(),this);
   }
}

//______________________________________________________________________________
void INLCorrection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class INLCorrection.
      TClass *R__cl = ::INLCorrection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystalSN[120][4]", crystalSN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inl[120][40][8192]", inl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enl[120][40][3][8192]", enl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastCalcBase[4800]", lastCalcBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "restingBase[4800]", restingBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Q[4800]", Q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaBase[4800]", sigmaBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "baseSamples[4800]", baseSamples);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_INLCorrection(void *p) {
      return  p ? new(p) ::INLCorrection : new ::INLCorrection;
   }
   static void *newArray_INLCorrection(Long_t nElements, void *p) {
      return p ? new(p) ::INLCorrection[nElements] : new ::INLCorrection[nElements];
   }
   // Wrapper around operator delete
   static void delete_INLCorrection(void *p) {
      delete ((::INLCorrection*)p);
   }
   static void deleteArray_INLCorrection(void *p) {
      delete [] ((::INLCorrection*)p);
   }
   static void destruct_INLCorrection(void *p) {
      typedef ::INLCorrection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::INLCorrection

//______________________________________________________________________________
void Histos::Streamer(TBuffer &R__b)
{
   // Stream an object of class Histos.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Histos::Class(),this);
   } else {
      R__b.WriteClassBuffer(Histos::Class(),this);
   }
}

//______________________________________________________________________________
void Histos::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Histos.
      TClass *R__cl = ::Histos::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc1cal[120]", &cc1cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc2cal[120]", &cc2cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc3cal[120]", &cc3cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc4cal[120]", &cc4cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ccTot[4]", &ccTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ccDop[4]", &ccDop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ccSummary", &ccSummary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ccDopSummary", &ccDopSummary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult", &mult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ccHit", &ccHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ggMat", &ggMat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ggMatDop", &ggMatDop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*baseVsE[120]", &baseVsE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bankTSdiff[120]", &bankTSdiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bankTSlow[120]", &bankTSlow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bankTShigh[120]", &bankTShigh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xyProj", &xyProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xzProj", &xzProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yzProj", &yzProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xyz", &xyz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*thetaPhi", &thetaPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*thetaE", &thetaE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*thetaEDop", &thetaEDop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*phiVsE[120]", &phiVsE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*chi2VsXtal", &chi2VsXtal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*deltaT", &deltaT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*test", &test);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eraw[4800]", &eraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ecal[4800]", &ecal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc1All", &cc1All);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc2All", &cc2All);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc3All", &cc3All);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc4All", &cc4All);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc1Summary", &cc1Summary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc2Summary", &cc2Summary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc3Summary", &cc3Summary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cc4Summary", &cc4Summary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xtalSummary[120]", &xtalSummary);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*smoke[112]", &smoke);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*erawXT[40]", &erawXT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ecalXT[40]", &ecalXT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult1Singles[40]", &mult1Singles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult2Pair[40][40]", &mult2Pair);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult2Pair_2D[40][40]", &mult2Pair_2D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult1CC[40]", &mult1CC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult1", &mult1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult2", &mult2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult3", &mult3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult4", &mult4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult5", &mult5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult1cal", &mult1cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult2cal", &mult2cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult3cal", &mult3cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult4cal", &mult4cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mult5cal", &mult5cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*segMult", &segMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*segSum", &segSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*segSumCal", &segSumCal);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Histos(void *p) {
      return  p ? new(p) ::Histos : new ::Histos;
   }
   static void *newArray_Histos(Long_t nElements, void *p) {
      return p ? new(p) ::Histos[nElements] : new ::Histos[nElements];
   }
   // Wrapper around operator delete
   static void delete_Histos(void *p) {
      delete ((::Histos*)p);
   }
   static void deleteArray_Histos(void *p) {
      delete [] ((::Histos*)p);
   }
   static void destruct_Histos(void *p) {
      typedef ::Histos current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Histos

//______________________________________________________________________________
namespace ROOT {
   void PM_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class PM.
      typedef ::ROOT::Shadow::PM ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::PM*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "np1", &sobj->np1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "np2", &sobj->np2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p1[20]", sobj->p1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p2[20]", sobj->p2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s1", &sobj->s1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s2", &sobj->s2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likely1", &sobj->likely1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likely2", &sobj->likely2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dist", &sobj->dist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FOM1", &sobj->FOM1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FOM2", &sobj->FOM2);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PM(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PM : new ::PM;
   }
   static void *newArray_PM(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PM[nElements] : new ::PM[nElements];
   }
   // Wrapper around operator delete
   static void delete_PM(void *p) {
      delete ((::PM*)p);
   }
   static void deleteArray_PM(void *p) {
      delete [] ((::PM*)p);
   }
   static void destruct_PM(void *p) {
      typedef ::PM current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PM

//______________________________________________________________________________
void TrackClusterIP::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackClusterIP.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackClusterIP::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackClusterIP::Class(),this);
   }
}

//______________________________________________________________________________
void TrackClusterIP::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackClusterIP.
      TClass *R__cl = ::TrackClusterIP::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyz", &xyz);
      R__insp.InspectMember(xyz, "xyz.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDet", &eDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "order", &order);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shellPos", &shellPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detNum", &detNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSumOrig", &eSumOrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "origPos", &origPos);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TrackClusterIP(void *p) {
      return  p ? new(p) ::TrackClusterIP : new ::TrackClusterIP;
   }
   static void *newArray_TrackClusterIP(Long_t nElements, void *p) {
      return p ? new(p) ::TrackClusterIP[nElements] : new ::TrackClusterIP[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackClusterIP(void *p) {
      delete ((::TrackClusterIP*)p);
   }
   static void deleteArray_TrackClusterIP(void *p) {
      delete [] ((::TrackClusterIP*)p);
   }
   static void destruct_TrackClusterIP(void *p) {
      typedef ::TrackClusterIP current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TrackClusterIP

//______________________________________________________________________________
void TrackCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackCluster::Class(),this);
   }
}

//______________________________________________________________________________
void TrackCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackCluster.
      TClass *R__cl = ::TrackCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "valid", &valid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDet", &nDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracked", &tracked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FOM", &FOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSum", &eSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackNum", &trackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bestPermutation", &bestPermutation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "processed", &processed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intpts[30]", intpts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badTheoAngPenalty", &badTheoAngPenalty);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TrackCluster(void *p) {
      return  p ? new(p) ::TrackCluster : new ::TrackCluster;
   }
   static void *newArray_TrackCluster(Long_t nElements, void *p) {
      return p ? new(p) ::TrackCluster[nElements] : new ::TrackCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackCluster(void *p) {
      delete ((::TrackCluster*)p);
   }
   static void deleteArray_TrackCluster(void *p) {
      delete [] ((::TrackCluster*)p);
   }
   static void destruct_TrackCluster(void *p) {
      typedef ::TrackCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TrackCluster

//______________________________________________________________________________
void TrackShell::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackShell.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackShell::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackShell::Class(),this);
   }
}

//______________________________________________________________________________
void TrackShell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackShell.
      TClass *R__cl = ::TrackShell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHit", &nHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0[500]", t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chiSq[500]", chiSq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normChiSq[500]", normChiSq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp[500]", timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystalID[500]", crystalID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xyz[500]", xyz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDet[500]", eDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eSum[500]", eSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "origPos[500]", origPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detNum[500]", detNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module[500]", module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystalType[500]", crystalType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numClusters", &numClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusterNum[500]", clusterNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "knownNumClusters", &knownNumClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "knownClusterNum[500]", knownClusterNum);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TrackShell(void *p) {
      return  p ? new(p) ::TrackShell : new ::TrackShell;
   }
   static void *newArray_TrackShell(Long_t nElements, void *p) {
      return p ? new(p) ::TrackShell[nElements] : new ::TrackShell[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackShell(void *p) {
      delete ((::TrackShell*)p);
   }
   static void deleteArray_TrackShell(void *p) {
      delete [] ((::TrackShell*)p);
   }
   static void destruct_TrackShell(void *p) {
      typedef ::TrackShell current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TrackShell

//______________________________________________________________________________
void TrackCtrl::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackCtrl.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackCtrl::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackCtrl::Class(),this);
   }
}

//______________________________________________________________________________
void TrackCtrl::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackCtrl.
      TClass *R__cl = ::TrackCtrl::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targetX", &targetX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targetY", &targetY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targetZ", &targetZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxEvents", &maxEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPrint", &nPrint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reTrack", &reTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alpha[500]", alpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gamma", &gamma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", &data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FOMJump", &FOMJump);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FOMGoodEnough", &FOMGoodEnough);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iterations", &iterations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "removeInvalids", &removeInvalids);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fixDoubleHitsCode", &fixDoubleHitsCode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fixDoubleHits", &fixDoubleHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enabled[200]", enabled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackDataFileName", &trackDataFileName);
      R__insp.InspectMember(trackDataFileName, "trackDataFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDetELim_lo[9]", nDetELim_lo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDetELim_hi[9]", nDetELim_hi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDetELim_FOM[9]", nDetELim_FOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useCCEnergy", &useCCEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useSegEnergy", &useSegEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "splitClusters[2]", splitClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "splitClusters_kickoutFOM[2]", splitClusters_kickoutFOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "splitClusters_thresh[2]", splitClusters_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "splitClusters_minN[2]", splitClusters_minN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "splitClusters_maxN[2]", splitClusters_maxN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "splitClusters_maxTry[2]", splitClusters_maxTry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "goodImproveFraction", &goodImproveFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reCluster[2]", reCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reCluster_kickoutFOM[2]", reCluster_kickoutFOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reCluster_thresh[2]", reCluster_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reCluster_minN[2]", reCluster_minN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reCluster_maxTry[2]", reCluster_maxTry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reCluster_reduxFactor[2]", reCluster_reduxFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "untracked_kickoutFOM", &untracked_kickoutFOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "combineClusters", &combineClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "combineClusters_kickoutFOM", &combineClusters_kickoutFOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "combineClusters_thresh", &combineClusters_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "combineClusters_maxN", &combineClusters_maxN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "combineMaxDist", &combineMaxDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchMaker", &matchMaker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchMakerMaxDist", &matchMakerMaxDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchMaker_kickoutFOM", &matchMaker_kickoutFOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "singlesFOM", &singlesFOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "markSingleHitRange", &markSingleHitRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "singleHitRange[16384]", singleHitRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "singleHitRangeFOM", &singleHitRangeFOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackOps[9]", trackOps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jumpGroupLength[9]", jumpGroupLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badTheoAngPenalty", &badTheoAngPenalty);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TrackCtrl(void *p) {
      return  p ? new(p) ::TrackCtrl : new ::TrackCtrl;
   }
   static void *newArray_TrackCtrl(Long_t nElements, void *p) {
      return p ? new(p) ::TrackCtrl[nElements] : new ::TrackCtrl[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackCtrl(void *p) {
      delete ((::TrackCtrl*)p);
   }
   static void deleteArray_TrackCtrl(void *p) {
      delete [] ((::TrackCtrl*)p);
   }
   static void destruct_TrackCtrl(void *p) {
      typedef ::TrackCtrl current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TrackCtrl

//______________________________________________________________________________
void TrackStat::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackStat.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackStat::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackStat::Class(),this);
   }
}

//______________________________________________________________________________
void TrackStat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackStat.
      TClass *R__cl = ::TrackStat::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEvents", &nEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackGetCalls", &trackGetCalls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHit[164]", nHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackPassCnt", &trackPassCnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackingCalls", &trackingCalls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackError[6][30]", trackError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "firstClusterTrackCalls", &firstClusterTrackCalls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackFOMokay", &trackFOMokay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "permHit[9][362880]", permHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reClusterReturns[2][30]", reClusterReturns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reClusterTrackCalls[2][30]", reClusterTrackCalls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "splitClusterReturns[2][30]", splitClusterReturns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "splitClusterTrackCalls[2][30]", splitClusterTrackCalls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "combineClusterReturns[30]", combineClusterReturns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "combineClusterTrackCalls[30]", combineClusterTrackCalls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchMakerReturns[30]", matchMakerReturns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matchMakerTrackCalls[30]", matchMakerTrackCalls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "singleHitOutOfRange", &singleHitOutOfRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badNDetELim", &badNDetELim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumFOM", &sumFOM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumFOM_NT", &sumFOM_NT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSumFOM_NT", &nSumFOM_NT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClusters", &nClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "notTracked", &notTracked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPerm", &nPerm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doubleSegHits", &doubleSegHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segHits", &segHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numInputDataLines", &numInputDataLines);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "goodTrack", &goodTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badTrack", &badTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noTrueClusters", &noTrueClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDetTooLarge", &nDetTooLarge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fullEnergyEv", &fullEnergyEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "comptonLossEnergyEv", &comptonLossEnergyEv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammasForOutput", &gammasForOutput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammasForOutputOK1", &gammasForOutputOK1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammasForOutputOK2", &gammasForOutputOK2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammasWritten", &gammasWritten);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackedEventsWritten", &trackedEventsWritten);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TrackStat(void *p) {
      return  p ? new(p) ::TrackStat : new ::TrackStat;
   }
   static void *newArray_TrackStat(Long_t nElements, void *p) {
      return p ? new(p) ::TrackStat[nElements] : new ::TrackStat[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackStat(void *p) {
      delete ((::TrackStat*)p);
   }
   static void deleteArray_TrackStat(void *p) {
      delete [] ((::TrackStat*)p);
   }
   static void destruct_TrackStat(void *p) {
      typedef ::TrackStat current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TrackStat

//______________________________________________________________________________
void TrackPerm::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackPerm.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackPerm::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackPerm::Class(),this);
   }
}

//______________________________________________________________________________
void TrackPerm::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackPerm.
      TClass *R__cl = ::TrackPerm::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPerm[9]", nPerm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lookup[9][362880][9]", lookup);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TrackPerm(void *p) {
      return  p ? new(p) ::TrackPerm : new ::TrackPerm;
   }
   static void *newArray_TrackPerm(Long_t nElements, void *p) {
      return p ? new(p) ::TrackPerm[nElements] : new ::TrackPerm[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackPerm(void *p) {
      delete ((::TrackPerm*)p);
   }
   static void deleteArray_TrackPerm(void *p) {
      delete [] ((::TrackPerm*)p);
   }
   static void destruct_TrackPerm(void *p) {
      typedef ::TrackPerm current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TrackPerm

//______________________________________________________________________________
void Track::Streamer(TBuffer &R__b)
{
   // Stream an object of class Track.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Track::Class(),this);
   } else {
      R__b.WriteClassBuffer(Track::Class(),this);
   }
}

//______________________________________________________________________________
void Track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Track.
      TClass *R__cl = ::Track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shell", &shell);
      R__insp.InspectMember(shell, "shell.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clust[200]", clust);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stat", &stat);
      R__insp.InspectMember(stat, "stat.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctrl", &ctrl);
      R__insp.InspectMember(ctrl, "ctrl.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "perm", &perm);
      R__insp.InspectMember(perm, "perm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "targetPos", &targetPos);
      R__insp.InspectMember(targetPos, "targetPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nClusters", &nClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "faculty[20]", faculty);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Track(void *p) {
      return  p ? new(p) ::Track : new ::Track;
   }
   static void *newArray_Track(Long_t nElements, void *p) {
      return p ? new(p) ::Track[nElements] : new ::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_Track(void *p) {
      delete ((::Track*)p);
   }
   static void deleteArray_Track(void *p) {
      delete [] ((::Track*)p);
   }
   static void destruct_Track(void *p) {
      typedef ::Track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Track

//______________________________________________________________________________
namespace ROOT {
   void globalHeader_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class globalHeader.
      typedef ::ROOT::Shadow::globalHeader ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::globalHeader*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &sobj->type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "length", &sobj->length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &sobj->timestamp);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_globalHeader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::globalHeader : new ::globalHeader;
   }
   static void *newArray_globalHeader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::globalHeader[nElements] : new ::globalHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_globalHeader(void *p) {
      delete ((::globalHeader*)p);
   }
   static void deleteArray_globalHeader(void *p) {
      delete [] ((::globalHeader*)p);
   }
   static void destruct_globalHeader(void *p) {
      typedef ::globalHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::globalHeader

//______________________________________________________________________________
namespace ROOT {
   void mode3DataPacket_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class mode3DataPacket.
      typedef ::ROOT::Shadow::mode3DataPacket ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::mode3DataPacket*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aahdr[2]", sobj->aahdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hdr[14]", sobj->hdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "waveform[3000]", sobj->waveform);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mode3DataPacket(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode3DataPacket : new ::mode3DataPacket;
   }
   static void *newArray_mode3DataPacket(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode3DataPacket[nElements] : new ::mode3DataPacket[nElements];
   }
   // Wrapper around operator delete
   static void delete_mode3DataPacket(void *p) {
      delete ((::mode3DataPacket*)p);
   }
   static void deleteArray_mode3DataPacket(void *p) {
      delete [] ((::mode3DataPacket*)p);
   }
   static void destruct_mode3DataPacket(void *p) {
      typedef ::mode3DataPacket current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mode3DataPacket

//______________________________________________________________________________
namespace ROOT {
   void mode3HistoryPacket_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class mode3HistoryPacket.
      typedef ::ROOT::Shadow::mode3HistoryPacket ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::mode3HistoryPacket*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aahdr[2]", sobj->aahdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hdr[8]", sobj->hdr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data[3000]", sobj->data);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mode3HistoryPacket(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode3HistoryPacket : new ::mode3HistoryPacket;
   }
   static void *newArray_mode3HistoryPacket(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode3HistoryPacket[nElements] : new ::mode3HistoryPacket[nElements];
   }
   // Wrapper around operator delete
   static void delete_mode3HistoryPacket(void *p) {
      delete ((::mode3HistoryPacket*)p);
   }
   static void deleteArray_mode3HistoryPacket(void *p) {
      delete [] ((::mode3HistoryPacket*)p);
   }
   static void destruct_mode3HistoryPacket(void *p) {
      typedef ::mode3HistoryPacket current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mode3HistoryPacket

//______________________________________________________________________________
namespace ROOT {
   void historyEvent_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class historyEvent.
      typedef ::ROOT::Shadow::historyEvent ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::historyEvent*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &sobj->energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TS", &sobj->TS);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_historyEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::historyEvent : new ::historyEvent;
   }
   static void *newArray_historyEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::historyEvent[nElements] : new ::historyEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_historyEvent(void *p) {
      delete ((::historyEvent*)p);
   }
   static void deleteArray_historyEvent(void *p) {
      delete [] ((::historyEvent*)p);
   }
   static void destruct_historyEvent(void *p) {
      typedef ::historyEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::historyEvent

//______________________________________________________________________________
namespace ROOT {
   void ip_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ip.
      typedef ::ROOT::Shadow::ip ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ip*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &sobj->x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &sobj->y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &sobj->z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e", &sobj->e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg", &sobj->seg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seg_energy", &sobj->seg_energy);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ip(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ip : new ::ip;
   }
   static void *newArray_ip(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ip[nElements] : new ::ip[nElements];
   }
   // Wrapper around operator delete
   static void delete_ip(void *p) {
      delete ((::ip*)p);
   }
   static void deleteArray_ip(void *p) {
      delete [] ((::ip*)p);
   }
   static void destruct_ip(void *p) {
      typedef ::ip current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ip

//______________________________________________________________________________
namespace ROOT {
   void ipOLD_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ipOLD.
      typedef ::ROOT::Shadow::ipOLD ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ipOLD*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &sobj->x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &sobj->y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &sobj->z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e", &sobj->e);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ipOLD(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ipOLD : new ::ipOLD;
   }
   static void *newArray_ipOLD(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::ipOLD[nElements] : new ::ipOLD[nElements];
   }
   // Wrapper around operator delete
   static void delete_ipOLD(void *p) {
      delete ((::ipOLD*)p);
   }
   static void deleteArray_ipOLD(void *p) {
      delete [] ((::ipOLD*)p);
   }
   static void destruct_ipOLD(void *p) {
      typedef ::ipOLD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ipOLD

//______________________________________________________________________________
namespace ROOT {
   void mode2Old_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class mode2Old.
      typedef ::ROOT::Shadow::mode2Old ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::mode2Old*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num", &sobj->num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystal_id", &sobj->crystal_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tot_e", &sobj->tot_e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &sobj->t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chisq", &sobj->chisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "norm_chisq", &sobj->norm_chisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &sobj->timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intpts[16]", sobj->intpts);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mode2Old(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode2Old : new ::mode2Old;
   }
   static void *newArray_mode2Old(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode2Old[nElements] : new ::mode2Old[nElements];
   }
   // Wrapper around operator delete
   static void delete_mode2Old(void *p) {
      delete ((::mode2Old*)p);
   }
   static void deleteArray_mode2Old(void *p) {
      delete [] ((::mode2Old*)p);
   }
   static void destruct_mode2Old(void *p) {
      typedef ::mode2Old current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mode2Old

//______________________________________________________________________________
namespace ROOT {
   void mode2ABCD1234_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class mode2ABCD1234.
      typedef ::ROOT::Shadow::mode2ABCD1234 ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::mode2ABCD1234*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &sobj->type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystal_id", &sobj->crystal_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num", &sobj->num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tot_e", &sobj->tot_e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &sobj->timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_time", &sobj->trig_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &sobj->t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd", &sobj->cfd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chisq", &sobj->chisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "norm_chisq", &sobj->norm_chisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "baseline", &sobj->baseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pad", &sobj->pad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intpts[16]", sobj->intpts);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mode2ABCD1234(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode2ABCD1234 : new ::mode2ABCD1234;
   }
   static void *newArray_mode2ABCD1234(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode2ABCD1234[nElements] : new ::mode2ABCD1234[nElements];
   }
   // Wrapper around operator delete
   static void delete_mode2ABCD1234(void *p) {
      delete ((::mode2ABCD1234*)p);
   }
   static void deleteArray_mode2ABCD1234(void *p) {
      delete [] ((::mode2ABCD1234*)p);
   }
   static void destruct_mode2ABCD1234(void *p) {
      typedef ::mode2ABCD1234 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mode2ABCD1234

//______________________________________________________________________________
namespace ROOT {
   void mode2ABCD5678_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class mode2ABCD5678.
      typedef ::ROOT::Shadow::mode2ABCD5678 ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::mode2ABCD5678*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &sobj->type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crystal_id", &sobj->crystal_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num", &sobj->num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tot_e", &sobj->tot_e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "core_e[4]", sobj->core_e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &sobj->timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trig_time", &sobj->trig_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &sobj->t0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cfd", &sobj->cfd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chisq", &sobj->chisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "norm_chisq", &sobj->norm_chisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "baseline", &sobj->baseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prestep", &sobj->prestep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "poststep", &sobj->poststep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pad", &sobj->pad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "intpts[16]", sobj->intpts);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mode2ABCD5678(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode2ABCD5678 : new ::mode2ABCD5678;
   }
   static void *newArray_mode2ABCD5678(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mode2ABCD5678[nElements] : new ::mode2ABCD5678[nElements];
   }
   // Wrapper around operator delete
   static void delete_mode2ABCD5678(void *p) {
      delete ((::mode2ABCD5678*)p);
   }
   static void deleteArray_mode2ABCD5678(void *p) {
      delete [] ((::mode2ABCD5678*)p);
   }
   static void destruct_mode2ABCD5678(void *p) {
      typedef ::mode2ABCD5678 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mode2ABCD5678

//______________________________________________________________________________
namespace ROOT {
   void trackedGamma_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class trackedGamma.
      typedef ::ROOT::Shadow::trackedGamma ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::trackedGamma*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "esum", &sobj->esum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndet", &sobj->ndet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fom", &sobj->fom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tracked", &sobj->tracked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &sobj->timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x0", &sobj->x0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y0", &sobj->y0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z0", &sobj->z0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e0", &sobj->e0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x1", &sobj->x1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y1", &sobj->y1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z1", &sobj->z1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e1", &sobj->e1);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_trackedGamma(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::trackedGamma : new ::trackedGamma;
   }
   static void *newArray_trackedGamma(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::trackedGamma[nElements] : new ::trackedGamma[nElements];
   }
   // Wrapper around operator delete
   static void delete_trackedGamma(void *p) {
      delete ((::trackedGamma*)p);
   }
   static void deleteArray_trackedGamma(void *p) {
      delete [] ((::trackedGamma*)p);
   }
   static void destruct_trackedGamma(void *p) {
      typedef ::trackedGamma current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::trackedGamma

//______________________________________________________________________________
namespace ROOT {
   void g4Sim_emittedGamma_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class g4Sim_emittedGamma.
      typedef ::ROOT::Shadow::g4Sim_emittedGamma ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::g4Sim_emittedGamma*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e", &sobj->e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &sobj->x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &sobj->y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &sobj->z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &sobj->phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &sobj->theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &sobj->beta);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g4Sim_emittedGamma(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::g4Sim_emittedGamma : new ::g4Sim_emittedGamma;
   }
   static void *newArray_g4Sim_emittedGamma(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::g4Sim_emittedGamma[nElements] : new ::g4Sim_emittedGamma[nElements];
   }
   // Wrapper around operator delete
   static void delete_g4Sim_emittedGamma(void *p) {
      delete ((::g4Sim_emittedGamma*)p);
   }
   static void deleteArray_g4Sim_emittedGamma(void *p) {
      delete [] ((::g4Sim_emittedGamma*)p);
   }
   static void destruct_g4Sim_emittedGamma(void *p) {
      typedef ::g4Sim_emittedGamma current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g4Sim_emittedGamma

//______________________________________________________________________________
namespace ROOT {
   void g4Sim_abcd1234_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class g4Sim_abcd1234.
      typedef ::ROOT::Shadow::g4Sim_abcd1234 ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::g4Sim_abcd1234*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &sobj->type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "num", &sobj->num);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "full", &sobj->full);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammas[10]", sobj->gammas);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_g4Sim_abcd1234(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::g4Sim_abcd1234 : new ::g4Sim_abcd1234;
   }
   static void *newArray_g4Sim_abcd1234(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::g4Sim_abcd1234[nElements] : new ::g4Sim_abcd1234[nElements];
   }
   // Wrapper around operator delete
   static void delete_g4Sim_abcd1234(void *p) {
      delete ((::g4Sim_abcd1234*)p);
   }
   static void deleteArray_g4Sim_abcd1234(void *p) {
      delete [] ((::g4Sim_abcd1234*)p);
   }
   static void destruct_g4Sim_abcd1234(void *p) {
      typedef ::g4Sim_abcd1234 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::g4Sim_abcd1234

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEg1GammaEventgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEg1GammaEventgR_Dictionary();
   static void *new_vectorlEg1GammaEventgR(void *p = 0);
   static void *newArray_vectorlEg1GammaEventgR(Long_t size, void *p);
   static void delete_vectorlEg1GammaEventgR(void *p);
   static void deleteArray_vectorlEg1GammaEventgR(void *p);
   static void destruct_vectorlEg1GammaEventgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<g1GammaEvent>*)
   {
      vector<g1GammaEvent> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<g1GammaEvent>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<g1GammaEvent>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<g1GammaEvent>), DefineBehavior(ptr, ptr),
                  0, &vectorlEg1GammaEventgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<g1GammaEvent>) );
      instance.SetNew(&new_vectorlEg1GammaEventgR);
      instance.SetNewArray(&newArray_vectorlEg1GammaEventgR);
      instance.SetDelete(&delete_vectorlEg1GammaEventgR);
      instance.SetDeleteArray(&deleteArray_vectorlEg1GammaEventgR);
      instance.SetDestructor(&destruct_vectorlEg1GammaEventgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<g1GammaEvent> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<g1GammaEvent>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEg1GammaEventgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<g1GammaEvent>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEg1GammaEventgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g1GammaEvent> : new vector<g1GammaEvent>;
   }
   static void *newArray_vectorlEg1GammaEventgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g1GammaEvent>[nElements] : new vector<g1GammaEvent>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEg1GammaEventgR(void *p) {
      delete ((vector<g1GammaEvent>*)p);
   }
   static void deleteArray_vectorlEg1GammaEventgR(void *p) {
      delete [] ((vector<g1GammaEvent>*)p);
   }
   static void destruct_vectorlEg1GammaEventgR(void *p) {
      typedef vector<g1GammaEvent> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<g1GammaEvent>

namespace ROOT {
   void vectorlEg2CrystalEventgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEg2CrystalEventgR_Dictionary();
   static void *new_vectorlEg2CrystalEventgR(void *p = 0);
   static void *newArray_vectorlEg2CrystalEventgR(Long_t size, void *p);
   static void delete_vectorlEg2CrystalEventgR(void *p);
   static void deleteArray_vectorlEg2CrystalEventgR(void *p);
   static void destruct_vectorlEg2CrystalEventgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<g2CrystalEvent>*)
   {
      vector<g2CrystalEvent> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<g2CrystalEvent>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<g2CrystalEvent>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<g2CrystalEvent>), DefineBehavior(ptr, ptr),
                  0, &vectorlEg2CrystalEventgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<g2CrystalEvent>) );
      instance.SetNew(&new_vectorlEg2CrystalEventgR);
      instance.SetNewArray(&newArray_vectorlEg2CrystalEventgR);
      instance.SetDelete(&delete_vectorlEg2CrystalEventgR);
      instance.SetDeleteArray(&deleteArray_vectorlEg2CrystalEventgR);
      instance.SetDestructor(&destruct_vectorlEg2CrystalEventgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<g2CrystalEvent> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<g2CrystalEvent>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEg2CrystalEventgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<g2CrystalEvent>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEg2CrystalEventgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g2CrystalEvent> : new vector<g2CrystalEvent>;
   }
   static void *newArray_vectorlEg2CrystalEventgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g2CrystalEvent>[nElements] : new vector<g2CrystalEvent>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEg2CrystalEventgR(void *p) {
      delete ((vector<g2CrystalEvent>*)p);
   }
   static void deleteArray_vectorlEg2CrystalEventgR(void *p) {
      delete [] ((vector<g2CrystalEvent>*)p);
   }
   static void destruct_vectorlEg2CrystalEventgR(void *p) {
      typedef vector<g2CrystalEvent> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<g2CrystalEvent>

namespace ROOT {
   void vectorlEg2IntPtgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEg2IntPtgR_Dictionary();
   static void *new_vectorlEg2IntPtgR(void *p = 0);
   static void *newArray_vectorlEg2IntPtgR(Long_t size, void *p);
   static void delete_vectorlEg2IntPtgR(void *p);
   static void deleteArray_vectorlEg2IntPtgR(void *p);
   static void destruct_vectorlEg2IntPtgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<g2IntPt>*)
   {
      vector<g2IntPt> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<g2IntPt>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<g2IntPt>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<g2IntPt>), DefineBehavior(ptr, ptr),
                  0, &vectorlEg2IntPtgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<g2IntPt>) );
      instance.SetNew(&new_vectorlEg2IntPtgR);
      instance.SetNewArray(&newArray_vectorlEg2IntPtgR);
      instance.SetDelete(&delete_vectorlEg2IntPtgR);
      instance.SetDeleteArray(&deleteArray_vectorlEg2IntPtgR);
      instance.SetDestructor(&destruct_vectorlEg2IntPtgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<g2IntPt> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<g2IntPt>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEg2IntPtgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<g2IntPt>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEg2IntPtgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g2IntPt> : new vector<g2IntPt>;
   }
   static void *newArray_vectorlEg2IntPtgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g2IntPt>[nElements] : new vector<g2IntPt>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEg2IntPtgR(void *p) {
      delete ((vector<g2IntPt>*)p);
   }
   static void deleteArray_vectorlEg2IntPtgR(void *p) {
      delete [] ((vector<g2IntPt>*)p);
   }
   static void destruct_vectorlEg2IntPtgR(void *p) {
      typedef vector<g2IntPt> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<g2IntPt>

namespace ROOT {
   void vectorlEg3ChannelEventgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEg3ChannelEventgR_Dictionary();
   static void *new_vectorlEg3ChannelEventgR(void *p = 0);
   static void *newArray_vectorlEg3ChannelEventgR(Long_t size, void *p);
   static void delete_vectorlEg3ChannelEventgR(void *p);
   static void deleteArray_vectorlEg3ChannelEventgR(void *p);
   static void destruct_vectorlEg3ChannelEventgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<g3ChannelEvent>*)
   {
      vector<g3ChannelEvent> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<g3ChannelEvent>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<g3ChannelEvent>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<g3ChannelEvent>), DefineBehavior(ptr, ptr),
                  0, &vectorlEg3ChannelEventgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<g3ChannelEvent>) );
      instance.SetNew(&new_vectorlEg3ChannelEventgR);
      instance.SetNewArray(&newArray_vectorlEg3ChannelEventgR);
      instance.SetDelete(&delete_vectorlEg3ChannelEventgR);
      instance.SetDeleteArray(&deleteArray_vectorlEg3ChannelEventgR);
      instance.SetDestructor(&destruct_vectorlEg3ChannelEventgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<g3ChannelEvent> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<g3ChannelEvent>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEg3ChannelEventgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<g3ChannelEvent>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEg3ChannelEventgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g3ChannelEvent> : new vector<g3ChannelEvent>;
   }
   static void *newArray_vectorlEg3ChannelEventgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g3ChannelEvent>[nElements] : new vector<g3ChannelEvent>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEg3ChannelEventgR(void *p) {
      delete ((vector<g3ChannelEvent>*)p);
   }
   static void deleteArray_vectorlEg3ChannelEventgR(void *p) {
      delete [] ((vector<g3ChannelEvent>*)p);
   }
   static void destruct_vectorlEg3ChannelEventgR(void *p) {
      typedef vector<g3ChannelEvent> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<g3ChannelEvent>

namespace ROOT {
   void vectorlEg3CrystalEventgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEg3CrystalEventgR_Dictionary();
   static void *new_vectorlEg3CrystalEventgR(void *p = 0);
   static void *newArray_vectorlEg3CrystalEventgR(Long_t size, void *p);
   static void delete_vectorlEg3CrystalEventgR(void *p);
   static void deleteArray_vectorlEg3CrystalEventgR(void *p);
   static void destruct_vectorlEg3CrystalEventgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<g3CrystalEvent>*)
   {
      vector<g3CrystalEvent> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<g3CrystalEvent>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<g3CrystalEvent>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<g3CrystalEvent>), DefineBehavior(ptr, ptr),
                  0, &vectorlEg3CrystalEventgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<g3CrystalEvent>) );
      instance.SetNew(&new_vectorlEg3CrystalEventgR);
      instance.SetNewArray(&newArray_vectorlEg3CrystalEventgR);
      instance.SetDelete(&delete_vectorlEg3CrystalEventgR);
      instance.SetDeleteArray(&deleteArray_vectorlEg3CrystalEventgR);
      instance.SetDestructor(&destruct_vectorlEg3CrystalEventgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<g3CrystalEvent> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<g3CrystalEvent>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEg3CrystalEventgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<g3CrystalEvent>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEg3CrystalEventgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g3CrystalEvent> : new vector<g3CrystalEvent>;
   }
   static void *newArray_vectorlEg3CrystalEventgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g3CrystalEvent>[nElements] : new vector<g3CrystalEvent>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEg3CrystalEventgR(void *p) {
      delete ((vector<g3CrystalEvent>*)p);
   }
   static void deleteArray_vectorlEg3CrystalEventgR(void *p) {
      delete [] ((vector<g3CrystalEvent>*)p);
   }
   static void destruct_vectorlEg3CrystalEventgR(void *p) {
      typedef vector<g3CrystalEvent> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<g3CrystalEvent>

namespace ROOT {
   void vectorlEg3WaveformgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEg3WaveformgR_Dictionary();
   static void *new_vectorlEg3WaveformgR(void *p = 0);
   static void *newArray_vectorlEg3WaveformgR(Long_t size, void *p);
   static void delete_vectorlEg3WaveformgR(void *p);
   static void deleteArray_vectorlEg3WaveformgR(void *p);
   static void destruct_vectorlEg3WaveformgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<g3Waveform>*)
   {
      vector<g3Waveform> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<g3Waveform>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<g3Waveform>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<g3Waveform>), DefineBehavior(ptr, ptr),
                  0, &vectorlEg3WaveformgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<g3Waveform>) );
      instance.SetNew(&new_vectorlEg3WaveformgR);
      instance.SetNewArray(&newArray_vectorlEg3WaveformgR);
      instance.SetDelete(&delete_vectorlEg3WaveformgR);
      instance.SetDeleteArray(&deleteArray_vectorlEg3WaveformgR);
      instance.SetDestructor(&destruct_vectorlEg3WaveformgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<g3Waveform> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<g3Waveform>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEg3WaveformgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<g3Waveform>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEg3WaveformgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g3Waveform> : new vector<g3Waveform>;
   }
   static void *newArray_vectorlEg3WaveformgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g3Waveform>[nElements] : new vector<g3Waveform>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEg3WaveformgR(void *p) {
      delete ((vector<g3Waveform>*)p);
   }
   static void deleteArray_vectorlEg3WaveformgR(void *p) {
      delete [] ((vector<g3Waveform>*)p);
   }
   static void destruct_vectorlEg3WaveformgR(void *p) {
      typedef vector<g3Waveform> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<g3Waveform>

namespace ROOT {
   void vectorlEg4Sim_abcd1234gR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEg4Sim_abcd1234gR_Dictionary();
   static void *new_vectorlEg4Sim_abcd1234gR(void *p = 0);
   static void *newArray_vectorlEg4Sim_abcd1234gR(Long_t size, void *p);
   static void delete_vectorlEg4Sim_abcd1234gR(void *p);
   static void deleteArray_vectorlEg4Sim_abcd1234gR(void *p);
   static void destruct_vectorlEg4Sim_abcd1234gR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<g4Sim_abcd1234>*)
   {
      vector<g4Sim_abcd1234> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<g4Sim_abcd1234>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<g4Sim_abcd1234>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<g4Sim_abcd1234>), DefineBehavior(ptr, ptr),
                  0, &vectorlEg4Sim_abcd1234gR_Dictionary, isa_proxy, 0,
                  sizeof(vector<g4Sim_abcd1234>) );
      instance.SetNew(&new_vectorlEg4Sim_abcd1234gR);
      instance.SetNewArray(&newArray_vectorlEg4Sim_abcd1234gR);
      instance.SetDelete(&delete_vectorlEg4Sim_abcd1234gR);
      instance.SetDeleteArray(&deleteArray_vectorlEg4Sim_abcd1234gR);
      instance.SetDestructor(&destruct_vectorlEg4Sim_abcd1234gR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<g4Sim_abcd1234> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<g4Sim_abcd1234>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEg4Sim_abcd1234gR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<g4Sim_abcd1234>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEg4Sim_abcd1234gR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g4Sim_abcd1234> : new vector<g4Sim_abcd1234>;
   }
   static void *newArray_vectorlEg4Sim_abcd1234gR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<g4Sim_abcd1234>[nElements] : new vector<g4Sim_abcd1234>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEg4Sim_abcd1234gR(void *p) {
      delete ((vector<g4Sim_abcd1234>*)p);
   }
   static void deleteArray_vectorlEg4Sim_abcd1234gR(void *p) {
      delete [] ((vector<g4Sim_abcd1234>*)p);
   }
   static void destruct_vectorlEg4Sim_abcd1234gR(void *p) {
      typedef vector<g4Sim_abcd1234> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<g4Sim_abcd1234>

namespace ROOT {
   void vectorlEhistoryEventgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEhistoryEventgR_Dictionary();
   static void *new_vectorlEhistoryEventgR(void *p = 0);
   static void *newArray_vectorlEhistoryEventgR(Long_t size, void *p);
   static void delete_vectorlEhistoryEventgR(void *p);
   static void deleteArray_vectorlEhistoryEventgR(void *p);
   static void destruct_vectorlEhistoryEventgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<historyEvent>*)
   {
      vector<historyEvent> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<historyEvent>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<historyEvent>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<historyEvent>), DefineBehavior(ptr, ptr),
                  0, &vectorlEhistoryEventgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<historyEvent>) );
      instance.SetNew(&new_vectorlEhistoryEventgR);
      instance.SetNewArray(&newArray_vectorlEhistoryEventgR);
      instance.SetDelete(&delete_vectorlEhistoryEventgR);
      instance.SetDeleteArray(&deleteArray_vectorlEhistoryEventgR);
      instance.SetDestructor(&destruct_vectorlEhistoryEventgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<historyEvent> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<historyEvent>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEhistoryEventgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<historyEvent>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEhistoryEventgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<historyEvent> : new vector<historyEvent>;
   }
   static void *newArray_vectorlEhistoryEventgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<historyEvent>[nElements] : new vector<historyEvent>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEhistoryEventgR(void *p) {
      delete ((vector<historyEvent>*)p);
   }
   static void deleteArray_vectorlEhistoryEventgR(void *p) {
      delete [] ((vector<historyEvent>*)p);
   }
   static void destruct_vectorlEhistoryEventgR(void *p) {
      typedef vector<historyEvent> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<historyEvent>

namespace ROOT {
   void vectorlEipgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEipgR_Dictionary();
   static void *new_vectorlEipgR(void *p = 0);
   static void *newArray_vectorlEipgR(Long_t size, void *p);
   static void delete_vectorlEipgR(void *p);
   static void deleteArray_vectorlEipgR(void *p);
   static void destruct_vectorlEipgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<ip>*)
   {
      vector<ip> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ip>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ip>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<ip>), DefineBehavior(ptr, ptr),
                  0, &vectorlEipgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<ip>) );
      instance.SetNew(&new_vectorlEipgR);
      instance.SetNewArray(&newArray_vectorlEipgR);
      instance.SetDelete(&delete_vectorlEipgR);
      instance.SetDeleteArray(&deleteArray_vectorlEipgR);
      instance.SetDestructor(&destruct_vectorlEipgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<ip> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ip>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEipgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<ip>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEipgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ip> : new vector<ip>;
   }
   static void *newArray_vectorlEipgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ip>[nElements] : new vector<ip>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEipgR(void *p) {
      delete ((vector<ip>*)p);
   }
   static void deleteArray_vectorlEipgR(void *p) {
      delete [] ((vector<ip>*)p);
   }
   static void destruct_vectorlEipgR(void *p) {
      typedef vector<ip> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<ip>

namespace ROOT {
   void vectorlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEshortgR_Dictionary();
   static void *new_vectorlEshortgR(void *p = 0);
   static void *newArray_vectorlEshortgR(Long_t size, void *p);
   static void delete_vectorlEshortgR(void *p);
   static void deleteArray_vectorlEshortgR(void *p);
   static void destruct_vectorlEshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<short>*)
   {
      vector<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<short>", -2, "vector.dll", 0,
                  typeid(vector<short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<short>) );
      instance.SetNew(&new_vectorlEshortgR);
      instance.SetNewArray(&newArray_vectorlEshortgR);
      instance.SetDelete(&delete_vectorlEshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEshortgR);
      instance.SetDestructor(&destruct_vectorlEshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short> : new vector<short>;
   }
   static void *newArray_vectorlEshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short>[nElements] : new vector<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEshortgR(void *p) {
      delete ((vector<short>*)p);
   }
   static void deleteArray_vectorlEshortgR(void *p) {
      delete [] ((vector<short>*)p);
   }
   static void destruct_vectorlEshortgR(void *p) {
      typedef vector<short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<short>

namespace ROOT {
   void vectorlEtrackedGammagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEtrackedGammagR_Dictionary();
   static void *new_vectorlEtrackedGammagR(void *p = 0);
   static void *newArray_vectorlEtrackedGammagR(Long_t size, void *p);
   static void delete_vectorlEtrackedGammagR(void *p);
   static void deleteArray_vectorlEtrackedGammagR(void *p);
   static void destruct_vectorlEtrackedGammagR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<trackedGamma>*)
   {
      vector<trackedGamma> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<trackedGamma>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<trackedGamma>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<trackedGamma>), DefineBehavior(ptr, ptr),
                  0, &vectorlEtrackedGammagR_Dictionary, isa_proxy, 4,
                  sizeof(vector<trackedGamma>) );
      instance.SetNew(&new_vectorlEtrackedGammagR);
      instance.SetNewArray(&newArray_vectorlEtrackedGammagR);
      instance.SetDelete(&delete_vectorlEtrackedGammagR);
      instance.SetDeleteArray(&deleteArray_vectorlEtrackedGammagR);
      instance.SetDestructor(&destruct_vectorlEtrackedGammagR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<trackedGamma> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<trackedGamma>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEtrackedGammagR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<trackedGamma>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEtrackedGammagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<trackedGamma> : new vector<trackedGamma>;
   }
   static void *newArray_vectorlEtrackedGammagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<trackedGamma>[nElements] : new vector<trackedGamma>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEtrackedGammagR(void *p) {
      delete ((vector<trackedGamma>*)p);
   }
   static void deleteArray_vectorlEtrackedGammagR(void *p) {
      delete [] ((vector<trackedGamma>*)p);
   }
   static void destruct_vectorlEtrackedGammagR(void *p) {
      typedef vector<trackedGamma> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<trackedGamma>

/********************************************************
* src/GRETINADict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGRETINADict();

extern "C" void G__set_cpp_environmentGRETINADict() {
  G__cpp_reset_tagtableGRETINADict();
}
#include <new>
extern "C" int G__cpp_dllrevGRETINADict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* PM */
// automatic default constructor
static int G__GRETINADict_494_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PM *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PM[n];
     } else {
       p = new((void*) gvp) PM[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PM;
     } else {
       p = new((void*) gvp) PM;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_PM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_494_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PM* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PM(*(PM*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_PM));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PM G__TPM;
static int G__GRETINADict_494_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PM*) (soff+(sizeof(PM)*i)))->~G__TPM();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PM*) (soff))->~G__TPM();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_494_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PM* dest = (PM*) G__getstructoffset();
   *dest = *(PM*) libp->para[0].ref;
   const PM& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackClusterIP */
static int G__GRETINADict_495_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackClusterIP*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackClusterIP*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackClusterIP*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackClusterIP::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackClusterIP::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackClusterIP::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackClusterIP::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackClusterIP*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackClusterIP::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackClusterIP::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackClusterIP::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_495_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackClusterIP::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__GRETINADict_495_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackClusterIP *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackClusterIP[n];
     } else {
       p = new((void*) gvp) TrackClusterIP[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackClusterIP;
     } else {
       p = new((void*) gvp) TrackClusterIP;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_495_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackClusterIP* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackClusterIP(*(TrackClusterIP*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackClusterIP G__TTrackClusterIP;
static int G__GRETINADict_495_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackClusterIP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackClusterIP*) (soff+(sizeof(TrackClusterIP)*i)))->~G__TTrackClusterIP();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackClusterIP*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackClusterIP*) (soff))->~G__TTrackClusterIP();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_495_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackClusterIP* dest = (TrackClusterIP*) G__getstructoffset();
   *dest = *(TrackClusterIP*) libp->para[0].ref;
   const TrackClusterIP& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackCluster */
static int G__GRETINADict_496_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TrackCluster*) G__getstructoffset())->findFOM(*((TVector3*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((TrackCluster*) G__getstructoffset())->findComptonAngle((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TrackCluster*) G__getstructoffset())->sortSegEnergies());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCluster*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCluster*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCluster*) G__getstructoffset())->PrintCluster();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_496_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__GRETINADict_496_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackCluster *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackCluster[n];
     } else {
       p = new((void*) gvp) TrackCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackCluster;
     } else {
       p = new((void*) gvp) TrackCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_496_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackCluster(*(TrackCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackCluster G__TTrackCluster;
static int G__GRETINADict_496_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackCluster*) (soff+(sizeof(TrackCluster)*i)))->~G__TTrackCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackCluster*) (soff))->~G__TTrackCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_496_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackCluster* dest = (TrackCluster*) G__getstructoffset();
   *dest = *(TrackCluster*) libp->para[0].ref;
   const TrackCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackShell */
static int G__GRETINADict_497_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackShell*) G__getstructoffset())->xx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackShell*) G__getstructoffset())->yy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackShell*) G__getstructoffset())->zz((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackShell*) G__getstructoffset())->nxx((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackShell*) G__getstructoffset())->nyy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackShell*) G__getstructoffset())->nzz((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackShell*) G__getstructoffset())->relAngle((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackShell*) G__getstructoffset())->polAngle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TrackShell*) G__getstructoffset())->aziAngle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackShell*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackShell*) G__getstructoffset())->PrintClusters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackShell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackShell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackShell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackShell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackShell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackShell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackShell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackShell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_497_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackShell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__GRETINADict_497_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackShell *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackShell[n];
     } else {
       p = new((void*) gvp) TrackShell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackShell;
     } else {
       p = new((void*) gvp) TrackShell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackShell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_497_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackShell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackShell(*(TrackShell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackShell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackShell G__TTrackShell;
static int G__GRETINADict_497_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackShell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackShell*) (soff+(sizeof(TrackShell)*i)))->~G__TTrackShell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackShell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackShell*) (soff))->~G__TTrackShell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_497_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackShell* dest = (TrackShell*) G__getstructoffset();
   *dest = *(TrackShell*) libp->para[0].ref;
   const TrackShell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackCtrl */
static int G__GRETINADict_498_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TrackCtrl*) G__getstructoffset())->ReadChatFile(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCtrl*) G__getstructoffset())->CheckNumArgs((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TrackCtrl*) G__getstructoffset())->strDecomp((char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCtrl*) G__getstructoffset())->PrintPartial();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TrackCtrl*) G__getstructoffset())->trackOpt((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackCtrl::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCtrl::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackCtrl::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackCtrl::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCtrl*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCtrl::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackCtrl::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCtrl::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_498_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackCtrl::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__GRETINADict_498_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackCtrl *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackCtrl[n];
     } else {
       p = new((void*) gvp) TrackCtrl[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackCtrl;
     } else {
       p = new((void*) gvp) TrackCtrl;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_498_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackCtrl* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackCtrl(*(TrackCtrl*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackCtrl G__TTrackCtrl;
static int G__GRETINADict_498_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackCtrl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackCtrl*) (soff+(sizeof(TrackCtrl)*i)))->~G__TTrackCtrl();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackCtrl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackCtrl*) (soff))->~G__TTrackCtrl();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_498_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackCtrl* dest = (TrackCtrl*) G__getstructoffset();
   *dest = *(TrackCtrl*) libp->para[0].ref;
   const TrackCtrl& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackStat */
static int G__GRETINADict_499_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackStat*) G__getstructoffset())->Zero();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_499_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackStat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_499_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackStat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_499_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackStat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_499_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackStat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_499_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackStat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_499_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackStat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_499_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackStat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_499_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackStat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_499_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackStat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__GRETINADict_499_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackStat *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackStat[n];
     } else {
       p = new((void*) gvp) TrackStat[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackStat;
     } else {
       p = new((void*) gvp) TrackStat;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackStat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_499_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackStat* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackStat(*(TrackStat*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackStat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackStat G__TTrackStat;
static int G__GRETINADict_499_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackStat*) (soff+(sizeof(TrackStat)*i)))->~G__TTrackStat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackStat*) (soff))->~G__TTrackStat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_499_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackStat* dest = (TrackStat*) G__getstructoffset();
   *dest = *(TrackStat*) libp->para[0].ref;
   const TrackStat& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackPerm */
static int G__GRETINADict_500_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackPerm*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_500_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackPerm::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_500_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackPerm::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_500_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackPerm::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_500_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackPerm::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_500_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackPerm*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_500_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackPerm::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_500_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackPerm::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_500_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackPerm::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_500_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackPerm::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__GRETINADict_500_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackPerm *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackPerm[n];
     } else {
       p = new((void*) gvp) TrackPerm[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackPerm;
     } else {
       p = new((void*) gvp) TrackPerm;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_500_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackPerm* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackPerm(*(TrackPerm*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackPerm G__TTrackPerm;
static int G__GRETINADict_500_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackPerm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackPerm*) (soff+(sizeof(TrackPerm)*i)))->~G__TTrackPerm();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackPerm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackPerm*) (soff))->~G__TTrackPerm();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_500_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackPerm* dest = (TrackPerm*) G__getstructoffset();
   *dest = *(TrackPerm*) libp->para[0].ref;
   const TrackPerm& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Track */
static int G__GRETINADict_501_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track[n];
     } else {
       p = new((void*) gvp) Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track;
     } else {
       p = new((void*) gvp) Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Track*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Track*) G__getstructoffset())->findTargetPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Track*) G__getstructoffset())->findClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Track*) G__getstructoffset())->transferClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Track*) G__getstructoffset())->trackEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Track*) G__getstructoffset())->doTrack((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Track*) G__getstructoffset())->reCluster((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Track*) G__getstructoffset())->splitCluster((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Track*) G__getstructoffset())->combineCluster((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Track*) G__getstructoffset())->matchMaker((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Track*) G__getstructoffset())->PrintValidClusters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_501_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_501_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Track(*(Track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Track G__TTrack;
static int G__GRETINADict_501_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Track*) (soff+(sizeof(Track)*i)))->~G__TTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Track*) (soff))->~G__TTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_501_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* dest = (Track*) G__getstructoffset();
   *dest = *(Track*) libp->para[0].ref;
   const Track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* controlVariables */
static int G__GRETINADict_547_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   controlVariables* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new controlVariables[n];
     } else {
       p = new((void*) gvp) controlVariables[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new controlVariables;
     } else {
       p = new((void*) gvp) controlVariables;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_controlVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((controlVariables*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((controlVariables*) G__getstructoffset())->InterpretCommandLine((int) G__int(libp->para[0]), (char**) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((controlVariables*) G__getstructoffset())->ReportRunFlags());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((controlVariables*) G__getstructoffset())->SetS800Controls(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) controlVariables::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) controlVariables::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) controlVariables::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      controlVariables::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((controlVariables*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) controlVariables::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) controlVariables::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) controlVariables::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_547_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) controlVariables::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_547_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   controlVariables* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new controlVariables(*(controlVariables*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_controlVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef controlVariables G__TcontrolVariables;
static int G__GRETINADict_547_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (controlVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((controlVariables*) (soff+(sizeof(controlVariables)*i)))->~G__TcontrolVariables();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (controlVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((controlVariables*) (soff))->~G__TcontrolVariables();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_547_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   controlVariables* dest = (controlVariables*) G__getstructoffset();
   *dest = *(controlVariables*) libp->para[0].ref;
   const controlVariables& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* counterVariables */
static int G__GRETINADict_548_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   counterVariables* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new counterVariables[n];
     } else {
       p = new((void*) gvp) counterVariables[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new counterVariables;
     } else {
       p = new((void*) gvp) counterVariables;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_counterVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((counterVariables*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((counterVariables*) G__getstructoffset())->ResetRunCounters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((counterVariables*) G__getstructoffset())->PrintRunStatistics((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((counterVariables*) G__getstructoffset())->Increment((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((counterVariables*) G__getstructoffset())->setEventBit((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((counterVariables*) G__getstructoffset())->getEventBit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) counterVariables::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) counterVariables::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) counterVariables::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      counterVariables::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((counterVariables*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) counterVariables::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) counterVariables::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) counterVariables::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_548_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) counterVariables::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_548_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   counterVariables* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new counterVariables(*(counterVariables*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_counterVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef counterVariables G__TcounterVariables;
static int G__GRETINADict_548_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (counterVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((counterVariables*) (soff+(sizeof(counterVariables)*i)))->~G__TcounterVariables();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (counterVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((counterVariables*) (soff))->~G__TcounterVariables();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_548_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   counterVariables* dest = (counterVariables*) G__getstructoffset();
   *dest = *(counterVariables*) libp->para[0].ref;
   const counterVariables& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GRETINA */
static int G__GRETINADict_550_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRETINA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GRETINA[n];
     } else {
       p = new((void*) gvp) GRETINA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GRETINA;
     } else {
       p = new((void*) gvp) GRETINA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_GRETINA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((GRETINA*) G__getstructoffset())->getDopplerSimple(*((TVector3*) G__int(libp->para[0])), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRETINA*) G__getstructoffset())->getMode3((FILE*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (counterVariables*) G__int(libp->para[2]), (controlVariables*) G__int(libp->para[3])
, (GRETINAVariables*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRETINA*) G__getstructoffset())->getMode3History((FILE*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (long long) G__Longlong(libp->para[2]), (counterVariables*) G__int(libp->para[3])
, (GRETINAVariables*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRETINA*) G__getstructoffset())->getMode2((FILE*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (GRETINAVariables*) G__int(libp->para[2]), (counterVariables*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRETINA*) G__getstructoffset())->getMode1((FILE*) G__int(libp->para[0]), (GRETINAVariables*) G__int(libp->para[1])
, (counterVariables*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRETINA*) G__getstructoffset())->getSimulated((FILE*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->getScaler((FILE*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRETINA*) G__getstructoffset())->getBank29((FILE*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (counterVariables*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRETINA*) G__getstructoffset())->analyzeMode2((g2CrystalEvent*) G__int(libp->para[0]), (GRETINAVariables*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->calibrateMode2CC((Int_t) G__int(libp->para[0]), (mode2ABCD5678*) G__int(libp->para[1])
, (g2CrystalEvent*) G__int(libp->para[2]), (GRETINAVariables*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->analyzeMode3((GRETINAVariables*) G__int(libp->para[0]), (controlVariables*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->calibrateMode3((g3ChannelEvent*) G__int(libp->para[0]), (GRETINAVariables*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->calibrateMode3SP((g3ChannelEvent*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->fillHistos((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->checkSPIntegrity();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GRETINA*) G__getstructoffset())->fillShell2Track());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->fillMode1((Int_t) G__int(libp->para[0]), (GRETINAVariables*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->printSegCenters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GRETINA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRETINA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GRETINA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GRETINA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRETINA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRETINA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRETINA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_550_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRETINA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_550_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GRETINA* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GRETINA(*(GRETINA*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_GRETINA));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GRETINA G__TGRETINA;
static int G__GRETINADict_550_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GRETINA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GRETINA*) (soff+(sizeof(GRETINA)*i)))->~G__TGRETINA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GRETINA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GRETINA*) (soff))->~G__TGRETINA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_550_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRETINA* dest = (GRETINA*) G__getstructoffset();
   *dest = *(GRETINA*) libp->para[0].ref;
   const GRETINA& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* rotationMatrix */
static int G__GRETINADict_551_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rotationMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rotationMatrix[n];
     } else {
       p = new((void*) gvp) rotationMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new rotationMatrix;
     } else {
       p = new((void*) gvp) rotationMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rotationMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new rotationMatrix(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) rotationMatrix(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((rotationMatrix*) G__getstructoffset())->ReadMatrix(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((rotationMatrix*) G__getstructoffset())->crys2Lab((Int_t) G__int(libp->para[0]), *((TVector3*) G__int(libp->para[1])));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) rotationMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rotationMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) rotationMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      rotationMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((rotationMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rotationMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rotationMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) rotationMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_551_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) rotationMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_551_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   rotationMatrix* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new rotationMatrix(*(rotationMatrix*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef rotationMatrix G__TrotationMatrix;
static int G__GRETINADict_551_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (rotationMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((rotationMatrix*) (soff+(sizeof(rotationMatrix)*i)))->~G__TrotationMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (rotationMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((rotationMatrix*) (soff))->~G__TrotationMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_551_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   rotationMatrix* dest = (rotationMatrix*) G__getstructoffset();
   *dest = *(rotationMatrix*) libp->para[0].ref;
   const rotationMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GRETINAVariables */
static int G__GRETINADict_552_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRETINAVariables* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GRETINAVariables[n];
     } else {
       p = new((void*) gvp) GRETINAVariables[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GRETINAVariables;
     } else {
       p = new((void*) gvp) GRETINAVariables;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_GRETINAVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINAVariables*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINAVariables*) G__getstructoffset())->InitializeGRETINAVariables(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GRETINAVariables*) G__getstructoffset())->GetNextValue((FILE*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINAVariables*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GRETINAVariables::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRETINAVariables::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GRETINAVariables::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GRETINAVariables::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GRETINAVariables*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRETINAVariables::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRETINAVariables::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GRETINAVariables::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_552_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GRETINAVariables::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_552_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GRETINAVariables* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GRETINAVariables(*(GRETINAVariables*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_GRETINAVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GRETINAVariables G__TGRETINAVariables;
static int G__GRETINADict_552_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GRETINAVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GRETINAVariables*) (soff+(sizeof(GRETINAVariables)*i)))->~G__TGRETINAVariables();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GRETINAVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GRETINAVariables*) (soff))->~G__TGRETINAVariables();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_552_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GRETINAVariables* dest = (GRETINAVariables*) G__getstructoffset();
   *dest = *(GRETINAVariables*) libp->para[0].ref;
   const GRETINAVariables& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* globalHeader */
// automatic default constructor
static int G__GRETINADict_553_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   globalHeader *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new globalHeader[n];
     } else {
       p = new((void*) gvp) globalHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new globalHeader;
     } else {
       p = new((void*) gvp) globalHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_globalHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_553_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   globalHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new globalHeader(*(globalHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_globalHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef globalHeader G__TglobalHeader;
static int G__GRETINADict_553_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (globalHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((globalHeader*) (soff+(sizeof(globalHeader)*i)))->~G__TglobalHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (globalHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((globalHeader*) (soff))->~G__TglobalHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_553_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   globalHeader* dest = (globalHeader*) G__getstructoffset();
   *dest = *(globalHeader*) libp->para[0].ref;
   const globalHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mode3DataPacket */
// automatic default constructor
static int G__GRETINADict_554_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode3DataPacket *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode3DataPacket[n];
     } else {
       p = new((void*) gvp) mode3DataPacket[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode3DataPacket;
     } else {
       p = new((void*) gvp) mode3DataPacket;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode3DataPacket));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_554_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mode3DataPacket* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mode3DataPacket(*(mode3DataPacket*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode3DataPacket));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mode3DataPacket G__Tmode3DataPacket;
static int G__GRETINADict_554_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mode3DataPacket*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mode3DataPacket*) (soff+(sizeof(mode3DataPacket)*i)))->~G__Tmode3DataPacket();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mode3DataPacket*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mode3DataPacket*) (soff))->~G__Tmode3DataPacket();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_554_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode3DataPacket* dest = (mode3DataPacket*) G__getstructoffset();
   *dest = *(mode3DataPacket*) libp->para[0].ref;
   const mode3DataPacket& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g3Waveform */
static int G__GRETINADict_555_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3Waveform*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3Waveform*) G__getstructoffset())->LEDLevel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3Waveform*) G__getstructoffset())->LED((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3Waveform*) G__getstructoffset())->CFD((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3Waveform*) G__getstructoffset())->BL((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3Waveform*) G__getstructoffset())->Look4Pileup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3Waveform*) G__getstructoffset())->calcPZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3Waveform*) G__getstructoffset())->simpleE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3Waveform*) G__getstructoffset())->riseTime((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((g3Waveform*) G__getstructoffset())->computeChiSquare((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((g3Waveform*) G__getstructoffset())->LSFitExpo(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((g3Waveform*) G__getstructoffset())->LSFitLinear((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3Waveform*) G__getstructoffset())->baseline2Flatten((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g3Waveform::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3Waveform::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g3Waveform::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g3Waveform::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3Waveform*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3Waveform::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3Waveform::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3Waveform::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_555_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3Waveform::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__GRETINADict_555_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3Waveform *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3Waveform[n];
     } else {
       p = new((void*) gvp) g3Waveform[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3Waveform;
     } else {
       p = new((void*) gvp) g3Waveform;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_555_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g3Waveform* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g3Waveform(*(g3Waveform*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g3Waveform G__Tg3Waveform;
static int G__GRETINADict_555_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g3Waveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g3Waveform*) (soff+(sizeof(g3Waveform)*i)))->~G__Tg3Waveform();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g3Waveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g3Waveform*) (soff))->~G__Tg3Waveform();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_555_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3Waveform* dest = (g3Waveform*) G__getstructoffset();
   *dest = *(g3Waveform*) libp->para[0].ref;
   const g3Waveform& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g3ChannelEvent */
static int G__GRETINADict_556_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3ChannelEvent*) G__getstructoffset())->module());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3ChannelEvent*) G__getstructoffset())->boardID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3ChannelEvent*) G__getstructoffset())->chanID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3ChannelEvent*) G__getstructoffset())->tracelength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3ChannelEvent*) G__getstructoffset())->chnNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((g3ChannelEvent*) G__getstructoffset())->sign());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3ChannelEvent*) G__getstructoffset())->pileUp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g3ChannelEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3ChannelEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g3ChannelEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g3ChannelEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3ChannelEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3ChannelEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3ChannelEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3ChannelEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_556_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3ChannelEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__GRETINADict_556_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3ChannelEvent *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3ChannelEvent[n];
     } else {
       p = new((void*) gvp) g3ChannelEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3ChannelEvent;
     } else {
       p = new((void*) gvp) g3ChannelEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_556_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g3ChannelEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g3ChannelEvent(*(g3ChannelEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g3ChannelEvent G__Tg3ChannelEvent;
static int G__GRETINADict_556_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g3ChannelEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g3ChannelEvent*) (soff+(sizeof(g3ChannelEvent)*i)))->~G__Tg3ChannelEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g3ChannelEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g3ChannelEvent*) (soff))->~G__Tg3ChannelEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_556_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3ChannelEvent* dest = (g3ChannelEvent*) G__getstructoffset();
   *dest = *(g3ChannelEvent*) libp->para[0].ref;
   const g3ChannelEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g3CrystalEvent */
static int G__GRETINADict_557_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3CrystalEvent*) G__getstructoffset())->OrderChannels();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc1Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc2Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc3Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc4Raw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc1Calc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc2Calc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc3Calc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->cc4Calc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->segSumRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->segSumRawThresh((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->segSumRawTimed((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->segSumRawThreshTimed((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3CrystalEvent*) G__getstructoffset())->segsHit((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->segSumCalc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->segSumCalcThresh((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3CrystalEvent*) G__getstructoffset())->segsHitCalc((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->maxSegE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3CrystalEvent*) G__getstructoffset())->maxSegECalc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3CrystalEvent*) G__getstructoffset())->maxSegNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3CrystalEvent*) G__getstructoffset())->secondSegNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3CrystalEvent*) G__getstructoffset())->maxSegNumCalc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g3CrystalEvent*) G__getstructoffset())->deepRingHit((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((g3CrystalEvent*) G__getstructoffset())->LEDLow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((g3CrystalEvent*) G__getstructoffset())->LEDHigh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((g3CrystalEvent*) G__getstructoffset())->crystalBuild());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((g3CrystalEvent*) G__getstructoffset())->LEDRange());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3CrystalEvent*) G__getstructoffset())->mode3ToFile((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g3CrystalEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3CrystalEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g3CrystalEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g3CrystalEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3CrystalEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3CrystalEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3CrystalEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3CrystalEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_557_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3CrystalEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__GRETINADict_557_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3CrystalEvent *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3CrystalEvent[n];
     } else {
       p = new((void*) gvp) g3CrystalEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3CrystalEvent;
     } else {
       p = new((void*) gvp) g3CrystalEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_557_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g3CrystalEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g3CrystalEvent(*(g3CrystalEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g3CrystalEvent G__Tg3CrystalEvent;
static int G__GRETINADict_557_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g3CrystalEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g3CrystalEvent*) (soff+(sizeof(g3CrystalEvent)*i)))->~G__Tg3CrystalEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g3CrystalEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g3CrystalEvent*) (soff))->~G__Tg3CrystalEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_557_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3CrystalEvent* dest = (g3CrystalEvent*) G__getstructoffset();
   *dest = *(g3CrystalEvent*) libp->para[0].ref;
   const g3CrystalEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<g3ChannelEvent,allocator<g3ChannelEvent> > */
static int G__GRETINADict_559_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reference obj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->at((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_reference obj = ((const vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->at((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator* pobj;
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator xobj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->begin();
         pobj = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator* pobj;
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator xobj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->end();
         pobj = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reverse_iterator* pobj;
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reverse_iterator xobj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->rbegin();
         pobj = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reverse_iterator* pobj;
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reverse_iterator xobj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->rend();
         pobj = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->resize((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->resize((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]), *((g3ChannelEvent*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reference obj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->operator[]((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_reference obj = ((const vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->operator[]((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3ChannelEvent,allocator<g3ChannelEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >[n];
     } else {
       p = new((void*) gvp) vector<g3ChannelEvent,allocator<g3ChannelEvent> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >;
     } else {
       p = new((void*) gvp) vector<g3ChannelEvent,allocator<g3ChannelEvent> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3ChannelEvent,allocator<g3ChannelEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]), *(g3ChannelEvent*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<g3ChannelEvent,allocator<g3ChannelEvent> >((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]), *(g3ChannelEvent*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<g3ChannelEvent,allocator<g3ChannelEvent> >((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3ChannelEvent,allocator<g3ChannelEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >(*(vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<g3ChannelEvent,allocator<g3ChannelEvent> >(*(vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3ChannelEvent,allocator<g3ChannelEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >(*((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<g3ChannelEvent,allocator<g3ChannelEvent> >(*((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g3ChannelEvent,allocator<g3ChannelEvent> >& obj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->operator=(*(vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->reserve((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g3ChannelEvent& obj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g3ChannelEvent& obj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->push_back(*(g3ChannelEvent*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->swap(*(vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator* pobj;
         vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator xobj = ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->insert(*((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator*) G__int(libp->para[0])), *(g3ChannelEvent*) libp->para[1].ref);
         pobj = new vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->insert(*((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator*) G__int(libp->para[0])), *((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator*) G__int(libp->para[1]))
, *((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->insert(*((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator*) G__int(libp->para[0])), (vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type) G__int(libp->para[1])
, *(g3ChannelEvent*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->erase(*((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->erase(*((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator*) G__int(libp->para[0])), *((vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_559_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<g3ChannelEvent,allocator<g3ChannelEvent> > G__TvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR;
static int G__GRETINADict_559_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) (soff+(sizeof(vector<g3ChannelEvent,allocator<g3ChannelEvent> >)*i)))->~G__TvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<g3ChannelEvent,allocator<g3ChannelEvent> >*) (soff))->~G__TvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g3OUT */
static int G__GRETINADict_562_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3OUT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3OUT[n];
     } else {
       p = new((void*) gvp) g3OUT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3OUT;
     } else {
       p = new((void*) gvp) g3OUT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3OUT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3OUT*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((g3OUT*) G__getstructoffset())->crystalMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g3OUT*) G__getstructoffset())->calorimeterE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g3OUT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3OUT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g3OUT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g3OUT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3OUT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3OUT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3OUT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3OUT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_562_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3OUT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_562_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g3OUT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g3OUT(*(g3OUT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3OUT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g3OUT G__Tg3OUT;
static int G__GRETINADict_562_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g3OUT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g3OUT*) (soff+(sizeof(g3OUT)*i)))->~G__Tg3OUT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g3OUT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g3OUT*) (soff))->~G__Tg3OUT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_562_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3OUT* dest = (g3OUT*) G__getstructoffset();
   *dest = *(g3OUT*) libp->para[0].ref;
   const g3OUT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<g3CrystalEvent,allocator<g3CrystalEvent> > */
static int G__GRETINADict_564_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reference obj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->at((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_reference obj = ((const vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->at((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator* pobj;
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator xobj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->begin();
         pobj = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator* pobj;
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator xobj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->end();
         pobj = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reverse_iterator* pobj;
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reverse_iterator xobj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->rbegin();
         pobj = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reverse_iterator* pobj;
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reverse_iterator xobj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->rend();
         pobj = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->resize((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->resize((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]), *((g3CrystalEvent*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reference obj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->operator[]((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_reference obj = ((const vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->operator[]((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3CrystalEvent,allocator<g3CrystalEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >[n];
     } else {
       p = new((void*) gvp) vector<g3CrystalEvent,allocator<g3CrystalEvent> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >;
     } else {
       p = new((void*) gvp) vector<g3CrystalEvent,allocator<g3CrystalEvent> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3CrystalEvent,allocator<g3CrystalEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]), *(g3CrystalEvent*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<g3CrystalEvent,allocator<g3CrystalEvent> >((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]), *(g3CrystalEvent*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<g3CrystalEvent,allocator<g3CrystalEvent> >((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3CrystalEvent,allocator<g3CrystalEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >(*(vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<g3CrystalEvent,allocator<g3CrystalEvent> >(*(vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3CrystalEvent,allocator<g3CrystalEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >(*((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<g3CrystalEvent,allocator<g3CrystalEvent> >(*((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g3CrystalEvent,allocator<g3CrystalEvent> >& obj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->operator=(*(vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->reserve((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g3CrystalEvent& obj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g3CrystalEvent& obj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->push_back(*(g3CrystalEvent*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->swap(*(vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator* pobj;
         vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator xobj = ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->insert(*((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator*) G__int(libp->para[0])), *(g3CrystalEvent*) libp->para[1].ref);
         pobj = new vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->insert(*((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator*) G__int(libp->para[0])), *((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator*) G__int(libp->para[1]))
, *((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->insert(*((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator*) G__int(libp->para[0])), (vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type) G__int(libp->para[1])
, *(g3CrystalEvent*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->erase(*((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->erase(*((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator*) G__int(libp->para[0])), *((vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_564_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<g3CrystalEvent,allocator<g3CrystalEvent> > G__TvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR;
static int G__GRETINADict_564_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) (soff+(sizeof(vector<g3CrystalEvent,allocator<g3CrystalEvent> >)*i)))->~G__TvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<g3CrystalEvent,allocator<g3CrystalEvent> >*) (soff))->~G__TvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mode3HistoryPacket */
// automatic default constructor
static int G__GRETINADict_567_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode3HistoryPacket *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode3HistoryPacket[n];
     } else {
       p = new((void*) gvp) mode3HistoryPacket[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode3HistoryPacket;
     } else {
       p = new((void*) gvp) mode3HistoryPacket;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode3HistoryPacket));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_567_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mode3HistoryPacket* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mode3HistoryPacket(*(mode3HistoryPacket*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode3HistoryPacket));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mode3HistoryPacket G__Tmode3HistoryPacket;
static int G__GRETINADict_567_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mode3HistoryPacket*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mode3HistoryPacket*) (soff+(sizeof(mode3HistoryPacket)*i)))->~G__Tmode3HistoryPacket();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mode3HistoryPacket*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mode3HistoryPacket*) (soff))->~G__Tmode3HistoryPacket();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_567_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode3HistoryPacket* dest = (mode3HistoryPacket*) G__getstructoffset();
   *dest = *(mode3HistoryPacket*) libp->para[0].ref;
   const mode3HistoryPacket& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* historyEvent */
// automatic default constructor
static int G__GRETINADict_568_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   historyEvent *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new historyEvent[n];
     } else {
       p = new((void*) gvp) historyEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new historyEvent;
     } else {
       p = new((void*) gvp) historyEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_historyEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_568_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   historyEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new historyEvent(*(historyEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_historyEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef historyEvent G__ThistoryEvent;
static int G__GRETINADict_568_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (historyEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((historyEvent*) (soff+(sizeof(historyEvent)*i)))->~G__ThistoryEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (historyEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((historyEvent*) (soff))->~G__ThistoryEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_568_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   historyEvent* dest = (historyEvent*) G__getstructoffset();
   *dest = *(historyEvent*) libp->para[0].ref;
   const historyEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g3HistoryEvent */
static int G__GRETINADict_569_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3HistoryEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3HistoryEvent[n];
     } else {
       p = new((void*) gvp) g3HistoryEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g3HistoryEvent;
     } else {
       p = new((void*) gvp) g3HistoryEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((g3HistoryEvent*) G__getstructoffset())->lengthOfPast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g3HistoryEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3HistoryEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g3HistoryEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g3HistoryEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g3HistoryEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3HistoryEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3HistoryEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g3HistoryEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_569_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g3HistoryEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_569_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g3HistoryEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g3HistoryEvent(*(g3HistoryEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g3HistoryEvent G__Tg3HistoryEvent;
static int G__GRETINADict_569_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g3HistoryEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g3HistoryEvent*) (soff+(sizeof(g3HistoryEvent)*i)))->~G__Tg3HistoryEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g3HistoryEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g3HistoryEvent*) (soff))->~G__Tg3HistoryEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_569_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g3HistoryEvent* dest = (g3HistoryEvent*) G__getstructoffset();
   *dest = *(g3HistoryEvent*) libp->para[0].ref;
   const g3HistoryEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Bank29 */
static int G__GRETINADict_574_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Bank29* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Bank29[n];
     } else {
       p = new((void*) gvp) Bank29[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Bank29;
     } else {
       p = new((void*) gvp) Bank29;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_Bank29));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_574_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Bank29::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_574_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Bank29::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_574_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Bank29::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_574_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Bank29::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_574_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Bank29*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_574_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Bank29::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_574_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Bank29::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_574_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Bank29::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_574_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Bank29::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_574_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Bank29* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Bank29(*(Bank29*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_Bank29));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Bank29 G__TBank29;
static int G__GRETINADict_574_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Bank29*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Bank29*) (soff+(sizeof(Bank29)*i)))->~G__TBank29();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Bank29*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Bank29*) (soff))->~G__TBank29();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_574_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Bank29* dest = (Bank29*) G__getstructoffset();
   *dest = *(Bank29*) libp->para[0].ref;
   const Bank29& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ip */
// automatic default constructor
static int G__GRETINADict_575_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ip *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ip[n];
     } else {
       p = new((void*) gvp) ip[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ip;
     } else {
       p = new((void*) gvp) ip;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_ip));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_575_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ip* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ip(*(ip*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_ip));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ip G__Tip;
static int G__GRETINADict_575_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ip*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ip*) (soff+(sizeof(ip)*i)))->~G__Tip();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ip*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ip*) (soff))->~G__Tip();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_575_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ip* dest = (ip*) G__getstructoffset();
   *dest = *(ip*) libp->para[0].ref;
   const ip& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ipOLD */
// automatic default constructor
static int G__GRETINADict_576_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ipOLD *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ipOLD[n];
     } else {
       p = new((void*) gvp) ipOLD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ipOLD;
     } else {
       p = new((void*) gvp) ipOLD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_ipOLD));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_576_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ipOLD* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ipOLD(*(ipOLD*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_ipOLD));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ipOLD G__TipOLD;
static int G__GRETINADict_576_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ipOLD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ipOLD*) (soff+(sizeof(ipOLD)*i)))->~G__TipOLD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ipOLD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ipOLD*) (soff))->~G__TipOLD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_576_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ipOLD* dest = (ipOLD*) G__getstructoffset();
   *dest = *(ipOLD*) libp->para[0].ref;
   const ipOLD& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mode2Old */
// automatic default constructor
static int G__GRETINADict_577_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode2Old *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode2Old[n];
     } else {
       p = new((void*) gvp) mode2Old[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode2Old;
     } else {
       p = new((void*) gvp) mode2Old;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode2Old));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_577_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mode2Old* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mode2Old(*(mode2Old*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode2Old));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mode2Old G__Tmode2Old;
static int G__GRETINADict_577_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mode2Old*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mode2Old*) (soff+(sizeof(mode2Old)*i)))->~G__Tmode2Old();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mode2Old*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mode2Old*) (soff))->~G__Tmode2Old();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_577_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode2Old* dest = (mode2Old*) G__getstructoffset();
   *dest = *(mode2Old*) libp->para[0].ref;
   const mode2Old& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mode2ABCD1234 */
// automatic default constructor
static int G__GRETINADict_578_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode2ABCD1234 *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode2ABCD1234[n];
     } else {
       p = new((void*) gvp) mode2ABCD1234[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode2ABCD1234;
     } else {
       p = new((void*) gvp) mode2ABCD1234;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD1234));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_578_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mode2ABCD1234* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mode2ABCD1234(*(mode2ABCD1234*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD1234));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mode2ABCD1234 G__Tmode2ABCD1234;
static int G__GRETINADict_578_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mode2ABCD1234*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mode2ABCD1234*) (soff+(sizeof(mode2ABCD1234)*i)))->~G__Tmode2ABCD1234();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mode2ABCD1234*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mode2ABCD1234*) (soff))->~G__Tmode2ABCD1234();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_578_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode2ABCD1234* dest = (mode2ABCD1234*) G__getstructoffset();
   *dest = *(mode2ABCD1234*) libp->para[0].ref;
   const mode2ABCD1234& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mode2ABCD5678 */
// automatic default constructor
static int G__GRETINADict_579_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode2ABCD5678 *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode2ABCD5678[n];
     } else {
       p = new((void*) gvp) mode2ABCD5678[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mode2ABCD5678;
     } else {
       p = new((void*) gvp) mode2ABCD5678;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD5678));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_579_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mode2ABCD5678* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mode2ABCD5678(*(mode2ABCD5678*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD5678));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mode2ABCD5678 G__Tmode2ABCD5678;
static int G__GRETINADict_579_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mode2ABCD5678*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mode2ABCD5678*) (soff+(sizeof(mode2ABCD5678)*i)))->~G__Tmode2ABCD5678();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mode2ABCD5678*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mode2ABCD5678*) (soff))->~G__Tmode2ABCD5678();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_579_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mode2ABCD5678* dest = (mode2ABCD5678*) G__getstructoffset();
   *dest = *(mode2ABCD5678*) libp->para[0].ref;
   const mode2ABCD5678& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g2IntPt */
static int G__GRETINADict_580_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g2IntPt* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g2IntPt[n];
     } else {
       p = new((void*) gvp) g2IntPt[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g2IntPt;
     } else {
       p = new((void*) gvp) g2IntPt;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_580_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g2IntPt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_580_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g2IntPt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_580_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g2IntPt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_580_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g2IntPt::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_580_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g2IntPt*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_580_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g2IntPt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_580_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g2IntPt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_580_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g2IntPt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_580_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g2IntPt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_580_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g2IntPt* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g2IntPt(*(g2IntPt*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g2IntPt G__Tg2IntPt;
static int G__GRETINADict_580_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g2IntPt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g2IntPt*) (soff+(sizeof(g2IntPt)*i)))->~G__Tg2IntPt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g2IntPt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g2IntPt*) (soff))->~G__Tg2IntPt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_580_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g2IntPt* dest = (g2IntPt*) G__getstructoffset();
   *dest = *(g2IntPt*) libp->para[0].ref;
   const g2IntPt& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g2CrystalEvent */
static int G__GRETINADict_581_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g2CrystalEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g2CrystalEvent[n];
     } else {
       p = new((void*) gvp) g2CrystalEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g2CrystalEvent;
     } else {
       p = new((void*) gvp) g2CrystalEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g2CrystalEvent*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g2CrystalEvent*) G__getstructoffset())->numIntPts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g2CrystalEvent*) G__getstructoffset())->numSegHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g2CrystalEvent*) G__getstructoffset())->segsHitAboveThresh((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->averageIntPtsPerSeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->segSumRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->segSumRawThresh((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((g2CrystalEvent*) G__getstructoffset())->maxIntPtXYZ();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((g2CrystalEvent*) G__getstructoffset())->maxIntPtX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((g2CrystalEvent*) G__getstructoffset())->maxIntPtY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((g2CrystalEvent*) G__getstructoffset())->maxIntPtZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((g2CrystalEvent*) G__getstructoffset())->maxIntPtR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((g2CrystalEvent*) G__getstructoffset())->maxIntPtXYZLab();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((g2CrystalEvent*) G__getstructoffset())->maxIntPtXYZLabSeg();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((g2CrystalEvent*) G__getstructoffset())->maxIntPtXYZLabCrystal();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->maxIntPtE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((g2CrystalEvent*) G__getstructoffset())->maxIntPtSegNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->maxIntPtSegE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->gTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->gPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->CosDop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->cDoppler((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->cDopplerSeg((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2CrystalEvent*) G__getstructoffset())->cDopplerCrystal((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g2CrystalEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g2CrystalEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g2CrystalEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g2CrystalEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g2CrystalEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g2CrystalEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g2CrystalEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g2CrystalEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_581_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g2CrystalEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_581_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g2CrystalEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g2CrystalEvent(*(g2CrystalEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g2CrystalEvent G__Tg2CrystalEvent;
static int G__GRETINADict_581_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g2CrystalEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g2CrystalEvent*) (soff+(sizeof(g2CrystalEvent)*i)))->~G__Tg2CrystalEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g2CrystalEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g2CrystalEvent*) (soff))->~G__Tg2CrystalEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_581_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g2CrystalEvent* dest = (g2CrystalEvent*) G__getstructoffset();
   *dest = *(g2CrystalEvent*) libp->para[0].ref;
   const g2CrystalEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<g2IntPt,allocator<g2IntPt> > */
static int G__GRETINADict_583_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g2IntPt,allocator<g2IntPt> >::reference obj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->at((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2IntPt,allocator<g2IntPt> >::const_reference obj = ((const vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->at((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2IntPt,allocator<g2IntPt> >::iterator* pobj;
         vector<g2IntPt,allocator<g2IntPt> >::iterator xobj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->begin();
         pobj = new vector<g2IntPt,allocator<g2IntPt> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2IntPt,allocator<g2IntPt> >::iterator* pobj;
         vector<g2IntPt,allocator<g2IntPt> >::iterator xobj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->end();
         pobj = new vector<g2IntPt,allocator<g2IntPt> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2IntPt,allocator<g2IntPt> >::reverse_iterator* pobj;
         vector<g2IntPt,allocator<g2IntPt> >::reverse_iterator xobj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->rbegin();
         pobj = new vector<g2IntPt,allocator<g2IntPt> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2IntPt,allocator<g2IntPt> >::reverse_iterator* pobj;
         vector<g2IntPt,allocator<g2IntPt> >::reverse_iterator xobj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->rend();
         pobj = new vector<g2IntPt,allocator<g2IntPt> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->resize((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->resize((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]), *((g2IntPt*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g2IntPt,allocator<g2IntPt> >::reference obj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->operator[]((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2IntPt,allocator<g2IntPt> >::const_reference obj = ((const vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->operator[]((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g2IntPt,allocator<g2IntPt> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g2IntPt,allocator<g2IntPt> >[n];
     } else {
       p = new((void*) gvp) vector<g2IntPt,allocator<g2IntPt> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g2IntPt,allocator<g2IntPt> >;
     } else {
       p = new((void*) gvp) vector<g2IntPt,allocator<g2IntPt> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g2IntPt,allocator<g2IntPt> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g2IntPt,allocator<g2IntPt> >((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]), *(g2IntPt*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<g2IntPt,allocator<g2IntPt> >((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]), *(g2IntPt*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g2IntPt,allocator<g2IntPt> >((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<g2IntPt,allocator<g2IntPt> >((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g2IntPt,allocator<g2IntPt> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g2IntPt,allocator<g2IntPt> >(*(vector<g2IntPt,allocator<g2IntPt> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<g2IntPt,allocator<g2IntPt> >(*(vector<g2IntPt,allocator<g2IntPt> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g2IntPt,allocator<g2IntPt> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g2IntPt,allocator<g2IntPt> >(*((vector<g2IntPt,allocator<g2IntPt> >::const_iterator*) G__int(libp->para[0])), *((vector<g2IntPt,allocator<g2IntPt> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<g2IntPt,allocator<g2IntPt> >(*((vector<g2IntPt,allocator<g2IntPt> >::const_iterator*) G__int(libp->para[0])), *((vector<g2IntPt,allocator<g2IntPt> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g2IntPt,allocator<g2IntPt> >& obj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->operator=(*(vector<g2IntPt,allocator<g2IntPt> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->reserve((vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g2IntPt& obj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g2IntPt& obj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->push_back(*(g2IntPt*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->swap(*(vector<g2IntPt,allocator<g2IntPt> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2IntPt,allocator<g2IntPt> >::iterator* pobj;
         vector<g2IntPt,allocator<g2IntPt> >::iterator xobj = ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->insert(*((vector<g2IntPt,allocator<g2IntPt> >::iterator*) G__int(libp->para[0])), *(g2IntPt*) libp->para[1].ref);
         pobj = new vector<g2IntPt,allocator<g2IntPt> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->insert(*((vector<g2IntPt,allocator<g2IntPt> >::iterator*) G__int(libp->para[0])), *((vector<g2IntPt,allocator<g2IntPt> >::const_iterator*) G__int(libp->para[1]))
, *((vector<g2IntPt,allocator<g2IntPt> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->insert(*((vector<g2IntPt,allocator<g2IntPt> >::iterator*) G__int(libp->para[0])), (vector<g2IntPt,allocator<g2IntPt> >::size_type) G__int(libp->para[1])
, *(g2IntPt*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->erase(*((vector<g2IntPt,allocator<g2IntPt> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->erase(*((vector<g2IntPt,allocator<g2IntPt> >::iterator*) G__int(libp->para[0])), *((vector<g2IntPt,allocator<g2IntPt> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_583_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2IntPt,allocator<g2IntPt> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<g2IntPt,allocator<g2IntPt> > G__TvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR;
static int G__GRETINADict_583_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<g2IntPt,allocator<g2IntPt> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<g2IntPt,allocator<g2IntPt> >*) (soff+(sizeof(vector<g2IntPt,allocator<g2IntPt> >)*i)))->~G__TvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<g2IntPt,allocator<g2IntPt> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<g2IntPt,allocator<g2IntPt> >*) (soff))->~G__TvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g2OUT */
static int G__GRETINADict_586_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g2OUT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g2OUT[n];
     } else {
       p = new((void*) gvp) g2OUT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g2OUT;
     } else {
       p = new((void*) gvp) g2OUT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g2OUT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g2OUT*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2OUT*) G__getstructoffset())->calorimeterDoppler((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2OUT*) G__getstructoffset())->calorimeterE((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g2OUT*) G__getstructoffset())->calorimeterE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((g2OUT*) G__getstructoffset())->crystalMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g2OUT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g2OUT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g2OUT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g2OUT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g2OUT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g2OUT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g2OUT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g2OUT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_586_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g2OUT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_586_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g2OUT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g2OUT(*(g2OUT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g2OUT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g2OUT G__Tg2OUT;
static int G__GRETINADict_586_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g2OUT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g2OUT*) (soff+(sizeof(g2OUT)*i)))->~G__Tg2OUT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g2OUT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g2OUT*) (soff))->~G__Tg2OUT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_586_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g2OUT* dest = (g2OUT*) G__getstructoffset();
   *dest = *(g2OUT*) libp->para[0].ref;
   const g2OUT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<g2CrystalEvent,allocator<g2CrystalEvent> > */
static int G__GRETINADict_588_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reference obj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->at((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_reference obj = ((const vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->at((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator* pobj;
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator xobj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->begin();
         pobj = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator* pobj;
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator xobj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->end();
         pobj = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reverse_iterator* pobj;
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reverse_iterator xobj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->rbegin();
         pobj = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reverse_iterator* pobj;
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reverse_iterator xobj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->rend();
         pobj = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->resize((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->resize((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]), *((g2CrystalEvent*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reference obj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->operator[]((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_reference obj = ((const vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->operator[]((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g2CrystalEvent,allocator<g2CrystalEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >[n];
     } else {
       p = new((void*) gvp) vector<g2CrystalEvent,allocator<g2CrystalEvent> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >;
     } else {
       p = new((void*) gvp) vector<g2CrystalEvent,allocator<g2CrystalEvent> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g2CrystalEvent,allocator<g2CrystalEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]), *(g2CrystalEvent*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<g2CrystalEvent,allocator<g2CrystalEvent> >((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]), *(g2CrystalEvent*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<g2CrystalEvent,allocator<g2CrystalEvent> >((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g2CrystalEvent,allocator<g2CrystalEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >(*(vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<g2CrystalEvent,allocator<g2CrystalEvent> >(*(vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g2CrystalEvent,allocator<g2CrystalEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >(*((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<g2CrystalEvent,allocator<g2CrystalEvent> >(*((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g2CrystalEvent,allocator<g2CrystalEvent> >& obj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->operator=(*(vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->reserve((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g2CrystalEvent& obj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g2CrystalEvent& obj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->push_back(*(g2CrystalEvent*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->swap(*(vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator* pobj;
         vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator xobj = ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->insert(*((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator*) G__int(libp->para[0])), *(g2CrystalEvent*) libp->para[1].ref);
         pobj = new vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->insert(*((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator*) G__int(libp->para[0])), *((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator*) G__int(libp->para[1]))
, *((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->insert(*((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator*) G__int(libp->para[0])), (vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type) G__int(libp->para[1])
, *(g2CrystalEvent*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->erase(*((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->erase(*((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator*) G__int(libp->para[0])), *((vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_588_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<g2CrystalEvent,allocator<g2CrystalEvent> > G__TvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR;
static int G__GRETINADict_588_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) (soff+(sizeof(vector<g2CrystalEvent,allocator<g2CrystalEvent> >)*i)))->~G__TvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<g2CrystalEvent,allocator<g2CrystalEvent> >*) (soff))->~G__TvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* trackedGamma */
// automatic default constructor
static int G__GRETINADict_591_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   trackedGamma *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new trackedGamma[n];
     } else {
       p = new((void*) gvp) trackedGamma[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new trackedGamma;
     } else {
       p = new((void*) gvp) trackedGamma;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_591_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   trackedGamma* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new trackedGamma(*(trackedGamma*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef trackedGamma G__TtrackedGamma;
static int G__GRETINADict_591_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (trackedGamma*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((trackedGamma*) (soff+(sizeof(trackedGamma)*i)))->~G__TtrackedGamma();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (trackedGamma*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((trackedGamma*) (soff))->~G__TtrackedGamma();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_591_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   trackedGamma* dest = (trackedGamma*) G__getstructoffset();
   *dest = *(trackedGamma*) libp->para[0].ref;
   const trackedGamma& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GTrackEvent */
static int G__GRETINADict_592_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GTrackEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GTrackEvent[n];
     } else {
       p = new((void*) gvp) GTrackEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GTrackEvent;
     } else {
       p = new((void*) gvp) GTrackEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_GTrackEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GTrackEvent*) G__getstructoffset())->GetVecSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GTrackEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GTrackEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GTrackEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GTrackEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GTrackEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GTrackEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GTrackEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GTrackEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_592_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GTrackEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_592_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GTrackEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GTrackEvent(*(GTrackEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_GTrackEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GTrackEvent G__TGTrackEvent;
static int G__GRETINADict_592_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GTrackEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GTrackEvent*) (soff+(sizeof(GTrackEvent)*i)))->~G__TGTrackEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GTrackEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GTrackEvent*) (soff))->~G__TGTrackEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_592_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GTrackEvent* dest = (GTrackEvent*) G__getstructoffset();
   *dest = *(GTrackEvent*) libp->para[0].ref;
   const GTrackEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<trackedGamma,allocator<trackedGamma> > */
static int G__GRETINADict_594_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<trackedGamma,allocator<trackedGamma> >::reference obj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->at((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackedGamma,allocator<trackedGamma> >::const_reference obj = ((const vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->at((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackedGamma,allocator<trackedGamma> >::iterator* pobj;
         vector<trackedGamma,allocator<trackedGamma> >::iterator xobj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->begin();
         pobj = new vector<trackedGamma,allocator<trackedGamma> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackedGamma,allocator<trackedGamma> >::iterator* pobj;
         vector<trackedGamma,allocator<trackedGamma> >::iterator xobj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->end();
         pobj = new vector<trackedGamma,allocator<trackedGamma> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackedGamma,allocator<trackedGamma> >::reverse_iterator* pobj;
         vector<trackedGamma,allocator<trackedGamma> >::reverse_iterator xobj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->rbegin();
         pobj = new vector<trackedGamma,allocator<trackedGamma> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackedGamma,allocator<trackedGamma> >::reverse_iterator* pobj;
         vector<trackedGamma,allocator<trackedGamma> >::reverse_iterator xobj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->rend();
         pobj = new vector<trackedGamma,allocator<trackedGamma> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->resize((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->resize((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]), *((trackedGamma*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<trackedGamma,allocator<trackedGamma> >::reference obj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->operator[]((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackedGamma,allocator<trackedGamma> >::const_reference obj = ((const vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->operator[]((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<trackedGamma,allocator<trackedGamma> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<trackedGamma,allocator<trackedGamma> >[n];
     } else {
       p = new((void*) gvp) vector<trackedGamma,allocator<trackedGamma> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<trackedGamma,allocator<trackedGamma> >;
     } else {
       p = new((void*) gvp) vector<trackedGamma,allocator<trackedGamma> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<trackedGamma,allocator<trackedGamma> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<trackedGamma,allocator<trackedGamma> >((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]), *(trackedGamma*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<trackedGamma,allocator<trackedGamma> >((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]), *(trackedGamma*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<trackedGamma,allocator<trackedGamma> >((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<trackedGamma,allocator<trackedGamma> >((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<trackedGamma,allocator<trackedGamma> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<trackedGamma,allocator<trackedGamma> >(*(vector<trackedGamma,allocator<trackedGamma> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<trackedGamma,allocator<trackedGamma> >(*(vector<trackedGamma,allocator<trackedGamma> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<trackedGamma,allocator<trackedGamma> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<trackedGamma,allocator<trackedGamma> >(*((vector<trackedGamma,allocator<trackedGamma> >::const_iterator*) G__int(libp->para[0])), *((vector<trackedGamma,allocator<trackedGamma> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<trackedGamma,allocator<trackedGamma> >(*((vector<trackedGamma,allocator<trackedGamma> >::const_iterator*) G__int(libp->para[0])), *((vector<trackedGamma,allocator<trackedGamma> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<trackedGamma,allocator<trackedGamma> >& obj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->operator=(*(vector<trackedGamma,allocator<trackedGamma> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->reserve((vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const trackedGamma& obj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const trackedGamma& obj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->push_back(*(trackedGamma*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->swap(*(vector<trackedGamma,allocator<trackedGamma> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<trackedGamma,allocator<trackedGamma> >::iterator* pobj;
         vector<trackedGamma,allocator<trackedGamma> >::iterator xobj = ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->insert(*((vector<trackedGamma,allocator<trackedGamma> >::iterator*) G__int(libp->para[0])), *(trackedGamma*) libp->para[1].ref);
         pobj = new vector<trackedGamma,allocator<trackedGamma> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->insert(*((vector<trackedGamma,allocator<trackedGamma> >::iterator*) G__int(libp->para[0])), *((vector<trackedGamma,allocator<trackedGamma> >::const_iterator*) G__int(libp->para[1]))
, *((vector<trackedGamma,allocator<trackedGamma> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->insert(*((vector<trackedGamma,allocator<trackedGamma> >::iterator*) G__int(libp->para[0])), (vector<trackedGamma,allocator<trackedGamma> >::size_type) G__int(libp->para[1])
, *(trackedGamma*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->erase(*((vector<trackedGamma,allocator<trackedGamma> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->erase(*((vector<trackedGamma,allocator<trackedGamma> >::iterator*) G__int(libp->para[0])), *((vector<trackedGamma,allocator<trackedGamma> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_594_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<trackedGamma,allocator<trackedGamma> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<trackedGamma,allocator<trackedGamma> > G__TvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR;
static int G__GRETINADict_594_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<trackedGamma,allocator<trackedGamma> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<trackedGamma,allocator<trackedGamma> >*) (soff+(sizeof(vector<trackedGamma,allocator<trackedGamma> >)*i)))->~G__TvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<trackedGamma,allocator<trackedGamma> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<trackedGamma,allocator<trackedGamma> >*) (soff))->~G__TvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g1GammaEvent */
static int G__GRETINADict_597_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g1GammaEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g1GammaEvent[n];
     } else {
       p = new((void*) gvp) g1GammaEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g1GammaEvent;
     } else {
       p = new((void*) gvp) g1GammaEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g1GammaEvent*) G__getstructoffset())->gTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g1GammaEvent*) G__getstructoffset())->gPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((g1GammaEvent*) G__getstructoffset())->normalVector1();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((g1GammaEvent*) G__getstructoffset())->normalVector2();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g1GammaEvent*) G__getstructoffset())->phiCompton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g1GammaEvent*) G__getstructoffset())->intPtDistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g1GammaEvent*) G__getstructoffset())->scatterAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g1GammaEvent*) G__getstructoffset())->cDoppler((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g1GammaEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g1GammaEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g1GammaEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g1GammaEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g1GammaEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g1GammaEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g1GammaEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g1GammaEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_597_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g1GammaEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_597_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g1GammaEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g1GammaEvent(*(g1GammaEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g1GammaEvent G__Tg1GammaEvent;
static int G__GRETINADict_597_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g1GammaEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g1GammaEvent*) (soff+(sizeof(g1GammaEvent)*i)))->~G__Tg1GammaEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g1GammaEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g1GammaEvent*) (soff))->~G__Tg1GammaEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_597_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g1GammaEvent* dest = (g1GammaEvent*) G__getstructoffset();
   *dest = *(g1GammaEvent*) libp->para[0].ref;
   const g1GammaEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g1OUT */
static int G__GRETINADict_598_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g1OUT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g1OUT[n];
     } else {
       p = new((void*) gvp) g1OUT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g1OUT;
     } else {
       p = new((void*) gvp) g1OUT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g1OUT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g1OUT*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((g1OUT*) G__getstructoffset())->calorimeterE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((g1OUT*) G__getstructoffset())->gammaMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g1OUT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g1OUT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g1OUT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g1OUT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g1OUT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g1OUT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g1OUT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g1OUT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_598_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g1OUT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_598_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g1OUT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g1OUT(*(g1OUT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g1OUT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g1OUT G__Tg1OUT;
static int G__GRETINADict_598_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g1OUT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g1OUT*) (soff+(sizeof(g1OUT)*i)))->~G__Tg1OUT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g1OUT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g1OUT*) (soff))->~G__Tg1OUT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_598_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g1OUT* dest = (g1OUT*) G__getstructoffset();
   *dest = *(g1OUT*) libp->para[0].ref;
   const g1OUT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<g1GammaEvent,allocator<g1GammaEvent> > */
static int G__GRETINADict_600_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g1GammaEvent,allocator<g1GammaEvent> >::reference obj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->at((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g1GammaEvent,allocator<g1GammaEvent> >::const_reference obj = ((const vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->at((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator* pobj;
         vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator xobj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->begin();
         pobj = new vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator* pobj;
         vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator xobj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->end();
         pobj = new vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g1GammaEvent,allocator<g1GammaEvent> >::reverse_iterator* pobj;
         vector<g1GammaEvent,allocator<g1GammaEvent> >::reverse_iterator xobj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->rbegin();
         pobj = new vector<g1GammaEvent,allocator<g1GammaEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g1GammaEvent,allocator<g1GammaEvent> >::reverse_iterator* pobj;
         vector<g1GammaEvent,allocator<g1GammaEvent> >::reverse_iterator xobj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->rend();
         pobj = new vector<g1GammaEvent,allocator<g1GammaEvent> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->resize((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->resize((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]), *((g1GammaEvent*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g1GammaEvent,allocator<g1GammaEvent> >::reference obj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->operator[]((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g1GammaEvent,allocator<g1GammaEvent> >::const_reference obj = ((const vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->operator[]((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g1GammaEvent,allocator<g1GammaEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g1GammaEvent,allocator<g1GammaEvent> >[n];
     } else {
       p = new((void*) gvp) vector<g1GammaEvent,allocator<g1GammaEvent> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g1GammaEvent,allocator<g1GammaEvent> >;
     } else {
       p = new((void*) gvp) vector<g1GammaEvent,allocator<g1GammaEvent> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g1GammaEvent,allocator<g1GammaEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g1GammaEvent,allocator<g1GammaEvent> >((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]), *(g1GammaEvent*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<g1GammaEvent,allocator<g1GammaEvent> >((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]), *(g1GammaEvent*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g1GammaEvent,allocator<g1GammaEvent> >((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<g1GammaEvent,allocator<g1GammaEvent> >((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g1GammaEvent,allocator<g1GammaEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g1GammaEvent,allocator<g1GammaEvent> >(*(vector<g1GammaEvent,allocator<g1GammaEvent> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<g1GammaEvent,allocator<g1GammaEvent> >(*(vector<g1GammaEvent,allocator<g1GammaEvent> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g1GammaEvent,allocator<g1GammaEvent> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g1GammaEvent,allocator<g1GammaEvent> >(*((vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<g1GammaEvent,allocator<g1GammaEvent> >(*((vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator*) G__int(libp->para[0])), *((vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g1GammaEvent,allocator<g1GammaEvent> >& obj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->operator=(*(vector<g1GammaEvent,allocator<g1GammaEvent> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->reserve((vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g1GammaEvent& obj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g1GammaEvent& obj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->push_back(*(g1GammaEvent*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->swap(*(vector<g1GammaEvent,allocator<g1GammaEvent> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator* pobj;
         vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator xobj = ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->insert(*((vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator*) G__int(libp->para[0])), *(g1GammaEvent*) libp->para[1].ref);
         pobj = new vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->insert(*((vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator*) G__int(libp->para[0])), *((vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator*) G__int(libp->para[1]))
, *((vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->insert(*((vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator*) G__int(libp->para[0])), (vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type) G__int(libp->para[1])
, *(g1GammaEvent*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->erase(*((vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->erase(*((vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator*) G__int(libp->para[0])), *((vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_600_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<g1GammaEvent,allocator<g1GammaEvent> > G__TvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR;
static int G__GRETINADict_600_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<g1GammaEvent,allocator<g1GammaEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) (soff+(sizeof(vector<g1GammaEvent,allocator<g1GammaEvent> >)*i)))->~G__TvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<g1GammaEvent,allocator<g1GammaEvent> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<g1GammaEvent,allocator<g1GammaEvent> >*) (soff))->~G__TvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g4Sim_emittedGamma */
// automatic default constructor
static int G__GRETINADict_603_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g4Sim_emittedGamma *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g4Sim_emittedGamma[n];
     } else {
       p = new((void*) gvp) g4Sim_emittedGamma[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g4Sim_emittedGamma;
     } else {
       p = new((void*) gvp) g4Sim_emittedGamma;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_emittedGamma));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_603_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g4Sim_emittedGamma* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g4Sim_emittedGamma(*(g4Sim_emittedGamma*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_emittedGamma));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g4Sim_emittedGamma G__Tg4Sim_emittedGamma;
static int G__GRETINADict_603_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g4Sim_emittedGamma*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g4Sim_emittedGamma*) (soff+(sizeof(g4Sim_emittedGamma)*i)))->~G__Tg4Sim_emittedGamma();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g4Sim_emittedGamma*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g4Sim_emittedGamma*) (soff))->~G__Tg4Sim_emittedGamma();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_603_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g4Sim_emittedGamma* dest = (g4Sim_emittedGamma*) G__getstructoffset();
   *dest = *(g4Sim_emittedGamma*) libp->para[0].ref;
   const g4Sim_emittedGamma& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g4Sim_abcd1234 */
// automatic default constructor
static int G__GRETINADict_604_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g4Sim_abcd1234 *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g4Sim_abcd1234[n];
     } else {
       p = new((void*) gvp) g4Sim_abcd1234[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g4Sim_abcd1234;
     } else {
       p = new((void*) gvp) g4Sim_abcd1234;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_abcd1234));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_604_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g4Sim_abcd1234* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g4Sim_abcd1234(*(g4Sim_abcd1234*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_abcd1234));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g4Sim_abcd1234 G__Tg4Sim_abcd1234;
static int G__GRETINADict_604_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g4Sim_abcd1234*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g4Sim_abcd1234*) (soff+(sizeof(g4Sim_abcd1234)*i)))->~G__Tg4Sim_abcd1234();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g4Sim_abcd1234*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g4Sim_abcd1234*) (soff))->~G__Tg4Sim_abcd1234();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_604_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g4Sim_abcd1234* dest = (g4Sim_abcd1234*) G__getstructoffset();
   *dest = *(g4Sim_abcd1234*) libp->para[0].ref;
   const g4Sim_abcd1234& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* g4SimOUT */
static int G__GRETINADict_605_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g4SimOUT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g4SimOUT[n];
     } else {
       p = new((void*) gvp) g4SimOUT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new g4SimOUT;
     } else {
       p = new((void*) gvp) g4SimOUT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((g4SimOUT*) G__getstructoffset())->GetSimMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g4SimOUT*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) g4SimOUT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g4SimOUT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) g4SimOUT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      g4SimOUT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((g4SimOUT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g4SimOUT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g4SimOUT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) g4SimOUT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_605_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) g4SimOUT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_605_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   g4SimOUT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new g4SimOUT(*(g4SimOUT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef g4SimOUT G__Tg4SimOUT;
static int G__GRETINADict_605_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (g4SimOUT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((g4SimOUT*) (soff+(sizeof(g4SimOUT)*i)))->~G__Tg4SimOUT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (g4SimOUT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((g4SimOUT*) (soff))->~G__Tg4SimOUT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_605_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   g4SimOUT* dest = (g4SimOUT*) G__getstructoffset();
   *dest = *(g4SimOUT*) libp->para[0].ref;
   const g4SimOUT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* gHistos */
static int G__GRETINADict_610_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   gHistos* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new gHistos[n];
     } else {
       p = new((void*) gvp) gHistos[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new gHistos;
     } else {
       p = new((void*) gvp) gHistos;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_gHistos));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((gHistos*) G__getstructoffset())->writeHistos((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) gHistos::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) gHistos::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) gHistos::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      gHistos::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((gHistos*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) gHistos::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) gHistos::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) gHistos::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_610_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) gHistos::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_610_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   gHistos* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new gHistos(*(gHistos*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_gHistos));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef gHistos G__TgHistos;
static int G__GRETINADict_610_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (gHistos*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((gHistos*) (soff+(sizeof(gHistos)*i)))->~G__TgHistos();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (gHistos*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((gHistos*) (soff))->~G__TgHistos();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_610_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   gHistos* dest = (gHistos*) G__getstructoffset();
   *dest = *(gHistos*) libp->para[0].ref;
   const gHistos& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SuperPulse */
static int G__GRETINADict_611_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SuperPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SuperPulse[n];
     } else {
       p = new((void*) gvp) SuperPulse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SuperPulse;
     } else {
       p = new((void*) gvp) SuperPulse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SuperPulse*) G__getstructoffset())->Initialize((controlVariables*) G__int(libp->para[0]), (GRETINAVariables*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SuperPulse*) G__getstructoffset())->ReadDetMaps((char*) G__int(libp->para[0]), (GRETINAVariables*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
  struct G__aRyp2 { Float_t a[1][40]; }* G__Ap2 = (struct G__aRyp2*) G__int(libp->para[2]);
      G__letint(result7, 105, (long) ((SuperPulse*) G__getstructoffset())->ReadParams(*((TString*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])
, G__Ap2->a, (Int_t) G__int(libp->para[3])
, (GRETINAVariables*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SuperPulse*) G__getstructoffset())->MakeSuperPulses();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SuperPulse*) G__getstructoffset())->AlignCFD((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SuperPulse*) G__getstructoffset())->cfdTime((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SuperPulse*) G__getstructoffset())->FinishSuperPulses();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SuperPulse*) G__getstructoffset())->WriteSuperPulses();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SuperPulse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SuperPulse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SuperPulse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SuperPulse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SuperPulse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SuperPulse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SuperPulse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SuperPulse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_611_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SuperPulse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_611_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SuperPulse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SuperPulse(*(SuperPulse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SuperPulse G__TSuperPulse;
static int G__GRETINADict_611_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SuperPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SuperPulse*) (soff+(sizeof(SuperPulse)*i)))->~G__TSuperPulse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SuperPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SuperPulse*) (soff))->~G__TSuperPulse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_611_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SuperPulse* dest = (SuperPulse*) G__getstructoffset();
   *dest = *(SuperPulse*) libp->para[0].ref;
   const SuperPulse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* INLCorrection */
static int G__GRETINADict_615_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   INLCorrection* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new INLCorrection[n];
     } else {
       p = new((void*) gvp) INLCorrection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new INLCorrection;
     } else {
       p = new((void*) gvp) INLCorrection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_INLCorrection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((INLCorrection*) G__getstructoffset())->Initialize((controlVariables*) G__int(libp->para[0]), (GRETINAVariables*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((INLCorrection*) G__getstructoffset())->calculateENL(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((INLCorrection*) G__getstructoffset())->ReadDigitizerMap(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((INLCorrection*) G__getstructoffset())->ReadRawINL();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) INLCorrection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) INLCorrection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) INLCorrection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      INLCorrection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((INLCorrection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) INLCorrection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) INLCorrection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) INLCorrection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_615_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) INLCorrection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_615_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   INLCorrection* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new INLCorrection(*(INLCorrection*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_INLCorrection));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef INLCorrection G__TINLCorrection;
static int G__GRETINADict_615_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (INLCorrection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((INLCorrection*) (soff+(sizeof(INLCorrection)*i)))->~G__TINLCorrection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (INLCorrection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((INLCorrection*) (soff))->~G__TINLCorrection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_615_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   INLCorrection* dest = (INLCorrection*) G__getstructoffset();
   *dest = *(INLCorrection*) libp->para[0].ref;
   const INLCorrection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Histos */
static int G__GRETINADict_646_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Histos* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Histos[n];
     } else {
       p = new((void*) gvp) Histos[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Histos;
     } else {
       p = new((void*) gvp) Histos;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_Histos));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Histos*) G__getstructoffset())->InitializeHist((controlVariables*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Histos*) G__getstructoffset())->WriteHistos((controlVariables*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Histos::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Histos::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Histos::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Histos::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Histos*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Histos::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Histos::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Histos::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_646_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Histos::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GRETINADict_646_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Histos* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Histos(*(Histos*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_Histos));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Histos G__THistos;
static int G__GRETINADict_646_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Histos*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Histos*) (soff+(sizeof(Histos)*i)))->~G__THistos();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Histos*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Histos*) (soff))->~G__THistos();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GRETINADict_646_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Histos* dest = (Histos*) G__getstructoffset();
   *dest = *(Histos*) libp->para[0].ref;
   const Histos& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<g3Waveform,allocator<g3Waveform> > */
static int G__GRETINADict_648_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g3Waveform,allocator<g3Waveform> >::reference obj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->at((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3Waveform,allocator<g3Waveform> >::const_reference obj = ((const vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->at((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3Waveform,allocator<g3Waveform> >::iterator* pobj;
         vector<g3Waveform,allocator<g3Waveform> >::iterator xobj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->begin();
         pobj = new vector<g3Waveform,allocator<g3Waveform> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3Waveform,allocator<g3Waveform> >::iterator* pobj;
         vector<g3Waveform,allocator<g3Waveform> >::iterator xobj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->end();
         pobj = new vector<g3Waveform,allocator<g3Waveform> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3Waveform,allocator<g3Waveform> >::reverse_iterator* pobj;
         vector<g3Waveform,allocator<g3Waveform> >::reverse_iterator xobj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->rbegin();
         pobj = new vector<g3Waveform,allocator<g3Waveform> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3Waveform,allocator<g3Waveform> >::reverse_iterator* pobj;
         vector<g3Waveform,allocator<g3Waveform> >::reverse_iterator xobj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->rend();
         pobj = new vector<g3Waveform,allocator<g3Waveform> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->resize((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->resize((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]), *((g3Waveform*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g3Waveform,allocator<g3Waveform> >::reference obj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->operator[]((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3Waveform,allocator<g3Waveform> >::const_reference obj = ((const vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->operator[]((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3Waveform,allocator<g3Waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3Waveform,allocator<g3Waveform> >[n];
     } else {
       p = new((void*) gvp) vector<g3Waveform,allocator<g3Waveform> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3Waveform,allocator<g3Waveform> >;
     } else {
       p = new((void*) gvp) vector<g3Waveform,allocator<g3Waveform> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3Waveform,allocator<g3Waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3Waveform,allocator<g3Waveform> >((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]), *(g3Waveform*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<g3Waveform,allocator<g3Waveform> >((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]), *(g3Waveform*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<g3Waveform,allocator<g3Waveform> >((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<g3Waveform,allocator<g3Waveform> >((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3Waveform,allocator<g3Waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g3Waveform,allocator<g3Waveform> >(*(vector<g3Waveform,allocator<g3Waveform> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<g3Waveform,allocator<g3Waveform> >(*(vector<g3Waveform,allocator<g3Waveform> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<g3Waveform,allocator<g3Waveform> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<g3Waveform,allocator<g3Waveform> >(*((vector<g3Waveform,allocator<g3Waveform> >::const_iterator*) G__int(libp->para[0])), *((vector<g3Waveform,allocator<g3Waveform> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<g3Waveform,allocator<g3Waveform> >(*((vector<g3Waveform,allocator<g3Waveform> >::const_iterator*) G__int(libp->para[0])), *((vector<g3Waveform,allocator<g3Waveform> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<g3Waveform,allocator<g3Waveform> >& obj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->operator=(*(vector<g3Waveform,allocator<g3Waveform> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->reserve((vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g3Waveform& obj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const g3Waveform& obj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->push_back(*(g3Waveform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->swap(*(vector<g3Waveform,allocator<g3Waveform> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<g3Waveform,allocator<g3Waveform> >::iterator* pobj;
         vector<g3Waveform,allocator<g3Waveform> >::iterator xobj = ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->insert(*((vector<g3Waveform,allocator<g3Waveform> >::iterator*) G__int(libp->para[0])), *(g3Waveform*) libp->para[1].ref);
         pobj = new vector<g3Waveform,allocator<g3Waveform> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->insert(*((vector<g3Waveform,allocator<g3Waveform> >::iterator*) G__int(libp->para[0])), *((vector<g3Waveform,allocator<g3Waveform> >::const_iterator*) G__int(libp->para[1]))
, *((vector<g3Waveform,allocator<g3Waveform> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->insert(*((vector<g3Waveform,allocator<g3Waveform> >::iterator*) G__int(libp->para[0])), (vector<g3Waveform,allocator<g3Waveform> >::size_type) G__int(libp->para[1])
, *(g3Waveform*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->erase(*((vector<g3Waveform,allocator<g3Waveform> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->erase(*((vector<g3Waveform,allocator<g3Waveform> >::iterator*) G__int(libp->para[0])), *((vector<g3Waveform,allocator<g3Waveform> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_648_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<g3Waveform,allocator<g3Waveform> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<g3Waveform,allocator<g3Waveform> > G__TvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR;
static int G__GRETINADict_648_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<g3Waveform,allocator<g3Waveform> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<g3Waveform,allocator<g3Waveform> >*) (soff+(sizeof(vector<g3Waveform,allocator<g3Waveform> >)*i)))->~G__TvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<g3Waveform,allocator<g3Waveform> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<g3Waveform,allocator<g3Waveform> >*) (soff))->~G__TvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<ip,allocator<ip> > */
static int G__GRETINADict_652_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ip,allocator<ip> >::reference obj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->at((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ip,allocator<ip> >::const_reference obj = ((const vector<ip,allocator<ip> >*) G__getstructoffset())->at((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ip,allocator<ip> >::iterator* pobj;
         vector<ip,allocator<ip> >::iterator xobj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->begin();
         pobj = new vector<ip,allocator<ip> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ip,allocator<ip> >::iterator* pobj;
         vector<ip,allocator<ip> >::iterator xobj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->end();
         pobj = new vector<ip,allocator<ip> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ip,allocator<ip> >::reverse_iterator* pobj;
         vector<ip,allocator<ip> >::reverse_iterator xobj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->rbegin();
         pobj = new vector<ip,allocator<ip> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ip,allocator<ip> >::reverse_iterator* pobj;
         vector<ip,allocator<ip> >::reverse_iterator xobj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->rend();
         pobj = new vector<ip,allocator<ip> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<ip,allocator<ip> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<ip,allocator<ip> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->resize((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->resize((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]), *((ip*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<ip,allocator<ip> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<ip,allocator<ip> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ip,allocator<ip> >::reference obj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->operator[]((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ip,allocator<ip> >::const_reference obj = ((const vector<ip,allocator<ip> >*) G__getstructoffset())->operator[]((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ip,allocator<ip> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ip,allocator<ip> >[n];
     } else {
       p = new((void*) gvp) vector<ip,allocator<ip> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ip,allocator<ip> >;
     } else {
       p = new((void*) gvp) vector<ip,allocator<ip> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ip,allocator<ip> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ip,allocator<ip> >((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]), *(ip*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<ip,allocator<ip> >((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]), *(ip*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<ip,allocator<ip> >((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<ip,allocator<ip> >((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ip,allocator<ip> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<ip,allocator<ip> >(*(vector<ip,allocator<ip> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<ip,allocator<ip> >(*(vector<ip,allocator<ip> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<ip,allocator<ip> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<ip,allocator<ip> >(*((vector<ip,allocator<ip> >::const_iterator*) G__int(libp->para[0])), *((vector<ip,allocator<ip> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<ip,allocator<ip> >(*((vector<ip,allocator<ip> >::const_iterator*) G__int(libp->para[0])), *((vector<ip,allocator<ip> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<ip,allocator<ip> >& obj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->operator=(*(vector<ip,allocator<ip> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->reserve((vector<ip,allocator<ip> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ip& obj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ip& obj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->push_back(*(ip*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->swap(*(vector<ip,allocator<ip> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<ip,allocator<ip> >::iterator* pobj;
         vector<ip,allocator<ip> >::iterator xobj = ((vector<ip,allocator<ip> >*) G__getstructoffset())->insert(*((vector<ip,allocator<ip> >::iterator*) G__int(libp->para[0])), *(ip*) libp->para[1].ref);
         pobj = new vector<ip,allocator<ip> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->insert(*((vector<ip,allocator<ip> >::iterator*) G__int(libp->para[0])), *((vector<ip,allocator<ip> >::const_iterator*) G__int(libp->para[1]))
, *((vector<ip,allocator<ip> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->insert(*((vector<ip,allocator<ip> >::iterator*) G__int(libp->para[0])), (vector<ip,allocator<ip> >::size_type) G__int(libp->para[1])
, *(ip*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->erase(*((vector<ip,allocator<ip> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->erase(*((vector<ip,allocator<ip> >::iterator*) G__int(libp->para[0])), *((vector<ip,allocator<ip> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GRETINADict_652_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<ip,allocator<ip> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<ip,allocator<ip> > G__TvectorlEipcOallocatorlEipgRsPgR;
static int G__GRETINADict_652_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<ip,allocator<ip> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<ip,allocator<ip> >*) (soff+(sizeof(vector<ip,allocator<ip> >)*i)))->~G__TvectorlEipcOallocatorlEipgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<ip,allocator<ip> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<ip,allocator<ip> >*) (soff))->~G__TvectorlEipcOallocatorlEipgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* PM */

/* TrackClusterIP */

/* TrackCluster */

/* TrackShell */

/* TrackCtrl */

/* TrackStat */

/* TrackPerm */

/* Track */

/* controlVariables */

/* counterVariables */

/* GRETINA */

/* rotationMatrix */

/* GRETINAVariables */

/* globalHeader */

/* mode3DataPacket */

/* g3Waveform */

/* g3ChannelEvent */

/* g3CrystalEvent */

/* vector<g3ChannelEvent,allocator<g3ChannelEvent> > */

/* g3OUT */

/* vector<g3CrystalEvent,allocator<g3CrystalEvent> > */

/* mode3HistoryPacket */

/* historyEvent */

/* g3HistoryEvent */

/* Bank29 */

/* ip */

/* ipOLD */

/* mode2Old */

/* mode2ABCD1234 */

/* mode2ABCD5678 */

/* g2IntPt */

/* g2CrystalEvent */

/* vector<g2IntPt,allocator<g2IntPt> > */

/* g2OUT */

/* vector<g2CrystalEvent,allocator<g2CrystalEvent> > */

/* trackedGamma */

/* GTrackEvent */

/* vector<trackedGamma,allocator<trackedGamma> > */

/* g1GammaEvent */

/* g1OUT */

/* vector<g1GammaEvent,allocator<g1GammaEvent> > */

/* g4Sim_emittedGamma */

/* g4Sim_abcd1234 */

/* g4SimOUT */

/* gHistos */

/* SuperPulse */

/* INLCorrection */

/* Histos */

/* vector<g3Waveform,allocator<g3Waveform> > */

/* vector<ip,allocator<ip> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGRETINADict {
 public:
  G__Sizep2memfuncGRETINADict(): p(&G__Sizep2memfuncGRETINADict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGRETINADict::*p)();
};

size_t G__get_sizep2memfuncGRETINADict()
{
  G__Sizep2memfuncGRETINADict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGRETINADict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP))) {
     TrackClusterIP *G__Lderived;
     G__Lderived=(TrackClusterIP*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster))) {
     TrackCluster *G__Lderived;
     G__Lderived=(TrackCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_TrackShell))) {
     TrackShell *G__Lderived;
     G__Lderived=(TrackShell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackShell),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl))) {
     TrackCtrl *G__Lderived;
     G__Lderived=(TrackCtrl*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_TrackStat))) {
     TrackStat *G__Lderived;
     G__Lderived=(TrackStat*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackStat),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm))) {
     TrackPerm *G__Lderived;
     G__Lderived=(TrackPerm*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_Track))) {
     Track *G__Lderived;
     G__Lderived=(Track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_Track),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_controlVariables))) {
     controlVariables *G__Lderived;
     G__Lderived=(controlVariables*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_controlVariables),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_counterVariables))) {
     counterVariables *G__Lderived;
     G__Lderived=(counterVariables*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_counterVariables),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_GRETINA))) {
     GRETINA *G__Lderived;
     G__Lderived=(GRETINA*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_GRETINA),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix))) {
     rotationMatrix *G__Lderived;
     G__Lderived=(rotationMatrix*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_GRETINAVariables))) {
     GRETINAVariables *G__Lderived;
     G__Lderived=(GRETINAVariables*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_GRETINAVariables),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform))) {
     g3Waveform *G__Lderived;
     G__Lderived=(g3Waveform*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent))) {
     g3ChannelEvent *G__Lderived;
     G__Lderived=(g3ChannelEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent))) {
     g3CrystalEvent *G__Lderived;
     G__Lderived=(g3CrystalEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g3OUT))) {
     g3OUT *G__Lderived;
     G__Lderived=(g3OUT*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3OUT),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent))) {
     g3HistoryEvent *G__Lderived;
     G__Lderived=(g3HistoryEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_Bank29))) {
     Bank29 *G__Lderived;
     G__Lderived=(Bank29*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_Bank29),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt))) {
     g2IntPt *G__Lderived;
     G__Lderived=(g2IntPt*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent))) {
     g2CrystalEvent *G__Lderived;
     G__Lderived=(g2CrystalEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g2OUT))) {
     g2OUT *G__Lderived;
     G__Lderived=(g2OUT*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g2OUT),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_GTrackEvent))) {
     GTrackEvent *G__Lderived;
     G__Lderived=(GTrackEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_GTrackEvent),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent))) {
     g1GammaEvent *G__Lderived;
     G__Lderived=(g1GammaEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g1OUT))) {
     g1OUT *G__Lderived;
     G__Lderived=(g1OUT*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g1OUT),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT))) {
     g4SimOUT *G__Lderived;
     G__Lderived=(g4SimOUT*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_gHistos))) {
     gHistos *G__Lderived;
     G__Lderived=(gHistos*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_gHistos),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse))) {
     SuperPulse *G__Lderived;
     G__Lderived=(SuperPulse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_INLCorrection))) {
     INLCorrection *G__Lderived;
     G__Lderived=(INLCorrection*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_INLCorrection),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GRETINADictLN_Histos))) {
     Histos *G__Lderived;
     G__Lderived=(Histos*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GRETINADictLN_Histos),G__get_linked_tagnum(&G__GRETINADictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGRETINADict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GRETINADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GRETINADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__GRETINADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__GRETINADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__GRETINADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__GRETINADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__GRETINADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__GRETINADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__GRETINADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Short_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEshortcOallocatorlEshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g3ChannelEvent>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent),1,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent),257,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g3CrystalEvent>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent),1,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent),257,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<historyEvent>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g2IntPt>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt),1,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt),257,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g2CrystalEvent>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent),1,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent),257,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<trackedGamma>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma),1,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma),257,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g1GammaEvent>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent),1,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent),257,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g4Sim_abcd1234>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g3Waveform>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform),1,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform),257,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ip>",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__GRETINADictLN_ip),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_ip),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__GRETINADictLN_ip),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__GRETINADictLN_ip),1,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__GRETINADictLN_ip),257,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEipcOallocatorlEipgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEipcOallocatorlEipgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEipcOallocatorlEipgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEipcOallocatorlEipgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* PM */
static void G__setup_memvarPM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_PM));
   { PM *p; p=(PM*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->np1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"np1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->np2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"np2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"p1[20]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->p2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"p2[20]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"s1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"s2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->likely1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"likely1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->likely2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"likely2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dist)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FOM1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"FOM1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FOM2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"FOM2=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackClusterIP */
static void G__setup_memvarTrackClusterIP(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP));
   { TrackClusterIP *p; p=(TrackClusterIP*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->xyz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"xyz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDet)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->order)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"order=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"t0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->shellPos)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"shellPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->detNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"detNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSumOrig)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSumOrig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->origPos)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"origPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackCluster */
static void G__setup_memvarTrackCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster));
   { TrackCluster *p; p=(TrackCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->valid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"valid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nDet)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nDet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tracked)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tracked=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"FOM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trackNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bestPermutation)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"bestPermutation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->processed)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"processed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->intpts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP),-1,-1,1,"intpts[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badTheoAngPenalty)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"badTheoAngPenalty=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackShell */
static void G__setup_memvarTrackShell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackShell));
   { TrackShell *p; p=(TrackShell*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nHit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nHit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"t0[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chiSq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chiSq[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normChiSq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"normChiSq[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crystalID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystalID[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"xyz[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eDet)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eDet[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eSum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eSum[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->origPos)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"origPos[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->detNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"detNum[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->module)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"module[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crystalType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystalType[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numClusters)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numClusters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->clusterNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"clusterNum[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->knownNumClusters)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"knownNumClusters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->knownClusterNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"knownClusterNum[500]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackCtrl */
static void G__setup_memvarTrackCtrl(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl));
   { TrackCtrl *p; p=(TrackCtrl*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->targetX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"targetX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->targetY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"targetY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->targetZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"targetZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxEvents)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxEvents=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPrint)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nPrint=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nTracks)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTracks=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reTrack)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"reTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->alpha)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"alpha[500]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gamma)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"gamma=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FOMJump)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"FOMJump=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FOMGoodEnough)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"FOMGoodEnough=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iterations)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iterations=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->removeInvalids)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"removeInvalids=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fixDoubleHitsCode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fixDoubleHitsCode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fixDoubleHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fixDoubleHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->enabled)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"enabled[200]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackDataFileName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"trackDataFileName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nDetELim_lo)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nDetELim_lo[9]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nDetELim_hi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nDetELim_hi[9]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nDetELim_FOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"nDetELim_FOM[9]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->useCCEnergy)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"useCCEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->useSegEnergy)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"useSegEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->splitClusters)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"splitClusters[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->splitClusters_kickoutFOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"splitClusters_kickoutFOM[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->splitClusters_thresh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"splitClusters_thresh[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->splitClusters_minN)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"splitClusters_minN[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->splitClusters_maxN)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"splitClusters_maxN[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->splitClusters_maxTry)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"splitClusters_maxTry[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->goodImproveFraction)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"goodImproveFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reCluster)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"reCluster[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reCluster_kickoutFOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"reCluster_kickoutFOM[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reCluster_thresh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"reCluster_thresh[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reCluster_minN)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"reCluster_minN[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reCluster_maxTry)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"reCluster_maxTry[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reCluster_reduxFactor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"reCluster_reduxFactor[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->untracked_kickoutFOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"untracked_kickoutFOM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->combineClusters)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"combineClusters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->combineClusters_kickoutFOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"combineClusters_kickoutFOM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->combineClusters_thresh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"combineClusters_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->combineClusters_maxN)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"combineClusters_maxN=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->combineMaxDist)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"combineMaxDist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->matchMaker)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"matchMaker=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->matchMakerMaxDist)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"matchMakerMaxDist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->matchMaker_kickoutFOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"matchMaker_kickoutFOM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->singlesFOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"singlesFOM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->markSingleHitRange)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"markSingleHitRange=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->singleHitRange)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"singleHitRange[16384]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->singleHitRangeFOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"singleHitRangeFOM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackOps)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trackOps[9]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jumpGroupLength)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"jumpGroupLength[9]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badTheoAngPenalty)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"badTheoAngPenalty=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackStat */
static void G__setup_memvarTrackStat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackStat));
   { TrackStat *p; p=(TrackStat*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nEvents)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"nEvents=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackGetCalls)-(long)(p)),108,0,0,-1,-1,-1,1,"trackGetCalls=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nHit[164]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackPassCnt)-(long)(p)),108,0,0,-1,-1,-1,1,"trackPassCnt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackingCalls)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"trackingCalls=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackError)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"trackError[6][30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->firstClusterTrackCalls)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"firstClusterTrackCalls=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackFOMokay)-(long)(p)),108,0,0,-1,-1,-1,1,"trackFOMokay=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->permHit)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"permHit[9][362880]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reClusterReturns)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"reClusterReturns[2][30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reClusterTrackCalls)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"reClusterTrackCalls[2][30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->splitClusterReturns)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"splitClusterReturns[2][30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->splitClusterTrackCalls)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"splitClusterTrackCalls[2][30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->combineClusterReturns)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"combineClusterReturns[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->combineClusterTrackCalls)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"combineClusterTrackCalls[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->matchMakerReturns)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"matchMakerReturns[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->matchMakerTrackCalls)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"matchMakerTrackCalls[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->singleHitOutOfRange)-(long)(p)),110,0,0,-1,-1,-1,1,"singleHitOutOfRange=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badNDetELim)-(long)(p)),110,0,0,-1,-1,-1,1,"badNDetELim=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumFOM)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumFOM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumFOM_NT)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"sumFOM_NT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nSumFOM_NT)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nSumFOM_NT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nClusters)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"nClusters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->notTracked)-(long)(p)),108,0,0,-1,-1,-1,1,"notTracked=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPerm)-(long)(p)),108,0,0,-1,-1,-1,1,"nPerm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->doubleSegHits)-(long)(p)),108,0,0,-1,-1,-1,1,"doubleSegHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segHits)-(long)(p)),108,0,0,-1,-1,-1,1,"segHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->numInputDataLines)-(long)(p)),108,0,0,-1,-1,-1,1,"numInputDataLines=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->goodTrack)-(long)(p)),108,0,0,-1,-1,-1,1,"goodTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badTrack)-(long)(p)),108,0,0,-1,-1,-1,1,"badTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->noTrueClusters)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"noTrueClusters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nDetTooLarge)-(long)(p)),110,0,0,-1,-1,-1,1,"nDetTooLarge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fullEnergyEv)-(long)(p)),110,0,0,-1,-1,-1,1,"fullEnergyEv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->comptonLossEnergyEv)-(long)(p)),110,0,0,-1,-1,-1,1,"comptonLossEnergyEv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammasForOutput)-(long)(p)),110,0,0,-1,-1,-1,1,"gammasForOutput=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammasForOutputOK1)-(long)(p)),110,0,0,-1,-1,-1,1,"gammasForOutputOK1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammasForOutputOK2)-(long)(p)),110,0,0,-1,-1,-1,1,"gammasForOutputOK2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammasWritten)-(long)(p)),110,0,0,-1,-1,-1,1,"gammasWritten=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackedEventsWritten)-(long)(p)),110,0,0,-1,-1,-1,1,"trackedEventsWritten=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackPerm */
static void G__setup_memvarTrackPerm(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm));
   { TrackPerm *p; p=(TrackPerm*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nPerm)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nPerm[9]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lookup)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"lookup[9][362880][9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Track */
static void G__setup_memvarTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_Track));
   { Track *p; p=(Track*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->shell)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TrackShell),-1,-1,1,"shell=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->clust)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster),-1,-1,1,"clust[200]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stat)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TrackStat),-1,-1,1,"stat=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ctrl)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl),-1,-1,1,"ctrl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->perm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm),-1,-1,1,"perm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->targetPos)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"targetPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nClusters)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nClusters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->faculty)-(long)(p)),110,0,0,-1,-1,-1,1,"faculty[20]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* controlVariables */
static void G__setup_memvarcontrolVariables(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_controlVariables));
   { controlVariables *p; p=(controlVariables*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->doTRACK)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"doTRACK=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->withWAVE)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"withWAVE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->withSEG)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"withSEG=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->withHISTOS)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"withHISTOS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->withTREE)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"withTREE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dopplerSimple)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"dopplerSimple=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startRun)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"startRun=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fileType)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"fileType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fileName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"fileName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outputSuffix)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"outputSuffix=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outfileName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"outfileName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->directory)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"directory=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outputON)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"outputON=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outputName)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"outputName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->outputFileName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"outputFileName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->compressedFile)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"compressedFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->compressedFileB)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"compressedFileB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->noHFC)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"noHFC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->suppressTS)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"suppressTS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pgh)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pgh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->noEB)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"noEB=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calibration)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"calibration=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->specifyCalibration)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"specifyCalibration=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calibrationFile)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"calibrationFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xtalkAnalysis)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"xtalkAnalysis=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xtalkID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"xtalkID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xtLowE)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"xtLowE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xtHighE)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"xtHighE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->superPulse)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"superPulse=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->spLowE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"spLowE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->spHighE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"spHighE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->spXtalkFile)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"spXtalkFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->spCalibDirectory)-(long)(p)),67,0,0,-1,-1,-1,1,"spCalibDirectory=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->INLcorrection)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"INLcorrection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->INLCConly)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"INLCConly=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->digMapFileName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"digMapFileName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gateTree)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"gateTree=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mode2Old)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"mode2Old=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WITH_TRACETREE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"WITH_TRACETREE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CHECK_PILEUP)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"CHECK_PILEUP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FALLON_TIME)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"FALLON_TIME=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LEDCROSSING)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"LEDCROSSING=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FIT_BASELINE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"FIT_BASELINE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PZ_BASELINE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"PZ_BASELINE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PZ_ZERO_BASELINE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"PZ_ZERO_BASELINE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RADFORD_BASELINE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"RADFORD_BASELINE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RADFORD_ENERGY)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"RADFORD_ENERGY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->GREGORICH_ENERGY)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"GREGORICH_ENERGY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->POLEZERO_TRACE)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"POLEZERO_TRACE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FPGA_ENERGY)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"FPGA_ENERGY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BASIC_ENERGY)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"BASIC_ENERGY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->INL_CORRECT)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"INL_CORRECT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->analyze2AND3)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"analyze2AND3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fileName2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"fileName2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s800File)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"s800File=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s800ControlFile)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"s800ControlFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s800VariableFile)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TString),-1,-1,1,"s800VariableFile=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->S800_DIAG)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"S800_DIAG=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E1_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"E1_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E1_CAL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"E1_CAL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E2_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"E2_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E2_CAL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"E2_CAL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E3_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"E3_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->E3_CAL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"E3_CAL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IC_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IC_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IC_CAL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IC_CAL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IC_SUMS)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IC_SUMS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CRDC1_RAW_PADS)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"CRDC1_RAW_PADS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CRDC1_RAW_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"CRDC1_RAW_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CRDC1_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"CRDC1_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CRDC2_RAW_PADS)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"CRDC2_RAW_PADS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CRDC2_RAW_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"CRDC2_RAW_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CRDC2_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"CRDC2_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FP_TRACK_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"FP_TRACK_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FP_TRACK_COR)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"FP_TRACK_COR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HODO_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HODO_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HODO_CAL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"HODO_CAL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TARGET_PPAC_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TARGET_PPAC_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TARGET_PPAC_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TARGET_PPAC_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TARGET_PIN1_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TARGET_PIN1_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TARGET_PIN1_CAL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TARGET_PIN1_CAL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TARGET_PIN2_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TARGET_PIN2_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TARGET_PIN2_CAL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TARGET_PIN2_CAL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TARGET_TOTAL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TARGET_TOTAL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_TPPAC1_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_TPPAC1_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_TPPAC1_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_TPPAC1_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_TPPAC2_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_TPPAC2_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_TPPAC2_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_TPPAC2_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_TRACK)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_TRACK=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_PPAC1_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_PPAC1_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_PPAC1_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_PPAC1_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_PPAC2_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_PPAC2_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IMAGE_PPAC2_CALC)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IMAGE_PPAC2_CALC=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->OBJECT_PIN_RAW)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"OBJECT_PIN_RAW=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->OBJECT_PIN_CAL)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"OBJECT_PIN_CAL=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TRIGGER)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TRIGGER=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->S800_TIMESTAMP)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"S800_TIMESTAMP=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TOF)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"TOF=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* counterVariables */
static void G__setup_memvarcounterVariables(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_counterVariables));
   { counterVariables *p; p=(counterVariables*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->event)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"event=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"runNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TSFirst)-(long)(p)),110,0,0,-1,-1,-1,1,"TSFirst=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TSLast)-(long)(p)),110,0,0,-1,-1,-1,1,"TSLast=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->headerType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"headerType[100]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TSerrors)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"TSerrors=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bytes_read)-(long)(p)),110,0,0,-1,-1,-1,1,"bytes_read=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bytes_read_since_last_time)-(long)(p)),110,0,0,-1,-1,-1,1,"bytes_read_since_last_time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MBread)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"MBread=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eoBuffer)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"eoBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eofInBuffer)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eofInBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eofPosInBuffer)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"eofPosInBuffer=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mode3i)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"mode3i=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->b29i)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"b29i=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->old3Bytes)-(long)(p)),110,0,0,-1,-1,-1,1,"old3Bytes=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badEvent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"badEvent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badSegment)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"badSegment=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badCC1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"badCC1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badCC2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"badCC2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->goodTraceE_PU)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"goodTraceE_PU[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->goodTraceE)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"goodTraceE[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badFPGA_zero_PU)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"badFPGA_zero_PU[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badFPGA_zero)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"badFPGA_zero[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badFPGA_neg_PU)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"badFPGA_neg_PU[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badFPGA_neg)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"badFPGA_neg[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crystalBuildEvent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystalBuildEvent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crystalBuildEventXtal)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystalBuildEventXtal[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totalCrystalEvent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"totalCrystalEvent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->totalCrystalEventXtal)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"totalCrystalEventXtal[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tossed4Time)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tossed4Time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lastBdTS)-(long)(p)),110,0,0,-1,-1,-1,1,"lastBdTS[480]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nGammasThisHeader)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nGammasThisHeader=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nGammasRead)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nGammasRead=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nMode3Skipped)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nMode3Skipped[120][41]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nMode3SkippedAtEnd)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nMode3SkippedAtEnd[120][41]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nMode2NoTraces)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nMode2NoTraces[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nMode3NoMode2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nMode3NoMode2[120]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GRETINA */
static void G__setup_memvarGRETINA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_GRETINA));
   { GRETINA *p; p=(GRETINA*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->rot)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix),-1,-1,1,"rot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse),-1,-1,1,"sp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g1X)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent),-1,-1,1,"g1X=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g2X)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent),-1,-1,1,"g2X=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt),-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g3X)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent),-1,-1,1,"g3X=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g3ch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent),-1,-1,1,"g3ch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g3Temp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR),G__defined_typename("vector<g3ChannelEvent>"),-1,1,"g3Temp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gH)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_historyEvent),-1,-1,1,"gH=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gBuf)-(long)(p)),98,0,0,-1,-1,-1,1,"gBuf[1048576]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g3H)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent),-1,-1,1,"g3H=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g3out)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g3OUT),-1,-1,1,"g3out=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g2out)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g2OUT),-1,-1,1,"g2out=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->g1out)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g1OUT),-1,-1,1,"g1out=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gSimOut)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT),-1,-1,1,"gSimOut=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->b29)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_Bank29),-1,-1,1,"b29=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->track)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_Track),-1,-1,1,"track=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gHist)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_gHistos),-1,-1,1,"gHist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xA)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xA[36]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yA)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"yA[36]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zA)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"zA[36]=",0,"Segment centers */");
   G__memvar_setup((void*)((long)(&p->xB)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xB[36]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yB)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"yB[36]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zB)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"zB[36]=",0,"Segment centers */");
   G__memvar_setup((void*)((long)(&p->cloverModuleNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"cloverModuleNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cloverSlope)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cloverSlope[40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cloverOffset)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cloverOffset[40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wfMinCrossTime)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"wfMinCrossTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wfMaxCrossTime)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"wfMaxCrossTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->QNormal)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"QNormal[4][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Q1Special)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Q1Special[4][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Q2Special)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Q2Special[4][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scalerBuf)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"scalerBuf[8192]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* rotationMatrix */
static void G__setup_memvarrotationMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix));
   { rotationMatrix *p; p=(rotationMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->crmat)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"crmat[31][4][4][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GRETINAVariables */
static void G__setup_memvarGRETINAVariables(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_GRETINAVariables));
   { GRETINAVariables *p; p=(GRETINAVariables*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->hole)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"hole[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->electronicsOrder)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"electronicsOrder[30]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"beta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->targetXYZ)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"targetXYZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->radiusCor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"radiusCor[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ataCor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ataCor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->btaCor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"btaCor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ehiGeOffset)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ehiGeOffset[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ehiGeGain)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ehiGeGain[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dnlLU)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dnlLU[4800][5000]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dinoFactor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dinoFactor[120][40][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minCrossTime)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"minCrossTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxCrossTime)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxCrossTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Q1Special)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Q1Special[4][36]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Q2Special)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Q2Special[4][36]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->QSegmentOrder)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"QSegmentOrder[4][36]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CrystalAPositions)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CrystalAPositions[3][36]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CrystalBPositions)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"CrystalBPositions[3][36]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* globalHeader */
static void G__setup_memvarglobalHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_globalHeader));
   { globalHeader *p; p=(globalHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->length)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"length=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mode3DataPacket */
static void G__setup_memvarmode3DataPacket(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode3DataPacket));
   { mode3DataPacket *p; p=(mode3DataPacket*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->aahdr)-(long)(p)),114,0,0,-1,-1,-1,1,"aahdr[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hdr)-(long)(p)),114,0,0,-1,-1,-1,1,"hdr[14]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->waveform)-(long)(p)),114,0,0,-1,-1,-1,1,"waveform[3000]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* g3Waveform */
static void G__setup_memvarg3Waveform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform));
   { g3Waveform *p; p=(g3Waveform*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->raw)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"raw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"pz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* g3ChannelEvent */
static void G__setup_memvarg3ChannelEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent));
   { g3ChannelEvent *p; p=(g3ChannelEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->hdr0)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"hdr0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hdr1)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"hdr1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hdr7)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"hdr7=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"segNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eRaw)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eRaw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eCal)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eCal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eCalPO)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eCalPO=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->prevE1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"prevE1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->prevE2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"prevE2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaT1)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"deltaT1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaT2)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"deltaT2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PZrollover)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"PZrollover=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eCalc)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"eCalc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calcTime)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"calcTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CFDtimestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"CFDtimestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->baseline)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"baseline=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->riseTime)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"riseTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform),-1,-1,1,"wf=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* g3CrystalEvent */
static void G__setup_memvarg3CrystalEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent));
   { g3CrystalEvent *p; p=(g3CrystalEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->crystalNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystalNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quadNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"quadNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->module)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"module=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->runNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"runNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dopplerSeg)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dopplerSeg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dopplerCrystal)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dopplerCrystal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->traceLength)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"traceLength=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segSum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"segSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segSumTimed)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"segSumTimed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segSumTimed2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"segSumTimed2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR),G__defined_typename("vector<g3ChannelEvent>"),-1,1,"chn=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<g3ChannelEvent,allocator<g3ChannelEvent> > */
static void G__setup_memvarvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   { vector<g3ChannelEvent,allocator<g3ChannelEvent> > *p; p=(vector<g3ChannelEvent,allocator<g3ChannelEvent> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* g3OUT */
static void G__setup_memvarg3OUT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3OUT));
   { g3OUT *p; p=(g3OUT*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->xtals)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR),G__defined_typename("vector<g3CrystalEvent>"),-1,1,"xtals=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<g3CrystalEvent,allocator<g3CrystalEvent> > */
static void G__setup_memvarvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   { vector<g3CrystalEvent,allocator<g3CrystalEvent> > *p; p=(vector<g3CrystalEvent,allocator<g3CrystalEvent> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* mode3HistoryPacket */
static void G__setup_memvarmode3HistoryPacket(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode3HistoryPacket));
   { mode3HistoryPacket *p; p=(mode3HistoryPacket*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->aahdr)-(long)(p)),114,0,0,-1,-1,-1,1,"aahdr[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hdr)-(long)(p)),114,0,0,-1,-1,-1,1,"hdr[8]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),114,0,0,-1,-1,-1,1,"data[3000]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* historyEvent */
static void G__setup_memvarhistoryEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_historyEvent));
   { historyEvent *p; p=(historyEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"energy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TS)-(long)(p)),110,0,0,-1,-1,-1,1,"TS=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* g3HistoryEvent */
static void G__setup_memvarg3HistoryEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent));
   { g3HistoryEvent *p; p=(g3HistoryEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->past)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR),G__defined_typename("vector<historyEvent>"),-1,1,"past=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Bank29 */
static void G__setup_memvarBank29(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_Bank29));
   { Bank29 *p; p=(Bank29*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->chn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR),G__defined_typename("vector<g3ChannelEvent>"),-1,1,"chn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wfCFD)-(long)(p)),110,0,0,-1,-1,-1,1,"wfCFD=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ip */
static void G__setup_memvarip(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_ip));
   { ip *p; p=(ip*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e=",0,"Here, e refers to the fraction. */");
   G__memvar_setup((void*)((long)(&p->seg)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"seg=",0,"Segment hit. */");
   G__memvar_setup((void*)((long)(&p->seg_energy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"seg_energy=",0,"Energy of hit segment. */");
   }
   G__tag_memvar_reset();
}


   /* ipOLD */
static void G__setup_memvaripOLD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_ipOLD));
   { ipOLD *p; p=(ipOLD*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mode2Old */
static void G__setup_memvarmode2Old(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode2Old));
   { mode2Old *p; p=(mode2Old*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crystal_id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystal_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tot_e)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tot_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"t0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chisq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->norm_chisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"norm_chisq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->intpts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_ipOLD),-1,-1,1,"intpts[16]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mode2ABCD1234 */
static void G__setup_memvarmode2ABCD1234(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD1234));
   { mode2ABCD1234 *p; p=(mode2ABCD1234*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crystal_id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystal_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tot_e)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tot_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trig_time)-(long)(p)),110,0,0,-1,-1,-1,1,"trig_time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"t0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cfd)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cfd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chisq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->norm_chisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"norm_chisq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->baseline)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"baseline=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pad)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pad=",0,"To ensure 8-byte alignment of struct. */");
   G__memvar_setup((void*)((long)(&p->intpts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_ip),-1,-1,1,"intpts[16]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mode2ABCD5678 */
static void G__setup_memvarmode2ABCD5678(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD5678));
   { mode2ABCD5678 *p; p=(mode2ABCD5678*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crystal_id)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystal_id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tot_e)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"tot_e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->core_e)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"core_e[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trig_time)-(long)(p)),110,0,0,-1,-1,-1,1,"trig_time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"t0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cfd)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cfd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chisq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->norm_chisq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"norm_chisq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->baseline)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"baseline=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->prestep)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"prestep=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->poststep)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"poststep=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pad)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->intpts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_ip),-1,-1,1,"intpts[16]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* g2IntPt */
static void G__setup_memvarg2IntPt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt));
   { g2IntPt *p; p=(g2IntPt*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->segNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"segNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"xyz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyzLab)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"xyzLab=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyzLabSeg)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"xyzLabSeg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyzLabCrys)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"xyzLabCrys=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"segE=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* g2CrystalEvent */
static void G__setup_memvarg2CrystalEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent));
   { g2CrystalEvent *p; p=(g2CrystalEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->crystalID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystalID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crystalNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystalNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->quadNum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"quadNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"t0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chiSq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chiSq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normChiSq)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"normChiSq=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bl)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"bl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->error)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"error=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cc1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cc2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc3)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cc3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc4)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cc4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segSum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"segSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->doppler)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"doppler=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dopplerSeg)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dopplerSeg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dopplerCrystal)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"dopplerCrystal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->intpts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR),G__defined_typename("vector<g2IntPt>"),-1,1,"intpts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->waveAll)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<Short_t>"),-1,1,"waveAll=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<g2IntPt,allocator<g2IntPt> > */
static void G__setup_memvarvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   { vector<g2IntPt,allocator<g2IntPt> > *p; p=(vector<g2IntPt,allocator<g2IntPt> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* g2OUT */
static void G__setup_memvarg2OUT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g2OUT));
   { g2OUT *p; p=(g2OUT*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->runNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"runNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xtals)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR),G__defined_typename("vector<g2CrystalEvent>"),-1,1,"xtals=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<g2CrystalEvent,allocator<g2CrystalEvent> > */
static void G__setup_memvarvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   { vector<g2CrystalEvent,allocator<g2CrystalEvent> > *p; p=(vector<g2CrystalEvent,allocator<g2CrystalEvent> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* trackedGamma */
static void G__setup_memvartrackedGamma(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma));
   { trackedGamma *p; p=(trackedGamma*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->esum)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"esum=",0,"gamma ray energy */");
   G__memvar_setup((void*)((long)(&p->ndet)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ndet=",0,"number of interactions */");
   G__memvar_setup((void*)((long)(&p->fom)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fom=",0,"figure of merit */");
   G__memvar_setup((void*)((long)(&p->tracked)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tracked=",0,"tracked == 1 if successful */");
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,"timestamp of first interaction point */");
   G__memvar_setup((void*)((long)(&p->x0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e0=",0,"first interaction point */");
   G__memvar_setup((void*)((long)(&p->x1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e1=",0,"second interaction point */");
   }
   G__tag_memvar_reset();
}


   /* GTrackEvent */
static void G__setup_memvarGTrackEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_GTrackEvent));
   { GTrackEvent *p; p=(GTrackEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->obj)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR),G__defined_typename("vector<trackedGamma>"),-1,1,"obj=",0,"[mult]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<trackedGamma,allocator<trackedGamma> > */
static void G__setup_memvarvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   { vector<trackedGamma,allocator<trackedGamma> > *p; p=(vector<trackedGamma,allocator<trackedGamma> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* g1GammaEvent */
static void G__setup_memvarg1GammaEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent));
   { g1GammaEvent *p; p=(g1GammaEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->tracked)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tracked=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FOM)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"FOM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nIntPts)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nIntPts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"cc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->doppler)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"doppler=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyzLab1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"xyzLab1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyzLab2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TVector3),-1,-1,1,"xyzLab2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"t0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* g1OUT */
static void G__setup_memvarg1OUT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g1OUT));
   { g1OUT *p; p=(g1OUT*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->gammas)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR),G__defined_typename("vector<g1GammaEvent>"),-1,1,"gammas=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<g1GammaEvent,allocator<g1GammaEvent> > */
static void G__setup_memvarvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   { vector<g1GammaEvent,allocator<g1GammaEvent> > *p; p=(vector<g1GammaEvent,allocator<g1GammaEvent> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* g4Sim_emittedGamma */
static void G__setup_memvarg4Sim_emittedGamma(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_emittedGamma));
   { g4Sim_emittedGamma *p; p=(g4Sim_emittedGamma*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"beta=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* g4Sim_abcd1234 */
static void G__setup_memvarg4Sim_abcd1234(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_abcd1234));
   { g4Sim_abcd1234 *p; p=(g4Sim_abcd1234*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->num)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"num=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->full)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"full=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammas)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_emittedGamma),-1,-1,1,"gammas[10]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* g4SimOUT */
static void G__setup_memvarg4SimOUT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT));
   { g4SimOUT *p; p=(g4SimOUT*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sim)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR),G__defined_typename("vector<g4Sim_abcd1234>"),-1,1,"sim=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* gHistos */
static void G__setup_memvargHistos(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_gHistos));
   { gHistos *p; p=(gHistos*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->xtalkThresh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"xtalkThresh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eRaw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"eRaw[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eCal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"eCal[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult2Pair)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult2Pair[40][40]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SuperPulse */
static void G__setup_memvarSuperPulse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse));
   { SuperPulse *p; p=(SuperPulse*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->CFD_INT_LEN)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"CFD_INT_LEN=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CFD_DELAY)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"CFD_DELAY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CFD_FRACTION)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"CFD_FRACTION=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TR_SCALE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"TR_SCALE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ehiGeOffset)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ehiGeOffset[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ehiGeGain)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ehiGeGain[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trGain)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"trGain[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->map)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"map[120][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->delay1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"delay1[120][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lowE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"lowE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->highE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"highE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trLength)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"trLength=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mult[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crystalBuild)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystalBuild[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ccE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ccE[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segE)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"segE[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->netSeg)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"netSeg[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segEventIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"segEventIndex[120][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segsNet)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"segsNet[120][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segs)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"segs[120][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->data4net)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"data4net[120][36]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gain)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"gain[120][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->waves)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"waves[120][40][2048]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->averageTrace)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"averageTrace[120][40][4096]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->averageTraceINT)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"averageTraceINT[120][40][4096]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* INLCorrection */
static void G__setup_memvarINLCorrection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_INLCorrection));
   { INLCorrection *p; p=(INLCorrection*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->crystalSN)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"crystalSN[120][4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inl)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"inl[120][40][8192]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->enl)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"enl[120][40][3][8192]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lastCalcBase)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"lastCalcBase[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->restingBase)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"restingBase[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Q)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Q[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigmaBase)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sigmaBase[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->baseSamples)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"baseSamples[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Histos */
static void G__setup_memvarHistos(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_Histos));
   { Histos *p; p=(Histos*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->cc1cal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"cc1cal[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc2cal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"cc2cal[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc3cal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"cc3cal[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc4cal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"cc4cal[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ccTot)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"ccTot[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ccDop)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"ccDop[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ccSummary)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"ccSummary=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ccDopSummary)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"ccDopSummary=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ccHit)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"ccHit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ggMat)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"ggMat=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ggMatDop)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"ggMatDop=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->baseVsE)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"baseVsE[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bankTSdiff)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1I),-1,-1,1,"bankTSdiff[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bankTSlow)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1I),-1,-1,1,"bankTSlow[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bankTShigh)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1I),-1,-1,1,"bankTShigh[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyProj)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"xyProj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xzProj)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"xzProj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yzProj)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"yzProj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyz)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH3F),-1,-1,1,"xyz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thetaPhi)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"thetaPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thetaE)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"thetaE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thetaEDop)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"thetaEDop=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiVsE)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"phiVsE[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2VsXtal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"chi2VsXtal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaT)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"deltaT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->test)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"test=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eraw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"eraw[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"ecal[4800]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc1All)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"cc1All=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc2All)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"cc2All=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc3All)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"cc3All=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc4All)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"cc4All=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc1Summary)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"cc1Summary=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc2Summary)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"cc2Summary=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc3Summary)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"cc3Summary=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cc4Summary)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"cc4Summary=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xtalSummary)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"xtalSummary[120]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->smoke)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"smoke[112]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->erawXT)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"erawXT[40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalXT)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"ecalXT[40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult1Singles)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult1Singles[40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult2Pair)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult2Pair[40][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult2Pair_2D)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"mult2Pair_2D[40][40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult1CC)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH2F),-1,-1,1,"mult1CC[40]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult3)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult4)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult5)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult1cal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult1cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult2cal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult2cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult3cal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult3cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult4cal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult4cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult5cal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"mult5cal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segMult)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"segMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segSum)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"segSum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->segSumCal)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TH1F),-1,-1,1,"segSumCal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GRETINADictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<g3Waveform,allocator<g3Waveform> > */
static void G__setup_memvarvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   { vector<g3Waveform,allocator<g3Waveform> > *p; p=(vector<g3Waveform,allocator<g3Waveform> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<ip,allocator<ip> > */
static void G__setup_memvarvectorlEipcOallocatorlEipgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   { vector<ip,allocator<ip> > *p; p=(vector<ip,allocator<ip> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGRETINADict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncPM(void) {
   /* PM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_PM));
   // automatic default constructor
   G__memfunc_setup("PM", 157, G__GRETINADict_494_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_PM), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PM", 157, G__GRETINADict_494_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_PM), -1, 0, 1, 1, 1, 0, "u 'PM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PM", 283, G__GRETINADict_494_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_494_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_PM), -1, 1, 1, 1, 1, 0, "u 'PM' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackClusterIP(void) {
   /* TrackClusterIP */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP));
   G__memfunc_setup("xx",240,G__GRETINADict_495_0_1, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__GRETINADict_495_0_2, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__GRETINADict_495_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_495_0_4, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackClusterIP::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_495_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackClusterIP::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_495_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackClusterIP::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_495_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackClusterIP::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_495_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_495_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackClusterIP::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_495_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackClusterIP::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_495_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackClusterIP::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_495_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackClusterIP::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TrackClusterIP", 1392, G__GRETINADict_495_0_16, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackClusterIP", 1392, G__GRETINADict_495_0_17, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP), -1, 0, 1, 1, 1, 0, "u 'TrackClusterIP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackClusterIP", 1518, G__GRETINADict_495_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_495_0_19, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_TrackClusterIP), -1, 1, 1, 1, 1, 0, "u 'TrackClusterIP' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackCluster(void) {
   /* TrackCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster));
   G__memfunc_setup("findFOM",643,G__GRETINADict_496_0_1, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TVector3' - 0 - targetPos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findComptonAngle",1640,G__GRETINADict_496_0_2, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - eg f - 'Float_t' 0 - ee "
"F - 'Float_t' 0 - thc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortSegEnergies",1561,G__GRETINADict_496_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__GRETINADict_496_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__GRETINADict_496_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintCluster",1263,G__GRETINADict_496_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_496_0_7, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_496_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_496_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_496_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_496_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_496_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_496_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_496_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_496_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackCluster::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TrackCluster", 1239, G__GRETINADict_496_0_19, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackCluster", 1239, G__GRETINADict_496_0_20, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster), -1, 0, 1, 1, 1, 0, "u 'TrackCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackCluster", 1365, G__GRETINADict_496_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_496_0_22, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_TrackCluster), -1, 1, 1, 1, 1, 0, "u 'TrackCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackShell(void) {
   /* TrackShell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackShell));
   G__memfunc_setup("xx",240,G__GRETINADict_497_0_1, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__GRETINADict_497_0_2, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__GRETINADict_497_0_3, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nxx",350,G__GRETINADict_497_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nyy",352,G__GRETINADict_497_0_5, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nzz",354,G__GRETINADict_497_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("relAngle",810,G__GRETINADict_497_0_7, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("polAngle",818,G__GRETINADict_497_0_8, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("aziAngle",811,G__GRETINADict_497_0_9, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__GRETINADict_497_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintClusters",1378,G__GRETINADict_497_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_497_0_12, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackShell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_497_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackShell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_497_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackShell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_497_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackShell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_497_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_497_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackShell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_497_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackShell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_497_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackShell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_497_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackShell::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TrackShell", 1005, G__GRETINADict_497_0_24, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackShell), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackShell", 1005, G__GRETINADict_497_0_25, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackShell), -1, 0, 1, 1, 1, 0, "u 'TrackShell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackShell", 1131, G__GRETINADict_497_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_497_0_27, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_TrackShell), -1, 1, 1, 1, 1, 0, "u 'TrackShell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackCtrl(void) {
   /* TrackCtrl */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl));
   G__memfunc_setup("ReadChatFile",1148,G__GRETINADict_498_0_1, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckNumArgs",1179,G__GRETINADict_498_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - required i - 'Int_t' 0 - actual "
"C - - 0 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("strDecomp",945,G__GRETINADict_498_0_3, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 0 - str i - 'Int_t' 0 - dim "
"I - 'Int_t' 0 - yy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintPartial",1242,G__GRETINADict_498_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trackOpt",840,G__GRETINADict_498_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_498_0_6, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackCtrl::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_498_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCtrl::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_498_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackCtrl::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_498_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackCtrl::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_498_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_498_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCtrl::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_498_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackCtrl::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_498_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCtrl::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_498_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackCtrl::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TrackCtrl", 906, G__GRETINADict_498_0_18, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackCtrl", 906, G__GRETINADict_498_0_19, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl), -1, 0, 1, 1, 1, 0, "u 'TrackCtrl' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackCtrl", 1032, G__GRETINADict_498_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_498_0_21, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_TrackCtrl), -1, 1, 1, 1, 1, 0, "u 'TrackCtrl' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackStat(void) {
   /* TrackStat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackStat));
   G__memfunc_setup("Zero",416,G__GRETINADict_499_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_499_0_2, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackStat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_499_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackStat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_499_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackStat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_499_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackStat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_499_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_499_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackStat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_499_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackStat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_499_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackStat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_499_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackStat::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TrackStat", 913, G__GRETINADict_499_0_14, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackStat), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackStat", 913, G__GRETINADict_499_0_15, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackStat), -1, 0, 1, 1, 1, 0, "u 'TrackStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackStat", 1039, G__GRETINADict_499_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_499_0_17, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_TrackStat), -1, 1, 1, 1, 1, 0, "u 'TrackStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackPerm(void) {
   /* TrackPerm */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm));
   G__memfunc_setup("Initialize",1042,G__GRETINADict_500_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_500_0_2, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackPerm::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_500_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackPerm::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_500_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackPerm::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_500_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackPerm::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_500_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_500_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackPerm::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_500_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackPerm::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_500_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackPerm::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_500_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackPerm::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TrackPerm", 905, G__GRETINADict_500_0_14, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackPerm", 905, G__GRETINADict_500_0_15, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm), -1, 0, 1, 1, 1, 0, "u 'TrackPerm' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackPerm", 1031, G__GRETINADict_500_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_500_0_17, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_TrackPerm), -1, 1, 1, 1, 1, 0, "u 'TrackPerm' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrack(void) {
   /* Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_Track));
   G__memfunc_setup("Track",501,G__GRETINADict_501_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_Track), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__GRETINADict_501_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findTargetPos",1338,G__GRETINADict_501_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findClusters",1270,G__GRETINADict_501_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transferClusters",1722,G__GRETINADict_501_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trackEvent",1047,G__GRETINADict_501_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doTrack",712,G__GRETINADict_501_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - mode i - 'Int_t' 0 - iClust", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reCluster",953,G__GRETINADict_501_0_8, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ii i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("splitCluster",1294,G__GRETINADict_501_0_9, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ii i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("combineCluster",1471,G__GRETINADict_501_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - focusC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matchMaker",1021,G__GRETINADict_501_0_11, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ii i - 'Int_t' 0 - jj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintValidClusters",1874,G__GRETINADict_501_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_501_0_13, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_501_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_501_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_501_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_501_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_501_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_501_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_501_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_501_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Track", 501, G__GRETINADict_501_0_25, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_Track), -1, 0, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__GRETINADict_501_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_501_0_27, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_Track), -1, 1, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunccontrolVariables(void) {
   /* controlVariables */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_controlVariables));
   G__memfunc_setup("controlVariables",1690,G__GRETINADict_547_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_controlVariables), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__GRETINADict_547_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpretCommandLine",2052,G__GRETINADict_547_0_3, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - - 0 - argc C - - 2 - argv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReportRunFlags",1438,G__GRETINADict_547_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetS800Controls",1387,G__GRETINADict_547_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_547_0_6, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&controlVariables::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_547_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&controlVariables::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_547_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&controlVariables::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_547_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&controlVariables::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_547_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_547_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&controlVariables::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_547_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&controlVariables::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_547_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&controlVariables::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_547_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&controlVariables::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("controlVariables", 1690, G__GRETINADict_547_0_18, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_controlVariables), -1, 0, 1, 1, 1, 0, "u 'controlVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~controlVariables", 1816, G__GRETINADict_547_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_547_0_20, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_controlVariables), -1, 1, 1, 1, 1, 0, "u 'controlVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunccounterVariables(void) {
   /* counterVariables */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_counterVariables));
   G__memfunc_setup("counterVariables",1689,G__GRETINADict_548_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_counterVariables), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__GRETINADict_548_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetRunCounters",1675,G__GRETINADict_548_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintRunStatistics",1901,G__GRETINADict_548_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - pgh i - 'Int_t' 0 - withWAVE "
"i - 'Int_t' 0 - superPulse i - 'Int_t' 0 - sort2and3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Increment",933,G__GRETINADict_548_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bytes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventBit",1133,G__GRETINADict_548_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventBit",1121,G__GRETINADict_548_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_548_0_8, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&counterVariables::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_548_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&counterVariables::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_548_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&counterVariables::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_548_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&counterVariables::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_548_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_548_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&counterVariables::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_548_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&counterVariables::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_548_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&counterVariables::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_548_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&counterVariables::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("counterVariables", 1689, G__GRETINADict_548_0_20, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_counterVariables), -1, 0, 1, 1, 1, 0, "u 'counterVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~counterVariables", 1815, G__GRETINADict_548_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_548_0_22, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_counterVariables), -1, 1, 1, 1, 1, 0, "u 'counterVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGRETINA(void) {
   /* GRETINA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_GRETINA));
   G__memfunc_setup("GRETINA",522,G__GRETINADict_550_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_GRETINA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__GRETINADict_550_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__GRETINADict_550_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDopplerSimple",1664,G__GRETINADict_550_0_4, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"u 'TVector3' - 0 - xyz f - 'Float_t' 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMode3",760,G__GRETINADict_550_0_5, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"E - - 0 - inf i - 'Int_t' 0 - evtLength "
"U 'counterVariables' - 0 - cnt U 'controlVariables' - 0 - ctrl "
"U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMode3History",1514,G__GRETINADict_550_0_6, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"E - - 0 - inf i - 'Int_t' 0 - evtLength "
"n - - 0 - hTS U 'counterVariables' - 0 - cnt "
"U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMode2",759,G__GRETINADict_550_0_7, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"E - - 0 - inf i - 'Int_t' 0 - evtLength "
"U 'GRETINAVariables' - 0 - gVar U 'counterVariables' - 0 - cnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMode1",758,G__GRETINADict_550_0_8, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"E - - 0 - inf U 'GRETINAVariables' - 0 - gVar "
"U 'counterVariables' - 0 - cnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSimulated",1256,G__GRETINADict_550_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "E - - 0 - inf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScaler",922,G__GRETINADict_550_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"E - - 0 - inf i - 'Int_t' 0 - evtLength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBank29",807,G__GRETINADict_550_0_11, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"E - - 0 - inf i - 'Int_t' 0 - evtLength "
"U 'counterVariables' - 0 - cnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyzeMode2",1195,G__GRETINADict_550_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'g2CrystalEvent' - 0 - g2 U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calibrateMode2CC",1508,G__GRETINADict_550_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - crystal U 'mode2ABCD5678' - 0 - g2 "
"U 'g2CrystalEvent' - 0 - g2crystal U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyzeMode3",1196,G__GRETINADict_550_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'GRETINAVariables' - 0 - gVar U 'controlVariables' - 0 - ctrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calibrateMode3",1375,G__GRETINADict_550_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'g3ChannelEvent' - 0 - g3 U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calibrateMode3SP",1538,G__GRETINADict_550_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'g3ChannelEvent' - 0 - g3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHistos",1057,G__GRETINADict_550_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ctrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkSPIntegrity",1632,G__GRETINADict_550_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillShell2Track",1478,G__GRETINADict_550_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMode1",861,G__GRETINADict_550_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - trackStatus U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printSegCenters",1568,G__GRETINADict_550_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_550_0_22, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GRETINA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_550_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GRETINA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_550_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GRETINA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_550_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GRETINA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_550_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_550_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GRETINA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_550_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GRETINA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_550_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GRETINA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_550_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GRETINA::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GRETINA", 522, G__GRETINADict_550_0_34, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_GRETINA), -1, 0, 1, 1, 1, 0, "u 'GRETINA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GRETINA", 648, G__GRETINADict_550_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_550_0_36, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_GRETINA), -1, 1, 1, 1, 1, 0, "u 'GRETINA' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncrotationMatrix(void) {
   /* rotationMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix));
   G__memfunc_setup("rotationMatrix",1509,G__GRETINADict_551_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotationMatrix",1509,G__GRETINADict_551_0_2, 105, G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadMatrix",1009,G__GRETINADict_551_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("crys2Lab",770,G__GRETINADict_551_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_TVector3), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - crystalID u 'TVector3' - 0 - xyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_551_0_5, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&rotationMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_551_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rotationMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_551_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&rotationMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_551_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&rotationMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_551_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_551_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rotationMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_551_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rotationMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_551_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&rotationMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_551_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&rotationMatrix::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("rotationMatrix", 1509, G__GRETINADict_551_0_17, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix), -1, 0, 1, 1, 1, 0, "u 'rotationMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~rotationMatrix", 1635, G__GRETINADict_551_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_551_0_19, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_rotationMatrix), -1, 1, 1, 1, 1, 0, "u 'rotationMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGRETINAVariables(void) {
   /* GRETINAVariables */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_GRETINAVariables));
   G__memfunc_setup("GRETINAVariables",1443,G__GRETINADict_552_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_GRETINAVariables), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__GRETINADict_552_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeGRETINAVariables",2485,G__GRETINADict_552_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - inputFilename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNextValue",1212,G__GRETINADict_552_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "E - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__GRETINADict_552_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_552_0_6, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GRETINAVariables::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_552_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GRETINAVariables::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_552_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GRETINAVariables::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_552_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GRETINAVariables::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_552_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_552_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GRETINAVariables::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_552_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GRETINAVariables::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_552_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GRETINAVariables::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_552_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GRETINAVariables::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GRETINAVariables", 1443, G__GRETINADict_552_0_18, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_GRETINAVariables), -1, 0, 1, 1, 1, 0, "u 'GRETINAVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GRETINAVariables", 1569, G__GRETINADict_552_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_552_0_20, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_GRETINAVariables), -1, 1, 1, 1, 1, 0, "u 'GRETINAVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncglobalHeader(void) {
   /* globalHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_globalHeader));
   // automatic default constructor
   G__memfunc_setup("globalHeader", 1210, G__GRETINADict_553_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_globalHeader), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("globalHeader", 1210, G__GRETINADict_553_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_globalHeader), -1, 0, 1, 1, 1, 0, "u 'globalHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~globalHeader", 1336, G__GRETINADict_553_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_553_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_globalHeader), -1, 1, 1, 1, 1, 0, "u 'globalHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmode3DataPacket(void) {
   /* mode3DataPacket */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode3DataPacket));
   // automatic default constructor
   G__memfunc_setup("mode3DataPacket", 1450, G__GRETINADict_554_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode3DataPacket), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("mode3DataPacket", 1450, G__GRETINADict_554_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode3DataPacket), -1, 0, 1, 1, 1, 0, "u 'mode3DataPacket' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mode3DataPacket", 1576, G__GRETINADict_554_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_554_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_mode3DataPacket), -1, 1, 1, 1, 1, 0, "u 'mode3DataPacket' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg3Waveform(void) {
   /* g3Waveform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform));
   G__memfunc_setup("Clear",487,G__GRETINADict_555_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LEDLevel",717,G__GRETINADict_555_0_2, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - index i - 'Int_t' 0 - thresh "
"i - 'Int_t' 0 - filterK", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LED",213,G__GRETINADict_555_0_3, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - index i - 'Int_t' 0 - thresh "
"i - 'Int_t' 0 - filterK", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CFD",205,G__GRETINADict_555_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - startSample", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BL",142,G__GRETINADict_555_0_5, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - start i - 'Int_t' 0 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Look4Pileup",1080,G__GRETINADict_555_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPZ",573,G__GRETINADict_555_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - base f - 'Float_t' 0 - tau", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("simpleE",719,G__GRETINADict_555_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("riseTime",834,G__GRETINADict_555_0_9, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - fLow f - 'Float_t' 0 - fHigh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeChiSquare",1666,G__GRETINADict_555_0_10, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - startIndex i - 'Int_t' 0 - nPoints "
"d - 'Double_t' 0 - tau d - 'Double_t' 0 - nStart "
"d - 'Double_t' 0 - baseline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LSFitExpo",862,G__GRETINADict_555_0_11, 100, -1, G__defined_typename("Double_t"), 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - startIndex i - 'Int_t' 0 - nPoints "
"d - 'Double_t' 0 - nStart d - 'Double_t' 0 - tau "
"d - 'Double_t' 1 - nStartFit d - 'Double_t' 1 - baselineFit "
"d - 'Double_t' 1 - nStartFitError d - 'Double_t' 1 - baselineFitError", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LSFitLinear",1053,G__GRETINADict_555_0_12, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - startIndex i - 'Int_t' 0 - nPoints "
"d - 'Double_t' 1 - slopeFit d - 'Double_t' 1 - offsetFit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("baseline2Flatten",1603,G__GRETINADict_555_0_13, 102, -1, G__defined_typename("Float_t"), 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - tau i - 'Int_t' 0 - startIndexBase "
"i - 'Int_t' 0 - lengthBase i - 'Int_t' 0 - startIndexTop "
"i - 'Int_t' 0 - lengthTop f - 'Float_t' 0 - smallStep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_555_0_14, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g3Waveform::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_555_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3Waveform::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_555_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g3Waveform::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_555_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g3Waveform::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_555_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_555_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3Waveform::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_555_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3Waveform::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_555_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3Waveform::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_555_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3Waveform::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("g3Waveform", 993, G__GRETINADict_555_0_26, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("g3Waveform", 993, G__GRETINADict_555_0_27, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform), -1, 0, 1, 1, 1, 0, "u 'g3Waveform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g3Waveform", 1119, G__GRETINADict_555_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_555_0_29, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform), -1, 1, 1, 1, 1, 0, "u 'g3Waveform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg3ChannelEvent(void) {
   /* g3ChannelEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent));
   G__memfunc_setup("module",646,G__GRETINADict_556_0_1, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boardID",661,G__GRETINADict_556_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chanID",551,G__GRETINADict_556_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tracelength",1169,G__GRETINADict_556_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chnNum",617,G__GRETINADict_556_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sign",433,G__GRETINADict_556_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pileUp",623,G__GRETINADict_556_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_556_0_8, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g3ChannelEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_556_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3ChannelEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_556_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g3ChannelEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_556_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g3ChannelEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_556_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_556_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3ChannelEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_556_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3ChannelEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_556_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3ChannelEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_556_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3ChannelEvent::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("g3ChannelEvent", 1365, G__GRETINADict_556_0_20, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("g3ChannelEvent", 1365, G__GRETINADict_556_0_21, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent), -1, 0, 1, 1, 1, 0, "u 'g3ChannelEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g3ChannelEvent", 1491, G__GRETINADict_556_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_556_0_23, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent), -1, 1, 1, 1, 1, 0, "u 'g3ChannelEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg3CrystalEvent(void) {
   /* g3CrystalEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent));
   G__memfunc_setup("OrderChannels",1320,G__GRETINADict_557_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc1",247,G__GRETINADict_557_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc2",248,G__GRETINADict_557_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc3",249,G__GRETINADict_557_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc4",250,G__GRETINADict_557_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc1Raw",545,G__GRETINADict_557_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc2Raw",546,G__GRETINADict_557_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc3Raw",547,G__GRETINADict_557_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc4Raw",548,G__GRETINADict_557_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc1Calc",618,G__GRETINADict_557_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc2Calc",619,G__GRETINADict_557_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc3Calc",620,G__GRETINADict_557_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cc4Calc",621,G__GRETINADict_557_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segSumRaw",926,G__GRETINADict_557_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segSumRawThresh",1548,G__GRETINADict_557_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segSumRawTimed",1425,G__GRETINADict_557_0_16, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - minT f - 'Float_t' 0 - maxT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segSumRawThreshTimed",2047,G__GRETINADict_557_0_17, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - thresh f - 'Float_t' 0 - minT "
"f - 'Float_t' 0 - maxT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segsHit",727,G__GRETINADict_557_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segSumCalc",999,G__GRETINADict_557_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segSumCalcThresh",1621,G__GRETINADict_557_0_20, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segsHitCalc",1098,G__GRETINADict_557_0_21, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxSegE",682,G__GRETINADict_557_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxSegECalc",1053,G__GRETINADict_557_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxSegNum",917,G__GRETINADict_557_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("secondSegNum",1227,G__GRETINADict_557_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxSegNumCalc",1288,G__GRETINADict_557_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deepRingHit",1107,G__GRETINADict_557_0_27, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LEDLow",519,G__GRETINADict_557_0_28, 110, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LEDHigh",597,G__GRETINADict_557_0_29, 110, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("crystalBuild",1266,G__GRETINADict_557_0_30, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LEDRange",706,G__GRETINADict_557_0_31, 110, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mode3ToFile",1051,G__GRETINADict_557_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - outFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_557_0_33, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g3CrystalEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_557_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3CrystalEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_557_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g3CrystalEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_557_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g3CrystalEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_557_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_557_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3CrystalEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_557_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3CrystalEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_557_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3CrystalEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_557_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3CrystalEvent::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("g3CrystalEvent", 1406, G__GRETINADict_557_0_45, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("g3CrystalEvent", 1406, G__GRETINADict_557_0_46, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent), -1, 0, 1, 1, 1, 0, "u 'g3CrystalEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g3CrystalEvent", 1532, G__GRETINADict_557_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_557_0_48, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent), -1, 1, 1, 1, 1, 0, "u 'g3CrystalEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR(void) {
   /* vector<g3ChannelEvent,allocator<g3ChannelEvent> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__memfunc_setup("at",213,G__GRETINADict_559_0_1, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent), G__defined_typename("vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__GRETINADict_559_0_2, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent), G__defined_typename("vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__GRETINADict_559_0_3, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__GRETINADict_559_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__GRETINADict_559_0_5, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__GRETINADict_559_0_6, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__GRETINADict_559_0_7, 107, -1, G__defined_typename("vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__GRETINADict_559_0_8, 107, -1, G__defined_typename("vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_559_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_559_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type' 0 - sz u 'g3ChannelEvent' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__GRETINADict_559_0_11, 107, -1, G__defined_typename("vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__GRETINADict_559_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_559_0_13, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent), G__defined_typename("vector<g3ChannelEvent,allocator<g3ChannelEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_559_0_14, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent), G__defined_typename("vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3ChannelEvent,allocator<g3ChannelEvent> >",4670,G__GRETINADict_559_0_15, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3ChannelEvent,allocator<g3ChannelEvent> >",4670,G__GRETINADict_559_0_16, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type' 0 - n u 'g3ChannelEvent' - 11 'g3ChannelEvent()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3ChannelEvent,allocator<g3ChannelEvent> >",4670,G__GRETINADict_559_0_17, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3ChannelEvent,allocator<g3ChannelEvent> >",4670,G__GRETINADict_559_0_18, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator' 10 - first u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GRETINADict_559_0_19, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__GRETINADict_559_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__GRETINADict_559_0_21, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__GRETINADict_559_0_22, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3ChannelEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__GRETINADict_559_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'g3ChannelEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__GRETINADict_559_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_559_0_25, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' - 0 - position u 'g3ChannelEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_559_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' - 0 - position u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator' 10 - first "
"u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_559_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' - 0 - position k - 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::size_type' 0 - n "
"u 'g3ChannelEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__GRETINADict_559_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_559_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_559_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' - 0 - first u 'vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GRETINADict_559_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<g3ChannelEvent,allocator<g3ChannelEvent> >", 4796, G__GRETINADict_559_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg3OUT(void) {
   /* g3OUT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3OUT));
   G__memfunc_setup("g3OUT",402,G__GRETINADict_562_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_g3OUT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__GRETINADict_562_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("crystalMult",1188,G__GRETINADict_562_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calorimeterE",1244,G__GRETINADict_562_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_562_0_5, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g3OUT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_562_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3OUT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_562_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g3OUT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_562_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g3OUT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_562_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_562_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3OUT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_562_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3OUT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_562_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3OUT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_562_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3OUT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("g3OUT", 402, G__GRETINADict_562_0_17, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g3OUT), -1, 0, 1, 1, 1, 0, "u 'g3OUT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g3OUT", 528, G__GRETINADict_562_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_562_0_19, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g3OUT), -1, 1, 1, 1, 1, 0, "u 'g3OUT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR(void) {
   /* vector<g3CrystalEvent,allocator<g3CrystalEvent> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__memfunc_setup("at",213,G__GRETINADict_564_0_1, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent), G__defined_typename("vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__GRETINADict_564_0_2, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent), G__defined_typename("vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__GRETINADict_564_0_3, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__GRETINADict_564_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__GRETINADict_564_0_5, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__GRETINADict_564_0_6, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__GRETINADict_564_0_7, 107, -1, G__defined_typename("vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__GRETINADict_564_0_8, 107, -1, G__defined_typename("vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_564_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_564_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type' 0 - sz u 'g3CrystalEvent' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__GRETINADict_564_0_11, 107, -1, G__defined_typename("vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__GRETINADict_564_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_564_0_13, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent), G__defined_typename("vector<g3CrystalEvent,allocator<g3CrystalEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_564_0_14, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent), G__defined_typename("vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3CrystalEvent,allocator<g3CrystalEvent> >",4752,G__GRETINADict_564_0_15, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3CrystalEvent,allocator<g3CrystalEvent> >",4752,G__GRETINADict_564_0_16, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type' 0 - n u 'g3CrystalEvent' - 11 'g3CrystalEvent()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3CrystalEvent,allocator<g3CrystalEvent> >",4752,G__GRETINADict_564_0_17, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3CrystalEvent,allocator<g3CrystalEvent> >",4752,G__GRETINADict_564_0_18, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator' 10 - first u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GRETINADict_564_0_19, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__GRETINADict_564_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__GRETINADict_564_0_21, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__GRETINADict_564_0_22, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3CrystalEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__GRETINADict_564_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'g3CrystalEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__GRETINADict_564_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_564_0_25, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' - 0 - position u 'g3CrystalEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_564_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' - 0 - position u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator' 10 - first "
"u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_564_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' - 0 - position k - 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::size_type' 0 - n "
"u 'g3CrystalEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__GRETINADict_564_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_564_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_564_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' - 0 - first u 'vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GRETINADict_564_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<g3CrystalEvent,allocator<g3CrystalEvent> >", 4878, G__GRETINADict_564_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmode3HistoryPacket(void) {
   /* mode3HistoryPacket */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode3HistoryPacket));
   // automatic default constructor
   G__memfunc_setup("mode3HistoryPacket", 1826, G__GRETINADict_567_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode3HistoryPacket), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("mode3HistoryPacket", 1826, G__GRETINADict_567_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode3HistoryPacket), -1, 0, 1, 1, 1, 0, "u 'mode3HistoryPacket' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mode3HistoryPacket", 1952, G__GRETINADict_567_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_567_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_mode3HistoryPacket), -1, 1, 1, 1, 1, 0, "u 'mode3HistoryPacket' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunchistoryEvent(void) {
   /* historyEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_historyEvent));
   // automatic default constructor
   G__memfunc_setup("historyEvent", 1300, G__GRETINADict_568_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_historyEvent), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("historyEvent", 1300, G__GRETINADict_568_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_historyEvent), -1, 0, 1, 1, 1, 0, "u 'historyEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~historyEvent", 1426, G__GRETINADict_568_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_568_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_historyEvent), -1, 1, 1, 1, 1, 0, "u 'historyEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg3HistoryEvent(void) {
   /* g3HistoryEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent));
   G__memfunc_setup("g3HistoryEvent",1422,G__GRETINADict_569_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lengthOfPast",1231,G__GRETINADict_569_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_569_0_3, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g3HistoryEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_569_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3HistoryEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_569_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g3HistoryEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_569_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g3HistoryEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_569_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_569_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3HistoryEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_569_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3HistoryEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_569_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g3HistoryEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_569_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g3HistoryEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("g3HistoryEvent", 1422, G__GRETINADict_569_0_15, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent), -1, 0, 1, 1, 1, 0, "u 'g3HistoryEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g3HistoryEvent", 1548, G__GRETINADict_569_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_569_0_17, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g3HistoryEvent), -1, 1, 1, 1, 1, 0, "u 'g3HistoryEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBank29(void) {
   /* Bank29 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_Bank29));
   G__memfunc_setup("Bank29",487,G__GRETINADict_574_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_Bank29), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_574_0_2, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Bank29::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_574_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Bank29::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_574_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Bank29::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_574_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Bank29::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_574_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_574_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Bank29::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_574_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Bank29::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_574_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Bank29::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_574_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Bank29::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Bank29", 487, G__GRETINADict_574_0_14, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_Bank29), -1, 0, 1, 1, 1, 0, "u 'Bank29' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Bank29", 613, G__GRETINADict_574_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_574_0_16, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_Bank29), -1, 1, 1, 1, 1, 0, "u 'Bank29' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncip(void) {
   /* ip */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_ip));
   // automatic default constructor
   G__memfunc_setup("ip", 217, G__GRETINADict_575_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_ip), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ip", 217, G__GRETINADict_575_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_ip), -1, 0, 1, 1, 1, 0, "u 'ip' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ip", 343, G__GRETINADict_575_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_575_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_ip), -1, 1, 1, 1, 1, 0, "u 'ip' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncipOLD(void) {
   /* ipOLD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_ipOLD));
   // automatic default constructor
   G__memfunc_setup("ipOLD", 440, G__GRETINADict_576_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_ipOLD), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ipOLD", 440, G__GRETINADict_576_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_ipOLD), -1, 0, 1, 1, 1, 0, "u 'ipOLD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ipOLD", 566, G__GRETINADict_576_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_576_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_ipOLD), -1, 1, 1, 1, 1, 0, "u 'ipOLD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmode2Old(void) {
   /* mode2Old */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode2Old));
   // automatic default constructor
   G__memfunc_setup("mode2Old", 758, G__GRETINADict_577_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode2Old), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("mode2Old", 758, G__GRETINADict_577_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode2Old), -1, 0, 1, 1, 1, 0, "u 'mode2Old' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mode2Old", 884, G__GRETINADict_577_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_577_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_mode2Old), -1, 1, 1, 1, 1, 0, "u 'mode2Old' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmode2ABCD1234(void) {
   /* mode2ABCD1234 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD1234));
   // automatic default constructor
   G__memfunc_setup("mode2ABCD1234", 939, G__GRETINADict_578_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD1234), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("mode2ABCD1234", 939, G__GRETINADict_578_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD1234), -1, 0, 1, 1, 1, 0, "u 'mode2ABCD1234' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mode2ABCD1234", 1065, G__GRETINADict_578_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_578_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD1234), -1, 1, 1, 1, 1, 0, "u 'mode2ABCD1234' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmode2ABCD5678(void) {
   /* mode2ABCD5678 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD5678));
   // automatic default constructor
   G__memfunc_setup("mode2ABCD5678", 955, G__GRETINADict_579_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD5678), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("mode2ABCD5678", 955, G__GRETINADict_579_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD5678), -1, 0, 1, 1, 1, 0, "u 'mode2ABCD5678' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mode2ABCD5678", 1081, G__GRETINADict_579_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_579_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_mode2ABCD5678), -1, 1, 1, 1, 1, 0, "u 'mode2ABCD5678' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg2IntPt(void) {
   /* g2IntPt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt));
   G__memfunc_setup("g2IntPt",648,G__GRETINADict_580_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_580_0_2, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g2IntPt::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_580_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g2IntPt::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_580_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g2IntPt::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_580_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g2IntPt::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_580_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_580_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g2IntPt::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_580_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g2IntPt::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_580_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g2IntPt::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_580_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g2IntPt::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("g2IntPt", 648, G__GRETINADict_580_0_14, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt), -1, 0, 1, 1, 1, 0, "u 'g2IntPt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g2IntPt", 774, G__GRETINADict_580_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_580_0_16, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt), -1, 1, 1, 1, 1, 0, "u 'g2IntPt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg2CrystalEvent(void) {
   /* g2CrystalEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent));
   G__memfunc_setup("g2CrystalEvent",1405,G__GRETINADict_581_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__GRETINADict_581_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("numIntPts",946,G__GRETINADict_581_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("numSegHit",916,G__GRETINADict_581_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segsHitAboveThresh",1842,G__GRETINADict_581_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("averageIntPtsPerSeg",1923,G__GRETINADict_581_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segSumRaw",926,G__GRETINADict_581_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("segSumRawThresh",1548,G__GRETINADict_581_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtXYZ",1088,G__GRETINADict_581_0_9, 117, G__get_linked_tagnum(&G__GRETINADictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtX",909,G__GRETINADict_581_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtY",910,G__GRETINADict_581_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtZ",911,G__GRETINADict_581_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtR",903,G__GRETINADict_581_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtXYZLab",1359,G__GRETINADict_581_0_14, 117, G__get_linked_tagnum(&G__GRETINADictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtXYZLabSeg",1646,G__GRETINADict_581_0_15, 117, G__get_linked_tagnum(&G__GRETINADictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtXYZLabCrystal",2097,G__GRETINADict_581_0_16, 117, G__get_linked_tagnum(&G__GRETINADictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtE",890,G__GRETINADict_581_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtSegNum",1412,G__GRETINADict_581_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIntPtSegE",1177,G__GRETINADict_581_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gTheta",605,G__GRETINADict_581_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gPhi",392,G__GRETINADict_581_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CosDop",584,G__GRETINADict_581_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cDoppler",825,G__GRETINADict_581_0_23, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cDopplerSeg",1112,G__GRETINADict_581_0_24, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cDopplerCrystal",1563,G__GRETINADict_581_0_25, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_581_0_26, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g2CrystalEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_581_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g2CrystalEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_581_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g2CrystalEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_581_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g2CrystalEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_581_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_581_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g2CrystalEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_581_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g2CrystalEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_581_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g2CrystalEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_581_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g2CrystalEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("g2CrystalEvent", 1405, G__GRETINADict_581_0_38, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent), -1, 0, 1, 1, 1, 0, "u 'g2CrystalEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g2CrystalEvent", 1531, G__GRETINADict_581_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_581_0_40, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent), -1, 1, 1, 1, 1, 0, "u 'g2CrystalEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR(void) {
   /* vector<g2IntPt,allocator<g2IntPt> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__memfunc_setup("at",213,G__GRETINADict_583_0_1, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt), G__defined_typename("vector<g2IntPt,allocator<g2IntPt> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g2IntPt,allocator<g2IntPt> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__GRETINADict_583_0_2, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt), G__defined_typename("vector<g2IntPt,allocator<g2IntPt> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g2IntPt,allocator<g2IntPt> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__GRETINADict_583_0_3, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__GRETINADict_583_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__GRETINADict_583_0_5, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR), G__defined_typename("vector<g2IntPt,allocator<g2IntPt> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__GRETINADict_583_0_6, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR), G__defined_typename("vector<g2IntPt,allocator<g2IntPt> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__GRETINADict_583_0_7, 107, -1, G__defined_typename("vector<g2IntPt,allocator<g2IntPt> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__GRETINADict_583_0_8, 107, -1, G__defined_typename("vector<g2IntPt,allocator<g2IntPt> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_583_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g2IntPt,allocator<g2IntPt> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_583_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<g2IntPt,allocator<g2IntPt> >::size_type' 0 - sz u 'g2IntPt' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__GRETINADict_583_0_11, 107, -1, G__defined_typename("vector<g2IntPt,allocator<g2IntPt> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__GRETINADict_583_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_583_0_13, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt), G__defined_typename("vector<g2IntPt,allocator<g2IntPt> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g2IntPt,allocator<g2IntPt> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_583_0_14, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt), G__defined_typename("vector<g2IntPt,allocator<g2IntPt> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g2IntPt,allocator<g2IntPt> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g2IntPt,allocator<g2IntPt> >",3236,G__GRETINADict_583_0_15, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g2IntPt,allocator<g2IntPt> >",3236,G__GRETINADict_583_0_16, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<g2IntPt,allocator<g2IntPt> >::size_type' 0 - n u 'g2IntPt' - 11 'g2IntPt()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g2IntPt,allocator<g2IntPt> >",3236,G__GRETINADict_583_0_17, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<g2IntPt,allocator<g2IntPt> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g2IntPt,allocator<g2IntPt> >",3236,G__GRETINADict_583_0_18, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' 'vector<g2IntPt,allocator<g2IntPt> >::const_iterator' 10 - first u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' 'vector<g2IntPt,allocator<g2IntPt> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GRETINADict_583_0_19, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<g2IntPt,allocator<g2IntPt> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__GRETINADict_583_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g2IntPt,allocator<g2IntPt> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__GRETINADict_583_0_21, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__GRETINADict_583_0_22, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2IntPt), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__GRETINADict_583_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'g2IntPt' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__GRETINADict_583_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g2IntPt,allocator<g2IntPt> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_583_0_25, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' - 0 - position u 'g2IntPt' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_583_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' - 0 - position u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' 'vector<g2IntPt,allocator<g2IntPt> >::const_iterator' 10 - first "
"u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' 'vector<g2IntPt,allocator<g2IntPt> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_583_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' - 0 - position k - 'vector<g2IntPt,allocator<g2IntPt> >::size_type' 0 - n "
"u 'g2IntPt' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__GRETINADict_583_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_583_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_583_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' - 0 - first u 'vector<g2IntPt,allocator<g2IntPt> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GRETINADict_583_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<g2IntPt,allocator<g2IntPt> >", 3362, G__GRETINADict_583_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg2OUT(void) {
   /* g2OUT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g2OUT));
   G__memfunc_setup("g2OUT",401,G__GRETINADict_586_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_g2OUT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__GRETINADict_586_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calorimeterDoppler",1901,G__GRETINADict_586_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calorimeterE",1244,G__GRETINADict_586_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calorimeterE",1244,G__GRETINADict_586_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("crystalMult",1188,G__GRETINADict_586_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_586_0_7, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g2OUT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_586_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g2OUT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_586_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g2OUT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_586_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g2OUT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_586_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_586_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g2OUT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_586_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g2OUT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_586_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g2OUT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_586_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g2OUT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("g2OUT", 401, G__GRETINADict_586_0_19, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g2OUT), -1, 0, 1, 1, 1, 0, "u 'g2OUT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g2OUT", 527, G__GRETINADict_586_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_586_0_21, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g2OUT), -1, 1, 1, 1, 1, 0, "u 'g2OUT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR(void) {
   /* vector<g2CrystalEvent,allocator<g2CrystalEvent> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__memfunc_setup("at",213,G__GRETINADict_588_0_1, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent), G__defined_typename("vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__GRETINADict_588_0_2, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent), G__defined_typename("vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__GRETINADict_588_0_3, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__GRETINADict_588_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__GRETINADict_588_0_5, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__GRETINADict_588_0_6, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__GRETINADict_588_0_7, 107, -1, G__defined_typename("vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__GRETINADict_588_0_8, 107, -1, G__defined_typename("vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_588_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_588_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type' 0 - sz u 'g2CrystalEvent' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__GRETINADict_588_0_11, 107, -1, G__defined_typename("vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__GRETINADict_588_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_588_0_13, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent), G__defined_typename("vector<g2CrystalEvent,allocator<g2CrystalEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_588_0_14, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent), G__defined_typename("vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g2CrystalEvent,allocator<g2CrystalEvent> >",4750,G__GRETINADict_588_0_15, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g2CrystalEvent,allocator<g2CrystalEvent> >",4750,G__GRETINADict_588_0_16, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type' 0 - n u 'g2CrystalEvent' - 11 'g2CrystalEvent()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g2CrystalEvent,allocator<g2CrystalEvent> >",4750,G__GRETINADict_588_0_17, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g2CrystalEvent,allocator<g2CrystalEvent> >",4750,G__GRETINADict_588_0_18, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator' 10 - first u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GRETINADict_588_0_19, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__GRETINADict_588_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__GRETINADict_588_0_21, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__GRETINADict_588_0_22, 117, G__get_linked_tagnum(&G__GRETINADictLN_g2CrystalEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__GRETINADict_588_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'g2CrystalEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__GRETINADict_588_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_588_0_25, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' - 0 - position u 'g2CrystalEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_588_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' - 0 - position u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator' 10 - first "
"u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_588_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' - 0 - position k - 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::size_type' 0 - n "
"u 'g2CrystalEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__GRETINADict_588_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_588_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_588_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' - 0 - first u 'vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GRETINADict_588_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<g2CrystalEvent,allocator<g2CrystalEvent> >", 4876, G__GRETINADict_588_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctrackedGamma(void) {
   /* trackedGamma */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma));
   // automatic default constructor
   G__memfunc_setup("trackedGamma", 1217, G__GRETINADict_591_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("trackedGamma", 1217, G__GRETINADict_591_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma), -1, 0, 1, 1, 1, 0, "u 'trackedGamma' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~trackedGamma", 1343, G__GRETINADict_591_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_591_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma), -1, 1, 1, 1, 1, 0, "u 'trackedGamma' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGTrackEvent(void) {
   /* GTrackEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_GTrackEvent));
   G__memfunc_setup("GTrackEvent",1086,G__GRETINADict_592_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_GTrackEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVecSize",985,G__GRETINADict_592_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_592_0_3, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GTrackEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_592_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GTrackEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_592_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GTrackEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_592_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GTrackEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_592_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_592_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GTrackEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_592_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GTrackEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_592_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GTrackEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_592_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GTrackEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GTrackEvent", 1086, G__GRETINADict_592_0_15, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_GTrackEvent), -1, 0, 1, 1, 1, 0, "u 'GTrackEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GTrackEvent", 1212, G__GRETINADict_592_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_592_0_17, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_GTrackEvent), -1, 1, 1, 1, 1, 0, "u 'GTrackEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR(void) {
   /* vector<trackedGamma,allocator<trackedGamma> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__memfunc_setup("at",213,G__GRETINADict_594_0_1, 117, G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma), G__defined_typename("vector<trackedGamma,allocator<trackedGamma> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<trackedGamma,allocator<trackedGamma> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__GRETINADict_594_0_2, 117, G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma), G__defined_typename("vector<trackedGamma,allocator<trackedGamma> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<trackedGamma,allocator<trackedGamma> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__GRETINADict_594_0_3, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__GRETINADict_594_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__GRETINADict_594_0_5, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR), G__defined_typename("vector<trackedGamma,allocator<trackedGamma> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__GRETINADict_594_0_6, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR), G__defined_typename("vector<trackedGamma,allocator<trackedGamma> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__GRETINADict_594_0_7, 107, -1, G__defined_typename("vector<trackedGamma,allocator<trackedGamma> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__GRETINADict_594_0_8, 107, -1, G__defined_typename("vector<trackedGamma,allocator<trackedGamma> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_594_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<trackedGamma,allocator<trackedGamma> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_594_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<trackedGamma,allocator<trackedGamma> >::size_type' 0 - sz u 'trackedGamma' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__GRETINADict_594_0_11, 107, -1, G__defined_typename("vector<trackedGamma,allocator<trackedGamma> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__GRETINADict_594_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_594_0_13, 117, G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma), G__defined_typename("vector<trackedGamma,allocator<trackedGamma> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<trackedGamma,allocator<trackedGamma> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_594_0_14, 117, G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma), G__defined_typename("vector<trackedGamma,allocator<trackedGamma> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<trackedGamma,allocator<trackedGamma> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<trackedGamma,allocator<trackedGamma> >",4374,G__GRETINADict_594_0_15, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<trackedGamma,allocator<trackedGamma> >",4374,G__GRETINADict_594_0_16, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<trackedGamma,allocator<trackedGamma> >::size_type' 0 - n u 'trackedGamma' - 11 'trackedGamma()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<trackedGamma,allocator<trackedGamma> >",4374,G__GRETINADict_594_0_17, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<trackedGamma,allocator<trackedGamma> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<trackedGamma,allocator<trackedGamma> >",4374,G__GRETINADict_594_0_18, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' 'vector<trackedGamma,allocator<trackedGamma> >::const_iterator' 10 - first u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' 'vector<trackedGamma,allocator<trackedGamma> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GRETINADict_594_0_19, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<trackedGamma,allocator<trackedGamma> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__GRETINADict_594_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<trackedGamma,allocator<trackedGamma> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__GRETINADict_594_0_21, 117, G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__GRETINADict_594_0_22, 117, G__get_linked_tagnum(&G__GRETINADictLN_trackedGamma), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__GRETINADict_594_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'trackedGamma' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__GRETINADict_594_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<trackedGamma,allocator<trackedGamma> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_594_0_25, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' - 0 - position u 'trackedGamma' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_594_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' - 0 - position u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' 'vector<trackedGamma,allocator<trackedGamma> >::const_iterator' 10 - first "
"u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' 'vector<trackedGamma,allocator<trackedGamma> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_594_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' - 0 - position k - 'vector<trackedGamma,allocator<trackedGamma> >::size_type' 0 - n "
"u 'trackedGamma' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__GRETINADict_594_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_594_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_594_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' - 0 - first u 'vector<trackedGamma,allocator<trackedGamma> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GRETINADict_594_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<trackedGamma,allocator<trackedGamma> >", 4500, G__GRETINADict_594_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg1GammaEvent(void) {
   /* g1GammaEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent));
   G__memfunc_setup("g1GammaEvent",1149,G__GRETINADict_597_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gTheta",605,G__GRETINADict_597_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gPhi",392,G__GRETINADict_597_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("normalVector1",1325,G__GRETINADict_597_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("normalVector2",1326,G__GRETINADict_597_0_5, 117, G__get_linked_tagnum(&G__GRETINADictLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiCompton",1057,G__GRETINADict_597_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("intPtDistance",1338,G__GRETINADict_597_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scatterAngle",1245,G__GRETINADict_597_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cDoppler",825,G__GRETINADict_597_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_597_0_10, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g1GammaEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_597_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g1GammaEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_597_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g1GammaEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_597_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g1GammaEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_597_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_597_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g1GammaEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_597_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g1GammaEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_597_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g1GammaEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_597_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g1GammaEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("g1GammaEvent", 1149, G__GRETINADict_597_0_22, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent), -1, 0, 1, 1, 1, 0, "u 'g1GammaEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g1GammaEvent", 1275, G__GRETINADict_597_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_597_0_24, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent), -1, 1, 1, 1, 1, 0, "u 'g1GammaEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg1OUT(void) {
   /* g1OUT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g1OUT));
   G__memfunc_setup("g1OUT",400,G__GRETINADict_598_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_g1OUT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__GRETINADict_598_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calorimeterE",1244,G__GRETINADict_598_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gammaMult",933,G__GRETINADict_598_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_598_0_5, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g1OUT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_598_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g1OUT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_598_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g1OUT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_598_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g1OUT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_598_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_598_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g1OUT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_598_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g1OUT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_598_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g1OUT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_598_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g1OUT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("g1OUT", 400, G__GRETINADict_598_0_17, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g1OUT), -1, 0, 1, 1, 1, 0, "u 'g1OUT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g1OUT", 526, G__GRETINADict_598_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_598_0_19, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g1OUT), -1, 1, 1, 1, 1, 0, "u 'g1OUT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR(void) {
   /* vector<g1GammaEvent,allocator<g1GammaEvent> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__memfunc_setup("at",213,G__GRETINADict_600_0_1, 117, G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent), G__defined_typename("vector<g1GammaEvent,allocator<g1GammaEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__GRETINADict_600_0_2, 117, G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent), G__defined_typename("vector<g1GammaEvent,allocator<g1GammaEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__GRETINADict_600_0_3, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__GRETINADict_600_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__GRETINADict_600_0_5, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<g1GammaEvent,allocator<g1GammaEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__GRETINADict_600_0_6, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR), G__defined_typename("vector<g1GammaEvent,allocator<g1GammaEvent> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__GRETINADict_600_0_7, 107, -1, G__defined_typename("vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__GRETINADict_600_0_8, 107, -1, G__defined_typename("vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_600_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_600_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type' 0 - sz u 'g1GammaEvent' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__GRETINADict_600_0_11, 107, -1, G__defined_typename("vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__GRETINADict_600_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_600_0_13, 117, G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent), G__defined_typename("vector<g1GammaEvent,allocator<g1GammaEvent> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_600_0_14, 117, G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent), G__defined_typename("vector<g1GammaEvent,allocator<g1GammaEvent> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g1GammaEvent,allocator<g1GammaEvent> >",4238,G__GRETINADict_600_0_15, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g1GammaEvent,allocator<g1GammaEvent> >",4238,G__GRETINADict_600_0_16, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type' 0 - n u 'g1GammaEvent' - 11 'g1GammaEvent()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g1GammaEvent,allocator<g1GammaEvent> >",4238,G__GRETINADict_600_0_17, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<g1GammaEvent,allocator<g1GammaEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g1GammaEvent,allocator<g1GammaEvent> >",4238,G__GRETINADict_600_0_18, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' 'vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator' 10 - first u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' 'vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GRETINADict_600_0_19, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<g1GammaEvent,allocator<g1GammaEvent> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__GRETINADict_600_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__GRETINADict_600_0_21, 117, G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__GRETINADict_600_0_22, 117, G__get_linked_tagnum(&G__GRETINADictLN_g1GammaEvent), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__GRETINADict_600_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'g1GammaEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__GRETINADict_600_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g1GammaEvent,allocator<g1GammaEvent> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_600_0_25, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' - 0 - position u 'g1GammaEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_600_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' - 0 - position u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' 'vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator' 10 - first "
"u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' 'vector<g1GammaEvent,allocator<g1GammaEvent> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_600_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' - 0 - position k - 'vector<g1GammaEvent,allocator<g1GammaEvent> >::size_type' 0 - n "
"u 'g1GammaEvent' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__GRETINADict_600_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_600_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_600_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' - 0 - first u 'vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GRETINADict_600_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<g1GammaEvent,allocator<g1GammaEvent> >", 4364, G__GRETINADict_600_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg4Sim_emittedGamma(void) {
   /* g4Sim_emittedGamma */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_emittedGamma));
   // automatic default constructor
   G__memfunc_setup("g4Sim_emittedGamma", 1778, G__GRETINADict_603_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_emittedGamma), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("g4Sim_emittedGamma", 1778, G__GRETINADict_603_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_emittedGamma), -1, 0, 1, 1, 1, 0, "u 'g4Sim_emittedGamma' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g4Sim_emittedGamma", 1904, G__GRETINADict_603_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_603_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_emittedGamma), -1, 1, 1, 1, 1, 0, "u 'g4Sim_emittedGamma' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg4Sim_abcd1234(void) {
   /* g4Sim_abcd1234 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_abcd1234));
   // automatic default constructor
   G__memfunc_setup("g4Sim_abcd1234", 1143, G__GRETINADict_604_0_1, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_abcd1234), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("g4Sim_abcd1234", 1143, G__GRETINADict_604_0_2, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_abcd1234), -1, 0, 1, 1, 1, 0, "u 'g4Sim_abcd1234' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g4Sim_abcd1234", 1269, G__GRETINADict_604_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_604_0_4, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g4Sim_abcd1234), -1, 1, 1, 1, 1, 0, "u 'g4Sim_abcd1234' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncg4SimOUT(void) {
   /* g4SimOUT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT));
   G__memfunc_setup("g4SimOUT",700,G__GRETINADict_605_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSimMult",1003,G__GRETINADict_605_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__GRETINADict_605_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_605_0_4, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&g4SimOUT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_605_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g4SimOUT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_605_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&g4SimOUT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_605_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&g4SimOUT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_605_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_605_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g4SimOUT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_605_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g4SimOUT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_605_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&g4SimOUT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_605_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&g4SimOUT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("g4SimOUT", 700, G__GRETINADict_605_0_16, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT), -1, 0, 1, 1, 1, 0, "u 'g4SimOUT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~g4SimOUT", 826, G__GRETINADict_605_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_605_0_18, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_g4SimOUT), -1, 1, 1, 1, 1, 0, "u 'g4SimOUT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgHistos(void) {
   /* gHistos */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_gHistos));
   G__memfunc_setup("gHistos",737,G__GRETINADict_610_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_gHistos), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHistos",1189,G__GRETINADict_610_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ctrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_610_0_3, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&gHistos::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_610_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&gHistos::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_610_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&gHistos::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_610_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&gHistos::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_610_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_610_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&gHistos::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_610_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&gHistos::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_610_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&gHistos::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_610_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&gHistos::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("gHistos", 737, G__GRETINADict_610_0_15, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_gHistos), -1, 0, 1, 1, 1, 0, "u 'gHistos' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~gHistos", 863, G__GRETINADict_610_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_610_0_17, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_gHistos), -1, 1, 1, 1, 1, 0, "u 'gHistos' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSuperPulse(void) {
   /* SuperPulse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse));
   G__memfunc_setup("SuperPulse",1048,G__GRETINADict_611_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__GRETINADict_611_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'controlVariables' - 0 - ctrl U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDetMaps",1066,G__GRETINADict_611_0_3, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 0 - fn U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadParams",992,G__GRETINADict_611_0_4, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"u 'TString' - 0 - filename C - - 10 - label "
"F - 'Float_t' 2 - x i - 'Int_t' 0 - len "
"U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSuperPulses",1545,G__GRETINADict_611_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AlignCFD",696,G__GRETINADict_611_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - crystalNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cfdTime",700,G__GRETINADict_611_0_7, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - crystalNum i - 'Int_t' 0 - segNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinishSuperPulses",1772,G__GRETINADict_611_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteSuperPulses",1686,G__GRETINADict_611_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_611_0_10, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SuperPulse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_611_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SuperPulse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_611_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SuperPulse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_611_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SuperPulse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_611_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_611_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SuperPulse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_611_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SuperPulse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_611_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SuperPulse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_611_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SuperPulse::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SuperPulse", 1048, G__GRETINADict_611_0_22, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse), -1, 0, 1, 1, 1, 0, "u 'SuperPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SuperPulse", 1174, G__GRETINADict_611_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_611_0_24, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_SuperPulse), -1, 1, 1, 1, 1, 0, "u 'SuperPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncINLCorrection(void) {
   /* INLCorrection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_INLCorrection));
   G__memfunc_setup("INLCorrection",1275,G__GRETINADict_615_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_INLCorrection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__GRETINADict_615_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'controlVariables' - 0 - ctrl U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateENL",1165,G__GRETINADict_615_0_3, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - xtal i - 'Int_t' 0 - chn "
"i - 'Int_t' 0 - s1_width i - 'Int_t' 0 - s2_width "
"f - 'Float_t' 0 - s1 f - 'Float_t' 0 - s2 "
"f - 'Float_t' 0 - base f - 'Float_t' 0 - tau", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDigitizerMap",1605,G__GRETINADict_615_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadRawINL",905,G__GRETINADict_615_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_615_0_6, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&INLCorrection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_615_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&INLCorrection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_615_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&INLCorrection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_615_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&INLCorrection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_615_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_615_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&INLCorrection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_615_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&INLCorrection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_615_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&INLCorrection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_615_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&INLCorrection::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("INLCorrection", 1275, G__GRETINADict_615_0_18, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_INLCorrection), -1, 0, 1, 1, 1, 0, "u 'INLCorrection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~INLCorrection", 1401, G__GRETINADict_615_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_615_0_20, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_INLCorrection), -1, 1, 1, 1, 1, 0, "u 'INLCorrection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHistos(void) {
   /* Histos */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_Histos));
   G__memfunc_setup("Histos",634,G__GRETINADict_646_0_1, 105, G__get_linked_tagnum(&G__GRETINADictLN_Histos), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeHist",1450,G__GRETINADict_646_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'controlVariables' - 0 - ctrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteHistos",1157,G__GRETINADict_646_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'controlVariables' - 0 - ctrl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GRETINADict_646_0_4, 85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Histos::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GRETINADict_646_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Histos::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GRETINADict_646_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Histos::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GRETINADict_646_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Histos::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GRETINADictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GRETINADict_646_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GRETINADict_646_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Histos::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GRETINADict_646_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Histos::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GRETINADict_646_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Histos::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GRETINADict_646_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Histos::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Histos", 634, G__GRETINADict_646_0_16, (int) ('i'), G__get_linked_tagnum(&G__GRETINADictLN_Histos), -1, 0, 1, 1, 1, 0, "u 'Histos' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Histos", 760, G__GRETINADict_646_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GRETINADict_646_0_18, (int) ('u'), G__get_linked_tagnum(&G__GRETINADictLN_Histos), -1, 1, 1, 1, 1, 0, "u 'Histos' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR(void) {
   /* vector<g3Waveform,allocator<g3Waveform> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR));
   G__memfunc_setup("at",213,G__GRETINADict_648_0_1, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform), G__defined_typename("vector<g3Waveform,allocator<g3Waveform> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g3Waveform,allocator<g3Waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__GRETINADict_648_0_2, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform), G__defined_typename("vector<g3Waveform,allocator<g3Waveform> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g3Waveform,allocator<g3Waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__GRETINADict_648_0_3, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__GRETINADict_648_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__GRETINADict_648_0_5, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiteratorgR), G__defined_typename("vector<g3Waveform,allocator<g3Waveform> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__GRETINADict_648_0_6, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiteratorgR), G__defined_typename("vector<g3Waveform,allocator<g3Waveform> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__GRETINADict_648_0_7, 107, -1, G__defined_typename("vector<g3Waveform,allocator<g3Waveform> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__GRETINADict_648_0_8, 107, -1, G__defined_typename("vector<g3Waveform,allocator<g3Waveform> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_648_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g3Waveform,allocator<g3Waveform> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_648_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<g3Waveform,allocator<g3Waveform> >::size_type' 0 - sz u 'g3Waveform' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__GRETINADict_648_0_11, 107, -1, G__defined_typename("vector<g3Waveform,allocator<g3Waveform> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__GRETINADict_648_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_648_0_13, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform), G__defined_typename("vector<g3Waveform,allocator<g3Waveform> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<g3Waveform,allocator<g3Waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_648_0_14, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform), G__defined_typename("vector<g3Waveform,allocator<g3Waveform> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<g3Waveform,allocator<g3Waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3Waveform,allocator<g3Waveform> >",3926,G__GRETINADict_648_0_15, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3Waveform,allocator<g3Waveform> >",3926,G__GRETINADict_648_0_16, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<g3Waveform,allocator<g3Waveform> >::size_type' 0 - n u 'g3Waveform' - 11 'g3Waveform()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3Waveform,allocator<g3Waveform> >",3926,G__GRETINADict_648_0_17, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<g3Waveform,allocator<g3Waveform> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<g3Waveform,allocator<g3Waveform> >",3926,G__GRETINADict_648_0_18, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' 'vector<g3Waveform,allocator<g3Waveform> >::const_iterator' 10 - first u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' 'vector<g3Waveform,allocator<g3Waveform> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GRETINADict_648_0_19, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<g3Waveform,allocator<g3Waveform> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__GRETINADict_648_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<g3Waveform,allocator<g3Waveform> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__GRETINADict_648_0_21, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__GRETINADict_648_0_22, 117, G__get_linked_tagnum(&G__GRETINADictLN_g3Waveform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__GRETINADict_648_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'g3Waveform' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__GRETINADict_648_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g3Waveform,allocator<g3Waveform> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_648_0_25, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' - 0 - position u 'g3Waveform' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_648_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' - 0 - position u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' 'vector<g3Waveform,allocator<g3Waveform> >::const_iterator' 10 - first "
"u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' 'vector<g3Waveform,allocator<g3Waveform> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_648_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' - 0 - position k - 'vector<g3Waveform,allocator<g3Waveform> >::size_type' 0 - n "
"u 'g3Waveform' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__GRETINADict_648_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_648_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_648_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' - 0 - first u 'vector<g3Waveform,allocator<g3Waveform> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GRETINADict_648_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<g3Waveform,allocator<g3Waveform> >", 4052, G__GRETINADict_648_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEipcOallocatorlEipgRsPgR(void) {
   /* vector<ip,allocator<ip> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR));
   G__memfunc_setup("at",213,G__GRETINADict_652_0_1, 117, G__get_linked_tagnum(&G__GRETINADictLN_ip), G__defined_typename("vector<ip,allocator<ip> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<ip,allocator<ip> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__GRETINADict_652_0_2, 117, G__get_linked_tagnum(&G__GRETINADictLN_ip), G__defined_typename("vector<ip,allocator<ip> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<ip,allocator<ip> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__GRETINADict_652_0_3, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__GRETINADict_652_0_4, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__GRETINADict_652_0_5, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEipcOallocatorlEipgRsPgRcLcLiteratorgR), G__defined_typename("vector<ip,allocator<ip> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__GRETINADict_652_0_6, 117, G__get_linked_tagnum(&G__GRETINADictLN_reverse_iteratorlEvectorlEipcOallocatorlEipgRsPgRcLcLiteratorgR), G__defined_typename("vector<ip,allocator<ip> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__GRETINADict_652_0_7, 107, -1, G__defined_typename("vector<ip,allocator<ip> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__GRETINADict_652_0_8, 107, -1, G__defined_typename("vector<ip,allocator<ip> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_652_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<ip,allocator<ip> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__GRETINADict_652_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<ip,allocator<ip> >::size_type' 0 - sz u 'ip' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__GRETINADict_652_0_11, 107, -1, G__defined_typename("vector<ip,allocator<ip> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__GRETINADict_652_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_652_0_13, 117, G__get_linked_tagnum(&G__GRETINADictLN_ip), G__defined_typename("vector<ip,allocator<ip> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<ip,allocator<ip> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GRETINADict_652_0_14, 117, G__get_linked_tagnum(&G__GRETINADictLN_ip), G__defined_typename("vector<ip,allocator<ip> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<ip,allocator<ip> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ip,allocator<ip> >",2374,G__GRETINADict_652_0_15, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ip,allocator<ip> >",2374,G__GRETINADict_652_0_16, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<ip,allocator<ip> >::size_type' 0 - n u 'ip' - 11 'ip()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ip,allocator<ip> >",2374,G__GRETINADict_652_0_17, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<ip,allocator<ip> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<ip,allocator<ip> >",2374,G__GRETINADict_652_0_18, 105, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<ip,allocator<ip> >::iterator' 'vector<ip,allocator<ip> >::const_iterator' 10 - first u 'vector<ip,allocator<ip> >::iterator' 'vector<ip,allocator<ip> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GRETINADict_652_0_19, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<ip,allocator<ip> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__GRETINADict_652_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<ip,allocator<ip> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__GRETINADict_652_0_21, 117, G__get_linked_tagnum(&G__GRETINADictLN_ip), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__GRETINADict_652_0_22, 117, G__get_linked_tagnum(&G__GRETINADictLN_ip), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__GRETINADict_652_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ip' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__GRETINADict_652_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<ip,allocator<ip> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_652_0_25, 117, G__get_linked_tagnum(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<ip,allocator<ip> >::iterator' - 0 - position u 'ip' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_652_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<ip,allocator<ip> >::iterator' - 0 - position u 'vector<ip,allocator<ip> >::iterator' 'vector<ip,allocator<ip> >::const_iterator' 10 - first "
"u 'vector<ip,allocator<ip> >::iterator' 'vector<ip,allocator<ip> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__GRETINADict_652_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<ip,allocator<ip> >::iterator' - 0 - position k - 'vector<ip,allocator<ip> >::size_type' 0 - n "
"u 'ip' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__GRETINADict_652_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_652_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<ip,allocator<ip> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__GRETINADict_652_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<ip,allocator<ip> >::iterator' - 0 - first u 'vector<ip,allocator<ip> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__GRETINADict_652_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<ip,allocator<ip> >", 2500, G__GRETINADict_652_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGRETINADict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGRETINADict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGRETINADict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GRETINADictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_PM = { "PM" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_TrackClusterIP = { "TrackClusterIP" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TrackCluster = { "TrackCluster" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TrackShell = { "TrackShell" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TrackCtrl = { "TrackCtrl" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TrackStat = { "TrackStat" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TrackPerm = { "TrackPerm" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_Track = { "Track" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_TH3F = { "TH3F" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_controlVariables = { "controlVariables" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_counterVariables = { "counterVariables" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_GRETINA = { "GRETINA" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_rotationMatrix = { "rotationMatrix" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_GRETINAVariables = { "GRETINAVariables" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_globalHeader = { "globalHeader" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_mode3DataPacket = { "mode3DataPacket" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_g3Waveform = { "g3Waveform" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_g3ChannelEvent = { "g3ChannelEvent" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_g3CrystalEvent = { "g3CrystalEvent" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR = { "vector<g3ChannelEvent,allocator<g3ChannelEvent> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiterator = { "vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_g3OUT = { "g3OUT" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR = { "vector<g3CrystalEvent,allocator<g3CrystalEvent> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiterator = { "vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_mode3HistoryPacket = { "mode3HistoryPacket" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_historyEvent = { "historyEvent" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_g3HistoryEvent = { "g3HistoryEvent" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR = { "vector<historyEvent,allocator<historyEvent> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<historyEvent,allocator<historyEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_Bank29 = { "Bank29" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_ip = { "ip" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_ipOLD = { "ipOLD" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_mode2Old = { "mode2Old" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_mode2ABCD1234 = { "mode2ABCD1234" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_mode2ABCD5678 = { "mode2ABCD5678" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_g2IntPt = { "g2IntPt" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_g2CrystalEvent = { "g2CrystalEvent" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR = { "vector<g2IntPt,allocator<g2IntPt> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiterator = { "vector<g2IntPt,allocator<g2IntPt> >::iterator" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g2IntPt,allocator<g2IntPt> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_g2OUT = { "g2OUT" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR = { "vector<g2CrystalEvent,allocator<g2CrystalEvent> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiterator = { "vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_trackedGamma = { "trackedGamma" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_GTrackEvent = { "GTrackEvent" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR = { "vector<trackedGamma,allocator<trackedGamma> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiterator = { "vector<trackedGamma,allocator<trackedGamma> >::iterator" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<trackedGamma,allocator<trackedGamma> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_g1GammaEvent = { "g1GammaEvent" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_g1OUT = { "g1OUT" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR = { "vector<g1GammaEvent,allocator<g1GammaEvent> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiterator = { "vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_g4Sim_emittedGamma = { "g4Sim_emittedGamma" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_g4Sim_abcd1234 = { "g4Sim_abcd1234" , 115 , -1 };
G__linked_taginfo G__GRETINADictLN_g4SimOUT = { "g4SimOUT" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR = { "vector<g4Sim_abcd1234,allocator<g4Sim_abcd1234> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g4Sim_abcd1234,allocator<g4Sim_abcd1234> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_gHistos = { "gHistos" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_SuperPulse = { "SuperPulse" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_INLCorrection = { "INLCorrection" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_Histos = { "Histos" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR = { "vector<g3Waveform,allocator<g3Waveform> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiterator = { "vector<g3Waveform,allocator<g3Waveform> >::iterator" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g3Waveform,allocator<g3Waveform> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR = { "vector<ip,allocator<ip> >" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgRcLcLiterator = { "vector<ip,allocator<ip> >::iterator" , 99 , -1 };
G__linked_taginfo G__GRETINADictLN_reverse_iteratorlEvectorlEipcOallocatorlEipgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ip,allocator<ip> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGRETINADict() {
  G__GRETINADictLN_TClass.tagnum = -1 ;
  G__GRETINADictLN_TBuffer.tagnum = -1 ;
  G__GRETINADictLN_TMemberInspector.tagnum = -1 ;
  G__GRETINADictLN_TObject.tagnum = -1 ;
  G__GRETINADictLN_TString.tagnum = -1 ;
  G__GRETINADictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__GRETINADictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__GRETINADictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__GRETINADictLN_TVector3.tagnum = -1 ;
  G__GRETINADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__GRETINADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_PM.tagnum = -1 ;
  G__GRETINADictLN_TrackClusterIP.tagnum = -1 ;
  G__GRETINADictLN_TrackCluster.tagnum = -1 ;
  G__GRETINADictLN_TrackShell.tagnum = -1 ;
  G__GRETINADictLN_TrackCtrl.tagnum = -1 ;
  G__GRETINADictLN_TrackStat.tagnum = -1 ;
  G__GRETINADictLN_TrackPerm.tagnum = -1 ;
  G__GRETINADictLN_Track.tagnum = -1 ;
  G__GRETINADictLN_TH1I.tagnum = -1 ;
  G__GRETINADictLN_TH1F.tagnum = -1 ;
  G__GRETINADictLN_TH2F.tagnum = -1 ;
  G__GRETINADictLN_TH3F.tagnum = -1 ;
  G__GRETINADictLN_controlVariables.tagnum = -1 ;
  G__GRETINADictLN_counterVariables.tagnum = -1 ;
  G__GRETINADictLN_GRETINA.tagnum = -1 ;
  G__GRETINADictLN_rotationMatrix.tagnum = -1 ;
  G__GRETINADictLN_GRETINAVariables.tagnum = -1 ;
  G__GRETINADictLN_globalHeader.tagnum = -1 ;
  G__GRETINADictLN_mode3DataPacket.tagnum = -1 ;
  G__GRETINADictLN_g3Waveform.tagnum = -1 ;
  G__GRETINADictLN_g3ChannelEvent.tagnum = -1 ;
  G__GRETINADictLN_g3CrystalEvent.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiterator.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_g3OUT.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiterator.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_mode3HistoryPacket.tagnum = -1 ;
  G__GRETINADictLN_historyEvent.tagnum = -1 ;
  G__GRETINADictLN_g3HistoryEvent.tagnum = -1 ;
  G__GRETINADictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_Bank29.tagnum = -1 ;
  G__GRETINADictLN_ip.tagnum = -1 ;
  G__GRETINADictLN_ipOLD.tagnum = -1 ;
  G__GRETINADictLN_mode2Old.tagnum = -1 ;
  G__GRETINADictLN_mode2ABCD1234.tagnum = -1 ;
  G__GRETINADictLN_mode2ABCD5678.tagnum = -1 ;
  G__GRETINADictLN_g2IntPt.tagnum = -1 ;
  G__GRETINADictLN_g2CrystalEvent.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiterator.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_g2OUT.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiterator.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_trackedGamma.tagnum = -1 ;
  G__GRETINADictLN_GTrackEvent.tagnum = -1 ;
  G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiterator.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_g1GammaEvent.tagnum = -1 ;
  G__GRETINADictLN_g1OUT.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiterator.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_g4Sim_emittedGamma.tagnum = -1 ;
  G__GRETINADictLN_g4Sim_abcd1234.tagnum = -1 ;
  G__GRETINADictLN_g4SimOUT.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_gHistos.tagnum = -1 ;
  G__GRETINADictLN_SuperPulse.tagnum = -1 ;
  G__GRETINADictLN_INLCorrection.tagnum = -1 ;
  G__GRETINADictLN_Histos.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiterator.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR.tagnum = -1 ;
  G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgRcLcLiterator.tagnum = -1 ;
  G__GRETINADictLN_reverse_iteratorlEvectorlEipcOallocatorlEipgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGRETINADict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TClass);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TObject);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TString);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEshortcOallocatorlEshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_PM),sizeof(PM),-1,262144,(char*)NULL,G__setup_memvarPM,G__setup_memfuncPM);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_TrackClusterIP),sizeof(TrackClusterIP),-1,290816,(char*)NULL,G__setup_memvarTrackClusterIP,G__setup_memfuncTrackClusterIP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_TrackCluster),sizeof(TrackCluster),-1,290816,(char*)NULL,G__setup_memvarTrackCluster,G__setup_memfuncTrackCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_TrackShell),sizeof(TrackShell),-1,290816,(char*)NULL,G__setup_memvarTrackShell,G__setup_memfuncTrackShell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_TrackCtrl),sizeof(TrackCtrl),-1,290816,(char*)NULL,G__setup_memvarTrackCtrl,G__setup_memfuncTrackCtrl);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_TrackStat),sizeof(TrackStat),-1,290816,(char*)NULL,G__setup_memvarTrackStat,G__setup_memfuncTrackStat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_TrackPerm),sizeof(TrackPerm),-1,290816,(char*)NULL,G__setup_memvarTrackPerm,G__setup_memfuncTrackPerm);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_Track),sizeof(Track),-1,292096,(char*)NULL,G__setup_memvarTrack,G__setup_memfuncTrack);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TH1I);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_TH3F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_controlVariables),sizeof(controlVariables),-1,292096,(char*)NULL,G__setup_memvarcontrolVariables,G__setup_memfunccontrolVariables);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_counterVariables),sizeof(counterVariables),-1,292096,(char*)NULL,G__setup_memvarcounterVariables,G__setup_memfunccounterVariables);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_GRETINA),sizeof(GRETINA),-1,292096,(char*)NULL,G__setup_memvarGRETINA,G__setup_memfuncGRETINA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_rotationMatrix),sizeof(rotationMatrix),-1,324864,(char*)NULL,G__setup_memvarrotationMatrix,G__setup_memfuncrotationMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_GRETINAVariables),sizeof(GRETINAVariables),-1,292096,(char*)NULL,G__setup_memvarGRETINAVariables,G__setup_memfuncGRETINAVariables);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_globalHeader),sizeof(globalHeader),-1,262144,(char*)NULL,G__setup_memvarglobalHeader,G__setup_memfuncglobalHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_mode3DataPacket),sizeof(mode3DataPacket),-1,262144,(char*)NULL,G__setup_memvarmode3DataPacket,G__setup_memfuncmode3DataPacket);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g3Waveform),sizeof(g3Waveform),-1,290816,(char*)NULL,G__setup_memvarg3Waveform,G__setup_memfuncg3Waveform);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g3ChannelEvent),sizeof(g3ChannelEvent),-1,290816,(char*)NULL,G__setup_memvarg3ChannelEvent,G__setup_memfuncg3ChannelEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g3CrystalEvent),sizeof(g3CrystalEvent),-1,290816,(char*)NULL,G__setup_memvarg3CrystalEvent,G__setup_memfuncg3CrystalEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR),sizeof(vector<g3ChannelEvent,allocator<g3ChannelEvent> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR,G__setup_memfuncvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g3OUT),sizeof(g3OUT),-1,292096,(char*)NULL,G__setup_memvarg3OUT,G__setup_memfuncg3OUT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR),sizeof(vector<g3CrystalEvent,allocator<g3CrystalEvent> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR,G__setup_memfuncvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_mode3HistoryPacket),sizeof(mode3HistoryPacket),-1,262144,(char*)NULL,G__setup_memvarmode3HistoryPacket,G__setup_memfuncmode3HistoryPacket);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_historyEvent),sizeof(historyEvent),-1,262144,(char*)NULL,G__setup_memvarhistoryEvent,G__setup_memfunchistoryEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g3HistoryEvent),sizeof(g3HistoryEvent),-1,292096,(char*)NULL,G__setup_memvarg3HistoryEvent,G__setup_memfuncg3HistoryEvent);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_Bank29),sizeof(Bank29),-1,292096,(char*)NULL,G__setup_memvarBank29,G__setup_memfuncBank29);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_ip),sizeof(ip),-1,262144,(char*)NULL,G__setup_memvarip,G__setup_memfuncip);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_ipOLD),sizeof(ipOLD),-1,262144,(char*)NULL,G__setup_memvaripOLD,G__setup_memfuncipOLD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_mode2Old),sizeof(mode2Old),-1,262144,(char*)NULL,G__setup_memvarmode2Old,G__setup_memfuncmode2Old);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_mode2ABCD1234),sizeof(mode2ABCD1234),-1,262144,(char*)NULL,G__setup_memvarmode2ABCD1234,G__setup_memfuncmode2ABCD1234);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_mode2ABCD5678),sizeof(mode2ABCD5678),-1,262144,(char*)NULL,G__setup_memvarmode2ABCD5678,G__setup_memfuncmode2ABCD5678);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g2IntPt),sizeof(g2IntPt),-1,292096,(char*)NULL,G__setup_memvarg2IntPt,G__setup_memfuncg2IntPt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g2CrystalEvent),sizeof(g2CrystalEvent),-1,292096,(char*)NULL,G__setup_memvarg2CrystalEvent,G__setup_memfuncg2CrystalEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR),sizeof(vector<g2IntPt,allocator<g2IntPt> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR,G__setup_memfuncvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g2OUT),sizeof(g2OUT),-1,292096,(char*)NULL,G__setup_memvarg2OUT,G__setup_memfuncg2OUT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR),sizeof(vector<g2CrystalEvent,allocator<g2CrystalEvent> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR,G__setup_memfuncvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_trackedGamma),sizeof(trackedGamma),-1,262144,(char*)NULL,G__setup_memvartrackedGamma,G__setup_memfunctrackedGamma);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_GTrackEvent),sizeof(GTrackEvent),-1,292096,(char*)NULL,G__setup_memvarGTrackEvent,G__setup_memfuncGTrackEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR),sizeof(vector<trackedGamma,allocator<trackedGamma> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR,G__setup_memfuncvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g1GammaEvent),sizeof(g1GammaEvent),-1,292096,(char*)NULL,G__setup_memvarg1GammaEvent,G__setup_memfuncg1GammaEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g1OUT),sizeof(g1OUT),-1,292096,(char*)NULL,G__setup_memvarg1OUT,G__setup_memfuncg1OUT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR),sizeof(vector<g1GammaEvent,allocator<g1GammaEvent> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR,G__setup_memfuncvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g4Sim_emittedGamma),sizeof(g4Sim_emittedGamma),-1,262144,(char*)NULL,G__setup_memvarg4Sim_emittedGamma,G__setup_memfuncg4Sim_emittedGamma);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g4Sim_abcd1234),sizeof(g4Sim_abcd1234),-1,262144,(char*)NULL,G__setup_memvarg4Sim_abcd1234,G__setup_memfuncg4Sim_abcd1234);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_g4SimOUT),sizeof(g4SimOUT),-1,292096,(char*)NULL,G__setup_memvarg4SimOUT,G__setup_memfuncg4SimOUT);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_gHistos),sizeof(gHistos),-1,292096,(char*)NULL,G__setup_memvargHistos,G__setup_memfuncgHistos);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_SuperPulse),sizeof(SuperPulse),-1,292096,(char*)NULL,G__setup_memvarSuperPulse,G__setup_memfuncSuperPulse);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_INLCorrection),sizeof(INLCorrection),-1,292096,(char*)NULL,G__setup_memvarINLCorrection,G__setup_memfuncINLCorrection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_Histos),sizeof(Histos),-1,292096,(char*)NULL,G__setup_memvarHistos,G__setup_memfuncHistos);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR),sizeof(vector<g3Waveform,allocator<g3Waveform> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR,G__setup_memfuncvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEg3WaveformcOallocatorlEg3WaveformgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgR),sizeof(vector<ip,allocator<ip> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEipcOallocatorlEipgRsPgR,G__setup_memfuncvectorlEipcOallocatorlEipgRsPgR);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_vectorlEipcOallocatorlEipgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__GRETINADictLN_reverse_iteratorlEvectorlEipcOallocatorlEipgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupGRETINADict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGRETINADict()");
  G__set_cpp_environmentGRETINADict();
  G__cpp_setup_tagtableGRETINADict();

  G__cpp_setup_inheritanceGRETINADict();

  G__cpp_setup_typetableGRETINADict();

  G__cpp_setup_memvarGRETINADict();

  G__cpp_setup_memfuncGRETINADict();
  G__cpp_setup_globalGRETINADict();
  G__cpp_setup_funcGRETINADict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGRETINADict();
  return;
}
class G__cpp_setup_initGRETINADict {
  public:
    G__cpp_setup_initGRETINADict() { G__add_setup_func("GRETINADict",(G__incsetup)(&G__cpp_setupGRETINADict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGRETINADict() { G__remove_setup_func("GRETINADict"); }
};
G__cpp_setup_initGRETINADict G__cpp_setup_initializerGRETINADict;

