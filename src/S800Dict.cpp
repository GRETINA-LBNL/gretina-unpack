//
// File generated by rootcint at Thu Sep  8 13:34:35 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdIS800Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "S800Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::s800Phys s800Phys;
      #else
      class s800Phys  {
         public:
         //friend XX;
         int type; //
         float crdc1_x; //
         float crdc1_y; //
         float crdc2_x; //
         float crdc2_y; //
         float ic_sum; //
         float tof_xfp; //
         float tof_obj; //
         float rf; //
         int trigger; //
         float ic_de; //
         float tof_xfpe1; //
         float tof_obje1; //
         float tof_rfe1; //
         float ata; //
         float bta; //
         float dta; //
         float yta; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void S800Full_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Full(void *p = 0);
   static void *newArray_S800Full(Long_t size, void *p);
   static void delete_S800Full(void *p);
   static void deleteArray_S800Full(void *p);
   static void destruct_S800Full(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Full*)
   {
      ::S800Full *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Full >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Full", ::S800Full::Class_Version(), "./src/S800Parameters.h", 1232,
                  typeid(::S800Full), DefineBehavior(ptr, ptr),
                  &::S800Full::Dictionary, isa_proxy, 4,
                  sizeof(::S800Full) );
      instance.SetNew(&new_S800Full);
      instance.SetNewArray(&newArray_S800Full);
      instance.SetDelete(&delete_S800Full);
      instance.SetDeleteArray(&deleteArray_S800Full);
      instance.SetDestructor(&destruct_S800Full);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Full*)
   {
      return GenerateInitInstanceLocal((::S800Full*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Full*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Scaler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Scaler(void *p = 0);
   static void *newArray_S800Scaler(Long_t size, void *p);
   static void delete_S800Scaler(void *p);
   static void deleteArray_S800Scaler(void *p);
   static void destruct_S800Scaler(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Scaler*)
   {
      ::S800Scaler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Scaler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Scaler", ::S800Scaler::Class_Version(), "./src/S800Parameters.h", 1290,
                  typeid(::S800Scaler), DefineBehavior(ptr, ptr),
                  &::S800Scaler::Dictionary, isa_proxy, 4,
                  sizeof(::S800Scaler) );
      instance.SetNew(&new_S800Scaler);
      instance.SetNewArray(&newArray_S800Scaler);
      instance.SetDelete(&delete_S800Scaler);
      instance.SetDeleteArray(&deleteArray_S800Scaler);
      instance.SetDestructor(&destruct_S800Scaler);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Scaler*)
   {
      return GenerateInitInstanceLocal((::S800Scaler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Scaler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800ImMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800ImMap(void *p = 0);
   static void *newArray_S800ImMap(Long_t size, void *p);
   static void delete_S800ImMap(void *p);
   static void deleteArray_S800ImMap(void *p);
   static void destruct_S800ImMap(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800ImMap*)
   {
      ::S800ImMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800ImMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800ImMap", ::S800ImMap::Class_Version(), "./src/S800Parameters.h", 56,
                  typeid(::S800ImMap), DefineBehavior(ptr, ptr),
                  &::S800ImMap::Dictionary, isa_proxy, 4,
                  sizeof(::S800ImMap) );
      instance.SetNew(&new_S800ImMap);
      instance.SetNewArray(&newArray_S800ImMap);
      instance.SetDelete(&delete_S800ImMap);
      instance.SetDeleteArray(&deleteArray_S800ImMap);
      instance.SetDestructor(&destruct_S800ImMap);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800ImMap*)
   {
      return GenerateInitInstanceLocal((::S800ImMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800ImMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Map_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Map(void *p = 0);
   static void *newArray_S800Map(Long_t size, void *p);
   static void delete_S800Map(void *p);
   static void deleteArray_S800Map(void *p);
   static void destruct_S800Map(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Map*)
   {
      ::S800Map *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Map >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Map", ::S800Map::Class_Version(), "./src/S800Parameters.h", 147,
                  typeid(::S800Map), DefineBehavior(ptr, ptr),
                  &::S800Map::Dictionary, isa_proxy, 4,
                  sizeof(::S800Map) );
      instance.SetNew(&new_S800Map);
      instance.SetNewArray(&newArray_S800Map);
      instance.SetDelete(&delete_S800Map);
      instance.SetDeleteArray(&deleteArray_S800Map);
      instance.SetDestructor(&destruct_S800Map);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Map*)
   {
      return GenerateInitInstanceLocal((::S800Map*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Map*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800FpCrdcCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800FpCrdcCalc(void *p = 0);
   static void *newArray_S800FpCrdcCalc(Long_t size, void *p);
   static void delete_S800FpCrdcCalc(void *p);
   static void deleteArray_S800FpCrdcCalc(void *p);
   static void destruct_S800FpCrdcCalc(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800FpCrdcCalc*)
   {
      ::S800FpCrdcCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800FpCrdcCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800FpCrdcCalc", ::S800FpCrdcCalc::Class_Version(), "./src/S800Parameters.h", 285,
                  typeid(::S800FpCrdcCalc), DefineBehavior(ptr, ptr),
                  &::S800FpCrdcCalc::Dictionary, isa_proxy, 4,
                  sizeof(::S800FpCrdcCalc) );
      instance.SetNew(&new_S800FpCrdcCalc);
      instance.SetNewArray(&newArray_S800FpCrdcCalc);
      instance.SetDelete(&delete_S800FpCrdcCalc);
      instance.SetDeleteArray(&deleteArray_S800FpCrdcCalc);
      instance.SetDestructor(&destruct_S800FpCrdcCalc);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800FpCrdcCalc*)
   {
      return GenerateInitInstanceLocal((::S800FpCrdcCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800FpCrdcCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800FpCrdcPads_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800FpCrdcPads(void *p = 0);
   static void *newArray_S800FpCrdcPads(Long_t size, void *p);
   static void delete_S800FpCrdcPads(void *p);
   static void deleteArray_S800FpCrdcPads(void *p);
   static void destruct_S800FpCrdcPads(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800FpCrdcPads*)
   {
      ::S800FpCrdcPads *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800FpCrdcPads >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800FpCrdcPads", ::S800FpCrdcPads::Class_Version(), "./src/S800Parameters.h", 220,
                  typeid(::S800FpCrdcPads), DefineBehavior(ptr, ptr),
                  &::S800FpCrdcPads::Dictionary, isa_proxy, 4,
                  sizeof(::S800FpCrdcPads) );
      instance.SetNew(&new_S800FpCrdcPads);
      instance.SetNewArray(&newArray_S800FpCrdcPads);
      instance.SetDelete(&delete_S800FpCrdcPads);
      instance.SetDeleteArray(&deleteArray_S800FpCrdcPads);
      instance.SetDestructor(&destruct_S800FpCrdcPads);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800FpCrdcPads*)
   {
      return GenerateInitInstanceLocal((::S800FpCrdcPads*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800FpCrdcPads*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800FpCrdc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800FpCrdc(void *p = 0);
   static void *newArray_S800FpCrdc(Long_t size, void *p);
   static void delete_S800FpCrdc(void *p);
   static void deleteArray_S800FpCrdc(void *p);
   static void destruct_S800FpCrdc(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800FpCrdc*)
   {
      ::S800FpCrdc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800FpCrdc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800FpCrdc", ::S800FpCrdc::Class_Version(), "./src/S800Parameters.h", 355,
                  typeid(::S800FpCrdc), DefineBehavior(ptr, ptr),
                  &::S800FpCrdc::Dictionary, isa_proxy, 4,
                  sizeof(::S800FpCrdc) );
      instance.SetNew(&new_S800FpCrdc);
      instance.SetNewArray(&newArray_S800FpCrdc);
      instance.SetDelete(&delete_S800FpCrdc);
      instance.SetDeleteArray(&deleteArray_S800FpCrdc);
      instance.SetDestructor(&destruct_S800FpCrdc);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800FpCrdc*)
   {
      return GenerateInitInstanceLocal((::S800FpCrdc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800FpCrdc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Tppac_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Tppac(void *p = 0);
   static void *newArray_S800Tppac(Long_t size, void *p);
   static void delete_S800Tppac(void *p);
   static void deleteArray_S800Tppac(void *p);
   static void destruct_S800Tppac(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Tppac*)
   {
      ::S800Tppac *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Tppac >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Tppac", ::S800Tppac::Class_Version(), "./src/S800Parameters.h", 393,
                  typeid(::S800Tppac), DefineBehavior(ptr, ptr),
                  &::S800Tppac::Dictionary, isa_proxy, 4,
                  sizeof(::S800Tppac) );
      instance.SetNew(&new_S800Tppac);
      instance.SetNewArray(&newArray_S800Tppac);
      instance.SetDelete(&delete_S800Tppac);
      instance.SetDeleteArray(&deleteArray_S800Tppac);
      instance.SetDestructor(&destruct_S800Tppac);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Tppac*)
   {
      return GenerateInitInstanceLocal((::S800Tppac*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Tppac*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Track(void *p = 0);
   static void *newArray_S800Track(Long_t size, void *p);
   static void delete_S800Track(void *p);
   static void deleteArray_S800Track(void *p);
   static void destruct_S800Track(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Track*)
   {
      ::S800Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Track", ::S800Track::Class_Version(), "./src/S800Parameters.h", 443,
                  typeid(::S800Track), DefineBehavior(ptr, ptr),
                  &::S800Track::Dictionary, isa_proxy, 4,
                  sizeof(::S800Track) );
      instance.SetNew(&new_S800Track);
      instance.SetNewArray(&newArray_S800Track);
      instance.SetDelete(&delete_S800Track);
      instance.SetDeleteArray(&deleteArray_S800Track);
      instance.SetDestructor(&destruct_S800Track);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Track*)
   {
      return GenerateInitInstanceLocal((::S800Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800FpIonChamber_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800FpIonChamber(void *p = 0);
   static void *newArray_S800FpIonChamber(Long_t size, void *p);
   static void delete_S800FpIonChamber(void *p);
   static void deleteArray_S800FpIonChamber(void *p);
   static void destruct_S800FpIonChamber(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800FpIonChamber*)
   {
      ::S800FpIonChamber *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800FpIonChamber >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800FpIonChamber", ::S800FpIonChamber::Class_Version(), "./src/S800Parameters.h", 513,
                  typeid(::S800FpIonChamber), DefineBehavior(ptr, ptr),
                  &::S800FpIonChamber::Dictionary, isa_proxy, 4,
                  sizeof(::S800FpIonChamber) );
      instance.SetNew(&new_S800FpIonChamber);
      instance.SetNewArray(&newArray_S800FpIonChamber);
      instance.SetDelete(&delete_S800FpIonChamber);
      instance.SetDeleteArray(&deleteArray_S800FpIonChamber);
      instance.SetDestructor(&destruct_S800FpIonChamber);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800FpIonChamber*)
   {
      return GenerateInitInstanceLocal((::S800FpIonChamber*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800FpIonChamber*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800FpScintillator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800FpScintillator(void *p = 0);
   static void *newArray_S800FpScintillator(Long_t size, void *p);
   static void delete_S800FpScintillator(void *p);
   static void deleteArray_S800FpScintillator(void *p);
   static void destruct_S800FpScintillator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800FpScintillator*)
   {
      ::S800FpScintillator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800FpScintillator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800FpScintillator", ::S800FpScintillator::Class_Version(), "./src/S800Parameters.h", 577,
                  typeid(::S800FpScintillator), DefineBehavior(ptr, ptr),
                  &::S800FpScintillator::Dictionary, isa_proxy, 4,
                  sizeof(::S800FpScintillator) );
      instance.SetNew(&new_S800FpScintillator);
      instance.SetNewArray(&newArray_S800FpScintillator);
      instance.SetDelete(&delete_S800FpScintillator);
      instance.SetDeleteArray(&deleteArray_S800FpScintillator);
      instance.SetDestructor(&destruct_S800FpScintillator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800FpScintillator*)
   {
      return GenerateInitInstanceLocal((::S800FpScintillator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800FpScintillator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800FpTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800FpTrack(void *p = 0);
   static void *newArray_S800FpTrack(Long_t size, void *p);
   static void delete_S800FpTrack(void *p);
   static void deleteArray_S800FpTrack(void *p);
   static void destruct_S800FpTrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800FpTrack*)
   {
      ::S800FpTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800FpTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800FpTrack", ::S800FpTrack::Class_Version(), "./src/S800Parameters.h", 603,
                  typeid(::S800FpTrack), DefineBehavior(ptr, ptr),
                  &::S800FpTrack::Dictionary, isa_proxy, 4,
                  sizeof(::S800FpTrack) );
      instance.SetNew(&new_S800FpTrack);
      instance.SetNewArray(&newArray_S800FpTrack);
      instance.SetDelete(&delete_S800FpTrack);
      instance.SetDeleteArray(&deleteArray_S800FpTrack);
      instance.SetDestructor(&destruct_S800FpTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800FpTrack*)
   {
      return GenerateInitInstanceLocal((::S800FpTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800FpTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800FpHodo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800FpHodo(void *p = 0);
   static void *newArray_S800FpHodo(Long_t size, void *p);
   static void delete_S800FpHodo(void *p);
   static void deleteArray_S800FpHodo(void *p);
   static void destruct_S800FpHodo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800FpHodo*)
   {
      ::S800FpHodo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800FpHodo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800FpHodo", ::S800FpHodo::Class_Version(), "./src/S800Parameters.h", 662,
                  typeid(::S800FpHodo), DefineBehavior(ptr, ptr),
                  &::S800FpHodo::Dictionary, isa_proxy, 4,
                  sizeof(::S800FpHodo) );
      instance.SetNew(&new_S800FpHodo);
      instance.SetNewArray(&newArray_S800FpHodo);
      instance.SetDelete(&delete_S800FpHodo);
      instance.SetDeleteArray(&deleteArray_S800FpHodo);
      instance.SetDestructor(&destruct_S800FpHodo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800FpHodo*)
   {
      return GenerateInitInstanceLocal((::S800FpHodo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800FpHodo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800FocalPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800FocalPlane(void *p = 0);
   static void *newArray_S800FocalPlane(Long_t size, void *p);
   static void delete_S800FocalPlane(void *p);
   static void deleteArray_S800FocalPlane(void *p);
   static void destruct_S800FocalPlane(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800FocalPlane*)
   {
      ::S800FocalPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800FocalPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800FocalPlane", ::S800FocalPlane::Class_Version(), "./src/S800Parameters.h", 714,
                  typeid(::S800FocalPlane), DefineBehavior(ptr, ptr),
                  &::S800FocalPlane::Dictionary, isa_proxy, 4,
                  sizeof(::S800FocalPlane) );
      instance.SetNew(&new_S800FocalPlane);
      instance.SetNewArray(&newArray_S800FocalPlane);
      instance.SetDelete(&delete_S800FocalPlane);
      instance.SetDeleteArray(&deleteArray_S800FocalPlane);
      instance.SetDestructor(&destruct_S800FocalPlane);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800FocalPlane*)
   {
      return GenerateInitInstanceLocal((::S800FocalPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800FocalPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800ClassicPpac_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800ClassicPpac(void *p = 0);
   static void *newArray_S800ClassicPpac(Long_t size, void *p);
   static void delete_S800ClassicPpac(void *p);
   static void deleteArray_S800ClassicPpac(void *p);
   static void destruct_S800ClassicPpac(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800ClassicPpac*)
   {
      ::S800ClassicPpac *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800ClassicPpac >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800ClassicPpac", ::S800ClassicPpac::Class_Version(), "./src/S800Parameters.h", 754,
                  typeid(::S800ClassicPpac), DefineBehavior(ptr, ptr),
                  &::S800ClassicPpac::Dictionary, isa_proxy, 4,
                  sizeof(::S800ClassicPpac) );
      instance.SetNew(&new_S800ClassicPpac);
      instance.SetNewArray(&newArray_S800ClassicPpac);
      instance.SetDelete(&delete_S800ClassicPpac);
      instance.SetDeleteArray(&deleteArray_S800ClassicPpac);
      instance.SetDestructor(&destruct_S800ClassicPpac);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800ClassicPpac*)
   {
      return GenerateInitInstanceLocal((::S800ClassicPpac*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800ClassicPpac*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Image_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Image(void *p = 0);
   static void *newArray_S800Image(Long_t size, void *p);
   static void delete_S800Image(void *p);
   static void deleteArray_S800Image(void *p);
   static void destruct_S800Image(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Image*)
   {
      ::S800Image *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Image >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Image", ::S800Image::Class_Version(), "./src/S800Parameters.h", 795,
                  typeid(::S800Image), DefineBehavior(ptr, ptr),
                  &::S800Image::Dictionary, isa_proxy, 4,
                  sizeof(::S800Image) );
      instance.SetNew(&new_S800Image);
      instance.SetNewArray(&newArray_S800Image);
      instance.SetDelete(&delete_S800Image);
      instance.SetDeleteArray(&deleteArray_S800Image);
      instance.SetDestructor(&destruct_S800Image);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Image*)
   {
      return GenerateInitInstanceLocal((::S800Image*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Image*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800TimeStamp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800TimeStamp(void *p = 0);
   static void *newArray_S800TimeStamp(Long_t size, void *p);
   static void delete_S800TimeStamp(void *p);
   static void deleteArray_S800TimeStamp(void *p);
   static void destruct_S800TimeStamp(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800TimeStamp*)
   {
      ::S800TimeStamp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800TimeStamp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800TimeStamp", ::S800TimeStamp::Class_Version(), "./src/S800Parameters.h", 840,
                  typeid(::S800TimeStamp), DefineBehavior(ptr, ptr),
                  &::S800TimeStamp::Dictionary, isa_proxy, 4,
                  sizeof(::S800TimeStamp) );
      instance.SetNew(&new_S800TimeStamp);
      instance.SetNewArray(&newArray_S800TimeStamp);
      instance.SetDelete(&delete_S800TimeStamp);
      instance.SetDeleteArray(&deleteArray_S800TimeStamp);
      instance.SetDestructor(&destruct_S800TimeStamp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800TimeStamp*)
   {
      return GenerateInitInstanceLocal((::S800TimeStamp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800TimeStamp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800EventNumber_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800EventNumber(void *p = 0);
   static void *newArray_S800EventNumber(Long_t size, void *p);
   static void delete_S800EventNumber(void *p);
   static void deleteArray_S800EventNumber(void *p);
   static void destruct_S800EventNumber(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800EventNumber*)
   {
      ::S800EventNumber *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800EventNumber >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800EventNumber", ::S800EventNumber::Class_Version(), "./src/S800Parameters.h", 863,
                  typeid(::S800EventNumber), DefineBehavior(ptr, ptr),
                  &::S800EventNumber::Dictionary, isa_proxy, 4,
                  sizeof(::S800EventNumber) );
      instance.SetNew(&new_S800EventNumber);
      instance.SetNewArray(&newArray_S800EventNumber);
      instance.SetDelete(&delete_S800EventNumber);
      instance.SetDeleteArray(&deleteArray_S800EventNumber);
      instance.SetDestructor(&destruct_S800EventNumber);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800EventNumber*)
   {
      return GenerateInitInstanceLocal((::S800EventNumber*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800EventNumber*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Trigger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Trigger(void *p = 0);
   static void *newArray_S800Trigger(Long_t size, void *p);
   static void delete_S800Trigger(void *p);
   static void deleteArray_S800Trigger(void *p);
   static void destruct_S800Trigger(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Trigger*)
   {
      ::S800Trigger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Trigger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Trigger", ::S800Trigger::Class_Version(), "./src/S800Parameters.h", 896,
                  typeid(::S800Trigger), DefineBehavior(ptr, ptr),
                  &::S800Trigger::Dictionary, isa_proxy, 4,
                  sizeof(::S800Trigger) );
      instance.SetNew(&new_S800Trigger);
      instance.SetNewArray(&newArray_S800Trigger);
      instance.SetDelete(&delete_S800Trigger);
      instance.SetDeleteArray(&deleteArray_S800Trigger);
      instance.SetDestructor(&destruct_S800Trigger);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Trigger*)
   {
      return GenerateInitInstanceLocal((::S800Trigger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Trigger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800TimeOfFlight_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800TimeOfFlight(void *p = 0);
   static void *newArray_S800TimeOfFlight(Long_t size, void *p);
   static void delete_S800TimeOfFlight(void *p);
   static void deleteArray_S800TimeOfFlight(void *p);
   static void destruct_S800TimeOfFlight(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800TimeOfFlight*)
   {
      ::S800TimeOfFlight *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800TimeOfFlight >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800TimeOfFlight", ::S800TimeOfFlight::Class_Version(), "./src/S800Parameters.h", 964,
                  typeid(::S800TimeOfFlight), DefineBehavior(ptr, ptr),
                  &::S800TimeOfFlight::Dictionary, isa_proxy, 4,
                  sizeof(::S800TimeOfFlight) );
      instance.SetNew(&new_S800TimeOfFlight);
      instance.SetNewArray(&newArray_S800TimeOfFlight);
      instance.SetDelete(&delete_S800TimeOfFlight);
      instance.SetDeleteArray(&deleteArray_S800TimeOfFlight);
      instance.SetDestructor(&destruct_S800TimeOfFlight);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800TimeOfFlight*)
   {
      return GenerateInitInstanceLocal((::S800TimeOfFlight*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800TimeOfFlight*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Pin_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Pin(void *p = 0);
   static void *newArray_S800Pin(Long_t size, void *p);
   static void delete_S800Pin(void *p);
   static void deleteArray_S800Pin(void *p);
   static void destruct_S800Pin(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Pin*)
   {
      ::S800Pin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Pin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Pin", ::S800Pin::Class_Version(), "./src/S800Parameters.h", 1045,
                  typeid(::S800Pin), DefineBehavior(ptr, ptr),
                  &::S800Pin::Dictionary, isa_proxy, 4,
                  sizeof(::S800Pin) );
      instance.SetNew(&new_S800Pin);
      instance.SetNewArray(&newArray_S800Pin);
      instance.SetDelete(&delete_S800Pin);
      instance.SetDeleteArray(&deleteArray_S800Pin);
      instance.SetDestructor(&destruct_S800Pin);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Pin*)
   {
      return GenerateInitInstanceLocal((::S800Pin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Pin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800LaBr_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800LaBr(void *p = 0);
   static void *newArray_S800LaBr(Long_t size, void *p);
   static void delete_S800LaBr(void *p);
   static void deleteArray_S800LaBr(void *p);
   static void destruct_S800LaBr(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800LaBr*)
   {
      ::S800LaBr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800LaBr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800LaBr", ::S800LaBr::Class_Version(), "./src/S800Parameters.h", 1075,
                  typeid(::S800LaBr), DefineBehavior(ptr, ptr),
                  &::S800LaBr::Dictionary, isa_proxy, 4,
                  sizeof(::S800LaBr) );
      instance.SetNew(&new_S800LaBr);
      instance.SetNewArray(&newArray_S800LaBr);
      instance.SetDelete(&delete_S800LaBr);
      instance.SetDeleteArray(&deleteArray_S800LaBr);
      instance.SetDestructor(&destruct_S800LaBr);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800LaBr*)
   {
      return GenerateInitInstanceLocal((::S800LaBr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800LaBr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Object_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Object(void *p = 0);
   static void *newArray_S800Object(Long_t size, void *p);
   static void delete_S800Object(void *p);
   static void deleteArray_S800Object(void *p);
   static void destruct_S800Object(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Object*)
   {
      ::S800Object *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Object >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Object", ::S800Object::Class_Version(), "./src/S800Parameters.h", 1095,
                  typeid(::S800Object), DefineBehavior(ptr, ptr),
                  &::S800Object::Dictionary, isa_proxy, 4,
                  sizeof(::S800Object) );
      instance.SetNew(&new_S800Object);
      instance.SetNewArray(&newArray_S800Object);
      instance.SetDelete(&delete_S800Object);
      instance.SetDeleteArray(&deleteArray_S800Object);
      instance.SetDestructor(&destruct_S800Object);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Object*)
   {
      return GenerateInitInstanceLocal((::S800Object*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Object*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Ppac_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Ppac(void *p = 0);
   static void *newArray_S800Ppac(Long_t size, void *p);
   static void delete_S800Ppac(void *p);
   static void deleteArray_S800Ppac(void *p);
   static void destruct_S800Ppac(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Ppac*)
   {
      ::S800Ppac *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Ppac >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Ppac", ::S800Ppac::Class_Version(), "./src/S800Parameters.h", 1117,
                  typeid(::S800Ppac), DefineBehavior(ptr, ptr),
                  &::S800Ppac::Dictionary, isa_proxy, 4,
                  sizeof(::S800Ppac) );
      instance.SetNew(&new_S800Ppac);
      instance.SetNewArray(&newArray_S800Ppac);
      instance.SetDelete(&delete_S800Ppac);
      instance.SetDeleteArray(&deleteArray_S800Ppac);
      instance.SetDestructor(&destruct_S800Ppac);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Ppac*)
   {
      return GenerateInitInstanceLocal((::S800Ppac*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Ppac*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void S800Target_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Target(void *p = 0);
   static void *newArray_S800Target(Long_t size, void *p);
   static void delete_S800Target(void *p);
   static void deleteArray_S800Target(void *p);
   static void destruct_S800Target(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Target*)
   {
      ::S800Target *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Target >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Target", ::S800Target::Class_Version(), "./src/S800Parameters.h", 1167,
                  typeid(::S800Target), DefineBehavior(ptr, ptr),
                  &::S800Target::Dictionary, isa_proxy, 4,
                  sizeof(::S800Target) );
      instance.SetNew(&new_S800Target);
      instance.SetNewArray(&newArray_S800Target);
      instance.SetDelete(&delete_S800Target);
      instance.SetDeleteArray(&deleteArray_S800Target);
      instance.SetDestructor(&destruct_S800Target);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Target*)
   {
      return GenerateInitInstanceLocal((::S800Target*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Target*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void s800Phys_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void s800Phys_Dictionary();
   static void *new_s800Phys(void *p = 0);
   static void *newArray_s800Phys(Long_t size, void *p);
   static void delete_s800Phys(void *p);
   static void deleteArray_s800Phys(void *p);
   static void destruct_s800Phys(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::s800Phys*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::s800Phys) == sizeof(::ROOT::Shadow::s800Phys));
      ::s800Phys *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::s800Phys),0);
      static ::ROOT::TGenericClassInfo 
         instance("s800Phys", "./src/S800Parameters.h", 1198,
                  typeid(::s800Phys), DefineBehavior(ptr, ptr),
                  &s800Phys_ShowMembers, &s800Phys_Dictionary, isa_proxy, 4,
                  sizeof(::s800Phys) );
      instance.SetNew(&new_s800Phys);
      instance.SetNewArray(&newArray_s800Phys);
      instance.SetDelete(&delete_s800Phys);
      instance.SetDeleteArray(&deleteArray_s800Phys);
      instance.SetDestructor(&destruct_s800Phys);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::s800Phys*)
   {
      return GenerateInitInstanceLocal((::s800Phys*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::s800Phys*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void s800Phys_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::s800Phys*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void S800Physics_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S800Physics(void *p = 0);
   static void *newArray_S800Physics(Long_t size, void *p);
   static void delete_S800Physics(void *p);
   static void deleteArray_S800Physics(void *p);
   static void destruct_S800Physics(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::S800Physics*)
   {
      ::S800Physics *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S800Physics >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S800Physics", ::S800Physics::Class_Version(), "./src/S800Parameters.h", 1219,
                  typeid(::S800Physics), DefineBehavior(ptr, ptr),
                  &::S800Physics::Dictionary, isa_proxy, 4,
                  sizeof(::S800Physics) );
      instance.SetNew(&new_S800Physics);
      instance.SetNewArray(&newArray_S800Physics);
      instance.SetDelete(&delete_S800Physics);
      instance.SetDeleteArray(&deleteArray_S800Physics);
      instance.SetDestructor(&destruct_S800Physics);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::S800Physics*)
   {
      return GenerateInitInstanceLocal((::S800Physics*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S800Physics*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *S800Full::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Full::Class_Name()
{
   return "S800Full";
}

//______________________________________________________________________________
const char *S800Full::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Full*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Full::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Full*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Full::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Full*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Full::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Full*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Scaler::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Scaler::Class_Name()
{
   return "S800Scaler";
}

//______________________________________________________________________________
const char *S800Scaler::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Scaler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Scaler::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Scaler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Scaler::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Scaler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Scaler::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Scaler*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800ImMap::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800ImMap::Class_Name()
{
   return "S800ImMap";
}

//______________________________________________________________________________
const char *S800ImMap::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800ImMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800ImMap::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800ImMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800ImMap::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800ImMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800ImMap::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800ImMap*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Map::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Map::Class_Name()
{
   return "S800Map";
}

//______________________________________________________________________________
const char *S800Map::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Map*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Map::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Map*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Map::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Map*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Map::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Map*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800FpCrdcCalc::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800FpCrdcCalc::Class_Name()
{
   return "S800FpCrdcCalc";
}

//______________________________________________________________________________
const char *S800FpCrdcCalc::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdcCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800FpCrdcCalc::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdcCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800FpCrdcCalc::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdcCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800FpCrdcCalc::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdcCalc*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800FpCrdcPads::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800FpCrdcPads::Class_Name()
{
   return "S800FpCrdcPads";
}

//______________________________________________________________________________
const char *S800FpCrdcPads::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdcPads*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800FpCrdcPads::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdcPads*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800FpCrdcPads::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdcPads*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800FpCrdcPads::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdcPads*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800FpCrdc::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800FpCrdc::Class_Name()
{
   return "S800FpCrdc";
}

//______________________________________________________________________________
const char *S800FpCrdc::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800FpCrdc::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800FpCrdc::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800FpCrdc::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpCrdc*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Tppac::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Tppac::Class_Name()
{
   return "S800Tppac";
}

//______________________________________________________________________________
const char *S800Tppac::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Tppac*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Tppac::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Tppac*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Tppac::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Tppac*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Tppac::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Tppac*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Track::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Track::Class_Name()
{
   return "S800Track";
}

//______________________________________________________________________________
const char *S800Track::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Track::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Track::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Track::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Track*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800FpIonChamber::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800FpIonChamber::Class_Name()
{
   return "S800FpIonChamber";
}

//______________________________________________________________________________
const char *S800FpIonChamber::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpIonChamber*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800FpIonChamber::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpIonChamber*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800FpIonChamber::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpIonChamber*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800FpIonChamber::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpIonChamber*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800FpScintillator::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800FpScintillator::Class_Name()
{
   return "S800FpScintillator";
}

//______________________________________________________________________________
const char *S800FpScintillator::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpScintillator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800FpScintillator::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpScintillator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800FpScintillator::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpScintillator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800FpScintillator::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpScintillator*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800FpTrack::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800FpTrack::Class_Name()
{
   return "S800FpTrack";
}

//______________________________________________________________________________
const char *S800FpTrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800FpTrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800FpTrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800FpTrack::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpTrack*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800FpHodo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800FpHodo::Class_Name()
{
   return "S800FpHodo";
}

//______________________________________________________________________________
const char *S800FpHodo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpHodo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800FpHodo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FpHodo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800FpHodo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpHodo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800FpHodo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FpHodo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800FocalPlane::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800FocalPlane::Class_Name()
{
   return "S800FocalPlane";
}

//______________________________________________________________________________
const char *S800FocalPlane::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FocalPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800FocalPlane::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800FocalPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800FocalPlane::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FocalPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800FocalPlane::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800FocalPlane*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800ClassicPpac::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800ClassicPpac::Class_Name()
{
   return "S800ClassicPpac";
}

//______________________________________________________________________________
const char *S800ClassicPpac::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800ClassicPpac*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800ClassicPpac::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800ClassicPpac*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800ClassicPpac::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800ClassicPpac*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800ClassicPpac::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800ClassicPpac*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Image::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Image::Class_Name()
{
   return "S800Image";
}

//______________________________________________________________________________
const char *S800Image::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Image*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Image::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Image*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Image::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Image*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Image::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Image*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800TimeStamp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800TimeStamp::Class_Name()
{
   return "S800TimeStamp";
}

//______________________________________________________________________________
const char *S800TimeStamp::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800TimeStamp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800TimeStamp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800TimeStamp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800TimeStamp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800TimeStamp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800TimeStamp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800TimeStamp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800EventNumber::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800EventNumber::Class_Name()
{
   return "S800EventNumber";
}

//______________________________________________________________________________
const char *S800EventNumber::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800EventNumber*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800EventNumber::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800EventNumber*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800EventNumber::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800EventNumber*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800EventNumber::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800EventNumber*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Trigger::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Trigger::Class_Name()
{
   return "S800Trigger";
}

//______________________________________________________________________________
const char *S800Trigger::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Trigger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Trigger::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Trigger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Trigger::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Trigger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Trigger::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Trigger*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800TimeOfFlight::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800TimeOfFlight::Class_Name()
{
   return "S800TimeOfFlight";
}

//______________________________________________________________________________
const char *S800TimeOfFlight::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800TimeOfFlight*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800TimeOfFlight::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800TimeOfFlight*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800TimeOfFlight::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800TimeOfFlight*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800TimeOfFlight::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800TimeOfFlight*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Pin::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Pin::Class_Name()
{
   return "S800Pin";
}

//______________________________________________________________________________
const char *S800Pin::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Pin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Pin::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Pin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Pin::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Pin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Pin::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Pin*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800LaBr::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800LaBr::Class_Name()
{
   return "S800LaBr";
}

//______________________________________________________________________________
const char *S800LaBr::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800LaBr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800LaBr::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800LaBr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800LaBr::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800LaBr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800LaBr::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800LaBr*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Object::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Object::Class_Name()
{
   return "S800Object";
}

//______________________________________________________________________________
const char *S800Object::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Object*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Object::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Object*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Object::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Object*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Object::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Object*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Ppac::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Ppac::Class_Name()
{
   return "S800Ppac";
}

//______________________________________________________________________________
const char *S800Ppac::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Ppac*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Ppac::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Ppac*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Ppac::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Ppac*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Ppac::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Ppac*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Target::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Target::Class_Name()
{
   return "S800Target";
}

//______________________________________________________________________________
const char *S800Target::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Target*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Target::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Target*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Target::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Target*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Target::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Target*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *S800Physics::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *S800Physics::Class_Name()
{
   return "S800Physics";
}

//______________________________________________________________________________
const char *S800Physics::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Physics*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S800Physics::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::S800Physics*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S800Physics::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Physics*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S800Physics::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::S800Physics*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void S800ImMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800ImMap.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800ImMap::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800ImMap::Class(),this);
   }
}

//______________________________________________________________________________
void S800ImMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800ImMap.
      TClass *R__cl = ::S800ImMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxcoefficient[6]", maxcoefficient);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "order[6][200]", order);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exponent[6][6][200]", exponent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "coefficient[6][200]", coefficient);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxcoefficients", &maxcoefficients);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxparameters", &maxparameters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxorder", &maxorder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "imMapFilename", &imMapFilename);
      R__insp.InspectMember(imMapFilename, "imMapFilename.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800ImMap(void *p) {
      return  p ? new(p) ::S800ImMap : new ::S800ImMap;
   }
   static void *newArray_S800ImMap(Long_t nElements, void *p) {
      return p ? new(p) ::S800ImMap[nElements] : new ::S800ImMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800ImMap(void *p) {
      delete ((::S800ImMap*)p);
   }
   static void deleteArray_S800ImMap(void *p) {
      delete [] ((::S800ImMap*)p);
   }
   static void destruct_S800ImMap(void *p) {
      typedef ::S800ImMap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800ImMap

//______________________________________________________________________________
void S800Map::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Map.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Map::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Map::Class(),this);
   }
}

//______________________________________________________________________________
void S800Map::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Map.
      TClass *R__cl = ::S800Map::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxcoefficient[6]", maxcoefficient);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "order[6][200]", order);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exponent[6][6][200]", exponent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "coefficient[6][200]", coefficient);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxcoefficients", &maxcoefficients);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxparameters", &maxparameters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxorder", &maxorder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mapFilename", &mapFilename);
      R__insp.InspectMember(mapFilename, "mapFilename.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Map(void *p) {
      return  p ? new(p) ::S800Map : new ::S800Map;
   }
   static void *newArray_S800Map(Long_t nElements, void *p) {
      return p ? new(p) ::S800Map[nElements] : new ::S800Map[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Map(void *p) {
      delete ((::S800Map*)p);
   }
   static void deleteArray_S800Map(void *p) {
      delete [] ((::S800Map*)p);
   }
   static void destruct_S800Map(void *p) {
      typedef ::S800Map current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Map

//______________________________________________________________________________
void S800FpCrdcPads::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800FpCrdcPads.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800FpCrdcPads::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800FpCrdcPads::Class(),this);
   }
}

//______________________________________________________________________________
void S800FpCrdcPads::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800FpCrdcPads.
      TClass *R__cl = ::S800FpCrdcPads::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_width", &m_width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_dprojX[224]", m_dprojX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_caltable[224][1024]", m_caltable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_minChn", &m_minChn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_maxChn", &m_maxChn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_padlist", (void*)&m_padlist);
      R__insp.InspectMember("vector<int>", (void*)&m_padlist, "m_padlist.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_padlist_iter", (void*)&m_padlist_iter);
      R__insp.InspectMember("vector<int,allocator<int> >::iterator", (void*)&m_padlist_iter, "m_padlist_iter.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_samples[224]", m_samples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "raw[224]", raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cal[224]", cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "samples[224]", samples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "samplemax[224]", samplemax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "samplemin[224]", samplemin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delta[224]", delta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_samplemax[224]", m_samplemax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_samplemin[224]", m_samplemin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ped[224]", ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minsamples[224]", minsamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_thresh[224]", m_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slope[224]", slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset[224]", offset);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800FpCrdcPads(void *p) {
      return  p ? new(p) ::S800FpCrdcPads : new ::S800FpCrdcPads;
   }
   static void *newArray_S800FpCrdcPads(Long_t nElements, void *p) {
      return p ? new(p) ::S800FpCrdcPads[nElements] : new ::S800FpCrdcPads[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800FpCrdcPads(void *p) {
      delete ((::S800FpCrdcPads*)p);
   }
   static void deleteArray_S800FpCrdcPads(void *p) {
      delete [] ((::S800FpCrdcPads*)p);
   }
   static void destruct_S800FpCrdcPads(void *p) {
      typedef ::S800FpCrdcPads current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800FpCrdcPads

//______________________________________________________________________________
void S800FpCrdcCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800FpCrdcCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800FpCrdcCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800FpCrdcCalc::Class(),this);
   }
}

//______________________________________________________________________________
void S800FpCrdcCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800FpCrdcCalc.
      TClass *R__cl = ::S800FpCrdcCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_badpad[224]", m_badpad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_saturationvalue", &m_saturationvalue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "padmax", &padmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "padsum", &padsum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "padused", &padused);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxpad[224]", maxpad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxpad0[224]", maxpad0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "padcalc[224]", padcalc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saturationWidth", &saturationWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_gravity", &x_gravity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gravity_width", &gravity_width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fit_width", &fit_width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "method", &method);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "saturation", &saturation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_saturation", &m_saturation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badpads", &badpads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badpad[99]", badpad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pad", &m_pad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_parent", &m_parent);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800FpCrdcCalc(void *p) {
      return  p ? new(p) ::S800FpCrdcCalc : new ::S800FpCrdcCalc;
   }
   static void *newArray_S800FpCrdcCalc(Long_t nElements, void *p) {
      return p ? new(p) ::S800FpCrdcCalc[nElements] : new ::S800FpCrdcCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800FpCrdcCalc(void *p) {
      delete ((::S800FpCrdcCalc*)p);
   }
   static void deleteArray_S800FpCrdcCalc(void *p) {
      delete [] ((::S800FpCrdcCalc*)p);
   }
   static void destruct_S800FpCrdcCalc(void *p) {
      typedef ::S800FpCrdcCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800FpCrdcCalc

//______________________________________________________________________________
void S800FpCrdc::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800FpCrdc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800FpCrdc::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800FpCrdc::Class(),this);
   }
}

//______________________________________________________________________________
void S800FpCrdc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800FpCrdc.
      TClass *R__cl = ::S800FpCrdc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pad", &pad);
      R__insp.InspectMember(pad, "pad.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calc", &calc);
      R__insp.InspectMember(calc, "calc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tac", &tac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "anode", &anode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtlength", &evtlength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_offset", &x_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_slope", &x_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_offset", &y_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_slope", &y_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xy_offset", &xy_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xy_slope", &xy_slope);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800FpCrdc(void *p) {
      return  p ? new(p) ::S800FpCrdc : new ::S800FpCrdc;
   }
   static void *newArray_S800FpCrdc(Long_t nElements, void *p) {
      return p ? new(p) ::S800FpCrdc[nElements] : new ::S800FpCrdc[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800FpCrdc(void *p) {
      delete ((::S800FpCrdc*)p);
   }
   static void deleteArray_S800FpCrdc(void *p) {
      delete [] ((::S800FpCrdc*)p);
   }
   static void destruct_S800FpCrdc(void *p) {
      typedef ::S800FpCrdc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800FpCrdc

//______________________________________________________________________________
void S800Tppac::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Tppac.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Tppac::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Tppac::Class(),this);
   }
}

//______________________________________________________________________________
void S800Tppac::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Tppac.
      TClass *R__cl = ::S800Tppac::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_badxstrip[64]", m_badxstrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_badystrip[64]", m_badystrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xstrip[64]", xstrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ystrip[64]", ystrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xsum", &xsum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ysum", &ysum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmult", &xmult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ymult", &ymult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badxstrips", &badxstrips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badxstrip[20]", badxstrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badystrips", &badystrips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "badystrip[20]", badystrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width", &width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcenter", &xcenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ycenter", &ycenter);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Tppac(void *p) {
      return  p ? new(p) ::S800Tppac : new ::S800Tppac;
   }
   static void *newArray_S800Tppac(Long_t nElements, void *p) {
      return p ? new(p) ::S800Tppac[nElements] : new ::S800Tppac[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Tppac(void *p) {
      delete ((::S800Tppac*)p);
   }
   static void deleteArray_S800Tppac(void *p) {
      delete [] ((::S800Tppac*)p);
   }
   static void destruct_S800Tppac(void *p) {
      typedef ::S800Tppac current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Tppac

//______________________________________________________________________________
void S800Track::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Track.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Track::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Track::Class(),this);
   }
}

//______________________________________________________________________________
void S800Track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Track.
      TClass *R__cl = ::S800Track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_thresh", &m_thresh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_projX[4][64]", m_projX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_minChn[4]", m_minChn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_maxChn[4]", m_maxChn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_width", &m_width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tppac1", &tppac1);
      R__insp.InspectMember(tppac1, "tppac1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tppac2", &tppac2);
      R__insp.InspectMember(tppac2, "tppac2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xim", &xim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yim", &yim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aim", &aim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bim", &bim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dim", &dim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xta", &xta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yta", &yta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ata", &ata);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bta", &bta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "order", &order);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map", &map);
      R__insp.InspectMember(map, "map.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Track(void *p) {
      return  p ? new(p) ::S800Track : new ::S800Track;
   }
   static void *newArray_S800Track(Long_t nElements, void *p) {
      return p ? new(p) ::S800Track[nElements] : new ::S800Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Track(void *p) {
      delete ((::S800Track*)p);
   }
   static void deleteArray_S800Track(void *p) {
      delete [] ((::S800Track*)p);
   }
   static void destruct_S800Track(void *p) {
      typedef ::S800Track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Track

//______________________________________________________________________________
void S800FpIonChamber::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800FpIonChamber.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800FpIonChamber::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800FpIonChamber::Class(),this);
   }
}

//______________________________________________________________________________
void S800FpIonChamber::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800FpIonChamber.
      TClass *R__cl = ::S800FpIonChamber::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_activeChannels", &m_activeChannels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caltable_cal[16][4095]", caltable_cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caltable_de[4095]", caltable_de);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caltable_xtilt[4095]", caltable_xtilt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "caltable_ytilt[4095]", caltable_ytilt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "raw[16]", raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cal[16]", cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tac1", &tac1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tac2", &tac2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sum", &sum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "de", &de);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slope[16]", slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset[16]", offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "active[16]", active);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "de_x0tilt", &de_x0tilt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "de_xtilt", &de_xtilt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "de_ytilt", &de_ytilt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "de_slope", &de_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "de_offset", &de_offset);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800FpIonChamber(void *p) {
      return  p ? new(p) ::S800FpIonChamber : new ::S800FpIonChamber;
   }
   static void *newArray_S800FpIonChamber(Long_t nElements, void *p) {
      return p ? new(p) ::S800FpIonChamber[nElements] : new ::S800FpIonChamber[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800FpIonChamber(void *p) {
      delete ((::S800FpIonChamber*)p);
   }
   static void deleteArray_S800FpIonChamber(void *p) {
      delete [] ((::S800FpIonChamber*)p);
   }
   static void destruct_S800FpIonChamber(void *p) {
      typedef ::S800FpIonChamber current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800FpIonChamber

//______________________________________________________________________________
void S800FpScintillator::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800FpScintillator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800FpScintillator::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800FpScintillator::Class(),this);
   }
}

//______________________________________________________________________________
void S800FpScintillator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800FpScintillator.
      TClass *R__cl = ::S800FpScintillator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "de_up", &de_up);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "de_down", &de_down);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_up", &time_up);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_down", &time_down);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "de", &de);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pos", &pos);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800FpScintillator(void *p) {
      return  p ? new(p) ::S800FpScintillator : new ::S800FpScintillator;
   }
   static void *newArray_S800FpScintillator(Long_t nElements, void *p) {
      return p ? new(p) ::S800FpScintillator[nElements] : new ::S800FpScintillator[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800FpScintillator(void *p) {
      delete ((::S800FpScintillator*)p);
   }
   static void deleteArray_S800FpScintillator(void *p) {
      delete [] ((::S800FpScintillator*)p);
   }
   static void destruct_S800FpScintillator(void *p) {
      typedef ::S800FpScintillator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800FpScintillator

//______________________________________________________________________________
void S800FpTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800FpTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800FpTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800FpTrack::Class(),this);
   }
}

//______________________________________________________________________________
void S800FpTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800FpTrack.
      TClass *R__cl = ::S800FpTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfp", &xfp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "afp", &afp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yfp", &yfp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bfp", &bfp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ata", &ata);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yta", &yta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bta", &bta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dta", &dta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "azita", &azita);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scatter", &scatter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptot", &ptot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppar", &ppar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptra", &ptra);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ata_cor", &ata_cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bta_cor", &bta_cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "azita_cor", &azita_cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scatter_cor", &scatter_cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "anglea", &anglea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angleb", &angleb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "brho", &brho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "order", &order);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zfp", &zfp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gecorr", &gecorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "anglea_cor", &anglea_cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angleb_cor", &angleb_cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ata_dtacor", &ata_dtacor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bta_ytacor", &bta_ytacor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "map", &map);
      R__insp.InspectMember(map, "map.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta0", &beta0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltabeta", &deltabeta);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800FpTrack(void *p) {
      return  p ? new(p) ::S800FpTrack : new ::S800FpTrack;
   }
   static void *newArray_S800FpTrack(Long_t nElements, void *p) {
      return p ? new(p) ::S800FpTrack[nElements] : new ::S800FpTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800FpTrack(void *p) {
      delete ((::S800FpTrack*)p);
   }
   static void deleteArray_S800FpTrack(void *p) {
      delete [] ((::S800FpTrack*)p);
   }
   static void destruct_S800FpTrack(void *p) {
      typedef ::S800FpTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800FpTrack

//______________________________________________________________________________
void S800FpHodo::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800FpHodo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800FpHodo::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800FpHodo::Class(),this);
   }
}

//______________________________________________________________________________
void S800FpHodo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800FpHodo.
      TClass *R__cl = ::S800FpHodo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "raw[32]", raw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cal[32]", cal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "max", &max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sum", &sum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mult", &mult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slope[32]", slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset[32]", offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xCorr[32]", xCorr);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800FpHodo(void *p) {
      return  p ? new(p) ::S800FpHodo : new ::S800FpHodo;
   }
   static void *newArray_S800FpHodo(Long_t nElements, void *p) {
      return p ? new(p) ::S800FpHodo[nElements] : new ::S800FpHodo[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800FpHodo(void *p) {
      delete ((::S800FpHodo*)p);
   }
   static void deleteArray_S800FpHodo(void *p) {
      delete [] ((::S800FpHodo*)p);
   }
   static void destruct_S800FpHodo(void *p) {
      typedef ::S800FpHodo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800FpHodo

//______________________________________________________________________________
void S800FocalPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800FocalPlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800FocalPlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800FocalPlane::Class(),this);
   }
}

//______________________________________________________________________________
void S800FocalPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800FocalPlane.
      TClass *R__cl = ::S800FocalPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_e[3]", &m_e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e1", &e1);
      R__insp.InspectMember(e1, "e1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e2", &e2);
      R__insp.InspectMember(e2, "e2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e3", &e3);
      R__insp.InspectMember(e3, "e3.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ic", &ic);
      R__insp.InspectMember(ic, "ic.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crdc1", &crdc1);
      R__insp.InspectMember(crdc1, "crdc1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crdc2", &crdc2);
      R__insp.InspectMember(crdc2, "crdc2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track", &track);
      R__insp.InspectMember(track, "track.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hodo", &hodo);
      R__insp.InspectMember(hodo, "hodo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gap", &gap);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800FocalPlane(void *p) {
      return  p ? new(p) ::S800FocalPlane : new ::S800FocalPlane;
   }
   static void *newArray_S800FocalPlane(Long_t nElements, void *p) {
      return p ? new(p) ::S800FocalPlane[nElements] : new ::S800FocalPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800FocalPlane(void *p) {
      delete ((::S800FocalPlane*)p);
   }
   static void deleteArray_S800FocalPlane(void *p) {
      delete [] ((::S800FocalPlane*)p);
   }
   static void destruct_S800FocalPlane(void *p) {
      typedef ::S800FocalPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800FocalPlane

//______________________________________________________________________________
void S800ClassicPpac::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800ClassicPpac.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800ClassicPpac::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800ClassicPpac::Class(),this);
   }
}

//______________________________________________________________________________
void S800ClassicPpac::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800ClassicPpac.
      TClass *R__cl = ::S800ClassicPpac::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "up", &up);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "down", &down);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "left", &left);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "right", &right);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "u_offset", &u_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "u_slope", &u_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d_offset", &d_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d_slope", &d_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l_offset", &l_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l_slope", &l_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r_offset", &r_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r_slope", &r_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_offset", &x_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_slope", &x_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_offset", &y_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_slope", &y_slope);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800ClassicPpac(void *p) {
      return  p ? new(p) ::S800ClassicPpac : new ::S800ClassicPpac;
   }
   static void *newArray_S800ClassicPpac(Long_t nElements, void *p) {
      return p ? new(p) ::S800ClassicPpac[nElements] : new ::S800ClassicPpac[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800ClassicPpac(void *p) {
      delete ((::S800ClassicPpac*)p);
   }
   static void deleteArray_S800ClassicPpac(void *p) {
      delete [] ((::S800ClassicPpac*)p);
   }
   static void destruct_S800ClassicPpac(void *p) {
      typedef ::S800ClassicPpac current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800ClassicPpac

//______________________________________________________________________________
void S800Image::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Image.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Image::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Image::Class(),this);
   }
}

//______________________________________________________________________________
void S800Image::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Image.
      TClass *R__cl = ::S800Image::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dp", &dp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gap", &gap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dpphi", &dpphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigger", &trigger);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Image(void *p) {
      return  p ? new(p) ::S800Image : new ::S800Image;
   }
   static void *newArray_S800Image(Long_t nElements, void *p) {
      return p ? new(p) ::S800Image[nElements] : new ::S800Image[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Image(void *p) {
      delete ((::S800Image*)p);
   }
   static void deleteArray_S800Image(void *p) {
      delete [] ((::S800Image*)p);
   }
   static void destruct_S800Image(void *p) {
      typedef ::S800Image current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Image

//______________________________________________________________________________
void S800TimeStamp::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800TimeStamp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800TimeStamp::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800TimeStamp::Class(),this);
   }
}

//______________________________________________________________________________
void S800TimeStamp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800TimeStamp.
      TClass *R__cl = ::S800TimeStamp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_prevStamp", &m_prevStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stampHigh", &stampHigh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stampMid", &stampMid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stampLow", &stampLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stampLowest", &stampLowest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diff", &diff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &timestamp);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800TimeStamp(void *p) {
      return  p ? new(p) ::S800TimeStamp : new ::S800TimeStamp;
   }
   static void *newArray_S800TimeStamp(Long_t nElements, void *p) {
      return p ? new(p) ::S800TimeStamp[nElements] : new ::S800TimeStamp[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800TimeStamp(void *p) {
      delete ((::S800TimeStamp*)p);
   }
   static void deleteArray_S800TimeStamp(void *p) {
      delete [] ((::S800TimeStamp*)p);
   }
   static void destruct_S800TimeStamp(void *p) {
      typedef ::S800TimeStamp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800TimeStamp

//______________________________________________________________________________
void S800EventNumber::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800EventNumber.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800EventNumber::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800EventNumber::Class(),this);
   }
}

//______________________________________________________________________________
void S800EventNumber::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800EventNumber.
      TClass *R__cl = ::S800EventNumber::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventNum", &eventNum);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800EventNumber(void *p) {
      return  p ? new(p) ::S800EventNumber : new ::S800EventNumber;
   }
   static void *newArray_S800EventNumber(Long_t nElements, void *p) {
      return p ? new(p) ::S800EventNumber[nElements] : new ::S800EventNumber[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800EventNumber(void *p) {
      delete ((::S800EventNumber*)p);
   }
   static void deleteArray_S800EventNumber(void *p) {
      delete [] ((::S800EventNumber*)p);
   }
   static void destruct_S800EventNumber(void *p) {
      typedef ::S800EventNumber current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800EventNumber

//______________________________________________________________________________
void S800Trigger::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Trigger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Trigger::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Trigger::Class(),this);
   }
}

//______________________________________________________________________________
void S800Trigger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Trigger.
      TClass *R__cl = ::S800Trigger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_prevStamp", &m_prevStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reg", &reg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s800", &s800);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "external1", &external1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "external2", &external2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "secondary", &secondary);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Trigger(void *p) {
      return  p ? new(p) ::S800Trigger : new ::S800Trigger;
   }
   static void *newArray_S800Trigger(Long_t nElements, void *p) {
      return p ? new(p) ::S800Trigger[nElements] : new ::S800Trigger[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Trigger(void *p) {
      delete ((::S800Trigger*)p);
   }
   static void deleteArray_S800Trigger(void *p) {
      delete [] ((::S800Trigger*)p);
   }
   static void destruct_S800Trigger(void *p) {
      typedef ::S800Trigger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Trigger

//______________________________________________________________________________
void S800TimeOfFlight::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800TimeOfFlight.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800TimeOfFlight::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800TimeOfFlight::Class(),this);
   }
}

//______________________________________________________________________________
void S800TimeOfFlight::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800TimeOfFlight.
      TClass *R__cl = ::S800TimeOfFlight::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rf", &rf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "obj", &obj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfp", &xfp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfp_obj", &xfp_obj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rfe1", &rfe1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "obje1", &obje1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfpe1", &xfpe1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "obje2", &obje2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfpe2", &xfpe2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tac_obj", &tac_obj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tac_obje1", &tac_obje1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tac_xfp", &tac_xfp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tac_xfpe1", &tac_xfpe1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diaor", &diaor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia1", &dia1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia2", &dia2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia3", &dia3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia4", &dia4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia1RF", &dia1RF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia2RF", &dia2RF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia3RF", &dia3RF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia4RF", &dia4RF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diaRF", &diaRF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia1Cor", &dia1Cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia2Cor", &dia2Cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia3Cor", &dia3Cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia4Cor", &dia4Cor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diaCor", &diaCor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "obj_shift", &obj_shift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rfCorrection", &rfCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rfe1Correction", &rfe1Correction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "objCorrection", &objCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diaCorrection", &diaCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diax", &diax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia2ndCor", &dia2ndCor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia2ndCorOffset", &dia2ndCorOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia1offset", &dia1offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia2offset", &dia2offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia3offset", &dia3offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dia4offset", &dia4offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfpCorrection", &xfpCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "obje1Correction", &obje1Correction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfpe1Correction", &xfpe1Correction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "obje2Correction", &obje2Correction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xfpe2Correction", &xfpe2Correction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "im2objCorrection", &im2objCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tacobjCorrection", &tacobjCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tacobje1Correction", &tacobje1Correction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tacxfpCorrection", &tacxfpCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tacxfpe1Correction", &tacxfpe1Correction);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800TimeOfFlight(void *p) {
      return  p ? new(p) ::S800TimeOfFlight : new ::S800TimeOfFlight;
   }
   static void *newArray_S800TimeOfFlight(Long_t nElements, void *p) {
      return p ? new(p) ::S800TimeOfFlight[nElements] : new ::S800TimeOfFlight[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800TimeOfFlight(void *p) {
      delete ((::S800TimeOfFlight*)p);
   }
   static void deleteArray_S800TimeOfFlight(void *p) {
      delete [] ((::S800TimeOfFlight*)p);
   }
   static void destruct_S800TimeOfFlight(void *p) {
      typedef ::S800TimeOfFlight current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800TimeOfFlight

//______________________________________________________________________________
void S800LaBr::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800LaBr.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800LaBr::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800LaBr::Class(),this);
   }
}

//______________________________________________________________________________
void S800LaBr::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800LaBr.
      TClass *R__cl = ::S800LaBr::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy[16]", energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time[16]", time);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800LaBr(void *p) {
      return  p ? new(p) ::S800LaBr : new ::S800LaBr;
   }
   static void *newArray_S800LaBr(Long_t nElements, void *p) {
      return p ? new(p) ::S800LaBr[nElements] : new ::S800LaBr[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800LaBr(void *p) {
      delete ((::S800LaBr*)p);
   }
   static void deleteArray_S800LaBr(void *p) {
      delete [] ((::S800LaBr*)p);
   }
   static void destruct_S800LaBr(void *p) {
      typedef ::S800LaBr current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800LaBr

//______________________________________________________________________________
void S800Pin::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Pin.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Pin::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Pin::Class(),this);
   }
}

//______________________________________________________________________________
void S800Pin::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Pin.
      TClass *R__cl = ::S800Pin::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e", &e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecorr", &ecorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dE", &dE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_offset", &e_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e_slope", &e_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pin_cor", &pin_cor);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Pin(void *p) {
      return  p ? new(p) ::S800Pin : new ::S800Pin;
   }
   static void *newArray_S800Pin(Long_t nElements, void *p) {
      return p ? new(p) ::S800Pin[nElements] : new ::S800Pin[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Pin(void *p) {
      delete ((::S800Pin*)p);
   }
   static void deleteArray_S800Pin(void *p) {
      delete [] ((::S800Pin*)p);
   }
   static void destruct_S800Pin(void *p) {
      typedef ::S800Pin current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Pin

//______________________________________________________________________________
void S800Object::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Object.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Object::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Object::Class(),this);
   }
}

//______________________________________________________________________________
void S800Object::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Object.
      TClass *R__cl = ::S800Object::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Object(void *p) {
      return  p ? new(p) ::S800Object : new ::S800Object;
   }
   static void *newArray_S800Object(Long_t nElements, void *p) {
      return p ? new(p) ::S800Object[nElements] : new ::S800Object[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Object(void *p) {
      delete ((::S800Object*)p);
   }
   static void deleteArray_S800Object(void *p) {
      delete [] ((::S800Object*)p);
   }
   static void destruct_S800Object(void *p) {
      typedef ::S800Object current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Object

//______________________________________________________________________________
void S800Ppac::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Ppac.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Ppac::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Ppac::Class(),this);
   }
}

//______________________________________________________________________________
void S800Ppac::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Ppac.
      TClass *R__cl = ::S800Ppac::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasdata", &hasdata);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "up", &up);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "down", &down);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "left", &left);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "right", &right);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a", &a);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumx", &sumx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sumy", &sumy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "u_offset", &u_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "u_slope", &u_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d_offset", &d_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d_slope", &d_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l_offset", &l_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "l_slope", &l_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r_offset", &r_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r_slope", &r_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_offset", &x_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_slope", &x_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_offset", &y_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_slope", &y_slope);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Ppac(void *p) {
      return  p ? new(p) ::S800Ppac : new ::S800Ppac;
   }
   static void *newArray_S800Ppac(Long_t nElements, void *p) {
      return p ? new(p) ::S800Ppac[nElements] : new ::S800Ppac[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Ppac(void *p) {
      delete ((::S800Ppac*)p);
   }
   static void deleteArray_S800Ppac(void *p) {
      delete [] ((::S800Ppac*)p);
   }
   static void destruct_S800Ppac(void *p) {
      typedef ::S800Ppac current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Ppac

//______________________________________________________________________________
void S800Target::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Target.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Target::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Target::Class(),this);
   }
}

//______________________________________________________________________________
void S800Target::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Target.
      TClass *R__cl = ::S800Target::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_top", &m_top);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Target(void *p) {
      return  p ? new(p) ::S800Target : new ::S800Target;
   }
   static void *newArray_S800Target(Long_t nElements, void *p) {
      return p ? new(p) ::S800Target[nElements] : new ::S800Target[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Target(void *p) {
      delete ((::S800Target*)p);
   }
   static void deleteArray_S800Target(void *p) {
      delete [] ((::S800Target*)p);
   }
   static void destruct_S800Target(void *p) {
      typedef ::S800Target current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Target

//______________________________________________________________________________
void S800Physics::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Physics.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Physics::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Physics::Class(),this);
   }
}

//______________________________________________________________________________
void S800Physics::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Physics.
      TClass *R__cl = ::S800Physics::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s800Ph", (void*)&s800Ph);
      R__insp.InspectMember("s800Phys", (void*)&s800Ph, "s800Ph.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Physics(void *p) {
      return  p ? new(p) ::S800Physics : new ::S800Physics;
   }
   static void *newArray_S800Physics(Long_t nElements, void *p) {
      return p ? new(p) ::S800Physics[nElements] : new ::S800Physics[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Physics(void *p) {
      delete ((::S800Physics*)p);
   }
   static void deleteArray_S800Physics(void *p) {
      delete [] ((::S800Physics*)p);
   }
   static void destruct_S800Physics(void *p) {
      typedef ::S800Physics current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Physics

//______________________________________________________________________________
void S800Full::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Full.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Full::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Full::Class(),this);
   }
}

//______________________________________________________________________________
void S800Full::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Full.
      TClass *R__cl = ::S800Full::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s800data[8192]", s800data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "InvalidBitReg", &InvalidBitReg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugMode", &debugMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtreset", &evtreset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invalid", &invalid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtlength", &evtlength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtcount", &evtcount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtNumber", &evtNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastEvtNumber", &lastEvtNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtReset", &evtReset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reportEvtIncrease", &reportEvtIncrease);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "labr", &labr);
      R__insp.InspectMember(labr, "labr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fp", &fp);
      R__insp.InspectMember(fp, "fp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "target", &target);
      R__insp.InspectMember(target, "target.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "im", &im);
      R__insp.InspectMember(im, "im.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "obj", &obj);
      R__insp.InspectMember(obj, "obj.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigger", &trigger);
      R__insp.InspectMember(trigger, "trigger.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtnum", &evtnum);
      R__insp.InspectMember(evtnum, "evtnum.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ts", &ts);
      R__insp.InspectMember(ts, "ts.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.InspectMember(tof, "tof.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phys", &phys);
      R__insp.InspectMember(phys, "phys.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Full(void *p) {
      return  p ? new(p) ::S800Full : new ::S800Full;
   }
   static void *newArray_S800Full(Long_t nElements, void *p) {
      return p ? new(p) ::S800Full[nElements] : new ::S800Full[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Full(void *p) {
      delete ((::S800Full*)p);
   }
   static void deleteArray_S800Full(void *p) {
      delete [] ((::S800Full*)p);
   }
   static void destruct_S800Full(void *p) {
      typedef ::S800Full current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Full

//______________________________________________________________________________
void S800Scaler::Streamer(TBuffer &R__b)
{
   // Stream an object of class S800Scaler.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(S800Scaler::Class(),this);
   } else {
      R__b.WriteClassBuffer(S800Scaler::Class(),this);
   }
}

//______________________________________________________________________________
void S800Scaler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S800Scaler.
      TClass *R__cl = ::S800Scaler::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start", &start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "end", &end);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timestamp", &timestamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalTS", &globalTS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nScaler", &nScaler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Id", (void*)&Id);
      R__insp.InspectMember("vector<TString>", (void*)&Id, "Id.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value[260]", value);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "valueOld[260]", valueOld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rate[260]", rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "auxData[8192]", auxData);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_S800Scaler(void *p) {
      return  p ? new(p) ::S800Scaler : new ::S800Scaler;
   }
   static void *newArray_S800Scaler(Long_t nElements, void *p) {
      return p ? new(p) ::S800Scaler[nElements] : new ::S800Scaler[nElements];
   }
   // Wrapper around operator delete
   static void delete_S800Scaler(void *p) {
      delete ((::S800Scaler*)p);
   }
   static void deleteArray_S800Scaler(void *p) {
      delete [] ((::S800Scaler*)p);
   }
   static void destruct_S800Scaler(void *p) {
      typedef ::S800Scaler current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::S800Scaler

//______________________________________________________________________________
namespace ROOT {
   void s800Phys_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class s800Phys.
      typedef ::ROOT::Shadow::s800Phys ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::s800Phys*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &sobj->type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crdc1_x", &sobj->crdc1_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crdc1_y", &sobj->crdc1_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crdc2_x", &sobj->crdc2_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crdc2_y", &sobj->crdc2_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ic_sum", &sobj->ic_sum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_xfp", &sobj->tof_xfp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_obj", &sobj->tof_obj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rf", &sobj->rf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trigger", &sobj->trigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ic_de", &sobj->ic_de);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_xfpe1", &sobj->tof_xfpe1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_obje1", &sobj->tof_obje1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_rfe1", &sobj->tof_rfe1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ata", &sobj->ata);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bta", &sobj->bta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dta", &sobj->dta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yta", &sobj->yta);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_s800Phys(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::s800Phys : new ::s800Phys;
   }
   static void *newArray_s800Phys(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::s800Phys[nElements] : new ::s800Phys[nElements];
   }
   // Wrapper around operator delete
   static void delete_s800Phys(void *p) {
      delete ((::s800Phys*)p);
   }
   static void deleteArray_s800Phys(void *p) {
      delete [] ((::s800Phys*)p);
   }
   static void destruct_s800Phys(void *p) {
      typedef ::s800Phys current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::s800Phys

namespace ROOT {
   void vectorlETStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETStringgR_Dictionary();
   static void *new_vectorlETStringgR(void *p = 0);
   static void *newArray_vectorlETStringgR(Long_t size, void *p);
   static void delete_vectorlETStringgR(void *p);
   static void deleteArray_vectorlETStringgR(void *p);
   static void destruct_vectorlETStringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TString>*)
   {
      vector<TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TString>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TString>), DefineBehavior(ptr, ptr),
                  0, &vectorlETStringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TString>) );
      instance.SetNew(&new_vectorlETStringgR);
      instance.SetNewArray(&newArray_vectorlETStringgR);
      instance.SetDelete(&delete_vectorlETStringgR);
      instance.SetDeleteArray(&deleteArray_vectorlETStringgR);
      instance.SetDestructor(&destruct_vectorlETStringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETStringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TString>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString> : new vector<TString>;
   }
   static void *newArray_vectorlETStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString>[nElements] : new vector<TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETStringgR(void *p) {
      delete ((vector<TString>*)p);
   }
   static void deleteArray_vectorlETStringgR(void *p) {
      delete [] ((vector<TString>*)p);
   }
   static void destruct_vectorlETStringgR(void *p) {
      typedef vector<TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TString>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/usr/local/lib/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* src/S800Dict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableS800Dict();

extern "C" void G__set_cpp_environmentS800Dict() {
  G__cpp_reset_tagtableS800Dict();
}
#include <new>
extern "C" int G__cpp_dllrevS800Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* S800Full */
static int G__S800Dict_612_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Full* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Full[n];
     } else {
       p = new((void*) gvp) S800Full[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Full;
     } else {
       p = new((void*) gvp) S800Full;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Full));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Full*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Full*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Full*) G__getstructoffset())->DoInvalidBitReg();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Full*) G__getstructoffset())->getAndProcessS800((FILE*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((S800Full*) G__getstructoffset())->GetNextValue((FILE*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Full*) G__getstructoffset())->InitializeS800Variables(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Full*) G__getstructoffset())->UpdateS800RunVariables(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((S800Full*) G__getstructoffset())->getDoppler(*((TVector3*) G__int(libp->para[0])), (Float_t) G__double(libp->para[1])
, (GRETINAVariables*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Full*) G__getstructoffset())->getPhysics((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Full::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Full::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Full::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Full::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Full*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Full::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Full::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Full::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_612_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Full::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_612_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Full* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Full(*(S800Full*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Full));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Full G__TS800Full;
static int G__S800Dict_612_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Full*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Full*) (soff+(sizeof(S800Full)*i)))->~G__TS800Full();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Full*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Full*) (soff))->~G__TS800Full();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_612_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Full* dest = (S800Full*) G__getstructoffset();
   *dest = *(S800Full*) libp->para[0].ref;
   const S800Full& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Scaler */
static int G__S800Dict_613_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Scaler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Scaler[n];
     } else {
       p = new((void*) gvp) S800Scaler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Scaler;
     } else {
       p = new((void*) gvp) S800Scaler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Scaler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Scaler*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Scaler*) G__getstructoffset())->InitializeS800ScalerParameters((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Scaler*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((S800Scaler*) G__getstructoffset())->getAndProcessS800Aux((FILE*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (long long) G__Longlong(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Scaler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Scaler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Scaler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Scaler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Scaler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Scaler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Scaler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Scaler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_613_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Scaler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_613_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Scaler* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Scaler(*(S800Scaler*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Scaler));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Scaler G__TS800Scaler;
static int G__S800Dict_613_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Scaler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Scaler*) (soff+(sizeof(S800Scaler)*i)))->~G__TS800Scaler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Scaler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Scaler*) (soff))->~G__TS800Scaler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_613_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Scaler* dest = (S800Scaler*) G__getstructoffset();
   *dest = *(S800Scaler*) libp->para[0].ref;
   const S800Scaler& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800ImMap */
static int G__S800Dict_614_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800ImMap*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800ImMap*) G__getstructoffset())->LoadInverseMap(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800ImMap*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((S800ImMap*) G__getstructoffset())->WasLoaded());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((S800ImMap*) G__getstructoffset())->Calculate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800ImMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800ImMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800ImMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800ImMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800ImMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800ImMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800ImMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800ImMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_614_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800ImMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_614_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800ImMap *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800ImMap[n];
     } else {
       p = new((void*) gvp) S800ImMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800ImMap;
     } else {
       p = new((void*) gvp) S800ImMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800ImMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_614_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800ImMap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800ImMap(*(S800ImMap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800ImMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800ImMap G__TS800ImMap;
static int G__S800Dict_614_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800ImMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800ImMap*) (soff+(sizeof(S800ImMap)*i)))->~G__TS800ImMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800ImMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800ImMap*) (soff))->~G__TS800ImMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_614_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800ImMap* dest = (S800ImMap*) G__getstructoffset();
   *dest = *(S800ImMap*) libp->para[0].ref;
   const S800ImMap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Map */
static int G__S800Dict_615_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Map*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Map*) G__getstructoffset())->LoadInverseMap(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Map*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((S800Map*) G__getstructoffset())->WasLoaded());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((S800Map*) G__getstructoffset())->Calculate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Map::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Map::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Map::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Map::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Map*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Map::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Map::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Map::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_615_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Map::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_615_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Map *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Map[n];
     } else {
       p = new((void*) gvp) S800Map[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Map;
     } else {
       p = new((void*) gvp) S800Map;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Map));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_615_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Map* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Map(*(S800Map*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Map));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Map G__TS800Map;
static int G__S800Dict_615_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Map*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Map*) (soff+(sizeof(S800Map)*i)))->~G__TS800Map();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Map*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Map*) (soff))->~G__TS800Map();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_615_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Map* dest = (S800Map*) G__getstructoffset();
   *dest = *(S800Map*) libp->para[0].ref;
   const S800Map& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800FpCrdcCalc */
static int G__S800Dict_616_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcCalc*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]), (S800FpCrdcPads*) G__int(libp->para[1])
, (S800FpCrdc*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcCalc*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcCalc*) G__getstructoffset())->CalculateGravity();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcCalc*) G__getstructoffset())->CalculateGravityClassic();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcCalc*) G__getstructoffset())->CheckBadPads();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((S800FpCrdcCalc*) G__getstructoffset())->isbadpad((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800FpCrdcCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpCrdcCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800FpCrdcCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800FpCrdcCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpCrdcCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpCrdcCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpCrdcCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_616_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpCrdcCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_616_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpCrdcCalc *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpCrdcCalc[n];
     } else {
       p = new((void*) gvp) S800FpCrdcCalc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpCrdcCalc;
     } else {
       p = new((void*) gvp) S800FpCrdcCalc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_616_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800FpCrdcCalc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800FpCrdcCalc(*(S800FpCrdcCalc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800FpCrdcCalc G__TS800FpCrdcCalc;
static int G__S800Dict_616_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800FpCrdcCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800FpCrdcCalc*) (soff+(sizeof(S800FpCrdcCalc)*i)))->~G__TS800FpCrdcCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800FpCrdcCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800FpCrdcCalc*) (soff))->~G__TS800FpCrdcCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_616_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpCrdcCalc* dest = (S800FpCrdcCalc*) G__getstructoffset();
   *dest = *(S800FpCrdcCalc*) libp->para[0].ref;
   const S800FpCrdcCalc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800FpCrdcPads */
static int G__S800Dict_617_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcPads*) G__getstructoffset())->CalcDelta((int) G__int(libp->para[0]), (S800FpCrdcCalc*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcPads*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcPads*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800FpCrdcPads*) G__getstructoffset())->UnpackRawData((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800FpCrdcPads*) G__getstructoffset())->UnpackRawDataClassic((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcPads*) G__getstructoffset())->AverageCal((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcPads*) G__getstructoffset())->BuildLookUp();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800FpCrdcPads::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpCrdcPads::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800FpCrdcPads::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800FpCrdcPads::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdcPads*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpCrdcPads::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpCrdcPads::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpCrdcPads::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_617_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpCrdcPads::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_617_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpCrdcPads *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpCrdcPads[n];
     } else {
       p = new((void*) gvp) S800FpCrdcPads[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpCrdcPads;
     } else {
       p = new((void*) gvp) S800FpCrdcPads;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_617_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800FpCrdcPads* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800FpCrdcPads(*(S800FpCrdcPads*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800FpCrdcPads G__TS800FpCrdcPads;
static int G__S800Dict_617_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800FpCrdcPads*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800FpCrdcPads*) (soff+(sizeof(S800FpCrdcPads)*i)))->~G__TS800FpCrdcPads();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800FpCrdcPads*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800FpCrdcPads*) (soff))->~G__TS800FpCrdcPads();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_617_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpCrdcPads* dest = (S800FpCrdcPads*) G__getstructoffset();
   *dest = *(S800FpCrdcPads*) libp->para[0].ref;
   const S800FpCrdcPads& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800FpCrdc */
static int G__S800Dict_622_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdc*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdc*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdc*) G__getstructoffset())->CalculatePosition();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800FpCrdc*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800FpCrdc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpCrdc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800FpCrdc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800FpCrdc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpCrdc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpCrdc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpCrdc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpCrdc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_622_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpCrdc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_622_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpCrdc *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpCrdc[n];
     } else {
       p = new((void*) gvp) S800FpCrdc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpCrdc;
     } else {
       p = new((void*) gvp) S800FpCrdc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_622_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800FpCrdc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800FpCrdc(*(S800FpCrdc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800FpCrdc G__TS800FpCrdc;
static int G__S800Dict_622_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800FpCrdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800FpCrdc*) (soff+(sizeof(S800FpCrdc)*i)))->~G__TS800FpCrdc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800FpCrdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800FpCrdc*) (soff))->~G__TS800FpCrdc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_622_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpCrdc* dest = (S800FpCrdc*) G__getstructoffset();
   *dest = *(S800FpCrdc*) libp->para[0].ref;
   const S800FpCrdc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Tppac */
static int G__S800Dict_623_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Tppac*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Tppac*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Tppac*) G__getstructoffset())->CheckBadStrips();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Tppac*) G__getstructoffset())->Calculate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Tppac::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Tppac::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Tppac::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Tppac::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Tppac*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Tppac::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Tppac::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Tppac::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_623_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Tppac::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_623_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Tppac *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Tppac[n];
     } else {
       p = new((void*) gvp) S800Tppac[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Tppac;
     } else {
       p = new((void*) gvp) S800Tppac;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Tppac));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_623_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Tppac* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Tppac(*(S800Tppac*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Tppac));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Tppac G__TS800Tppac;
static int G__S800Dict_623_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Tppac*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Tppac*) (soff+(sizeof(S800Tppac)*i)))->~G__TS800Tppac();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Tppac*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Tppac*) (soff))->~G__TS800Tppac();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_623_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Tppac* dest = (S800Tppac*) G__getstructoffset();
   *dest = *(S800Tppac*) libp->para[0].ref;
   const S800Tppac& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Track */
static int G__S800Dict_624_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Track*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Track*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800Track*) G__getstructoffset())->UnpackRawData((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Track*) G__getstructoffset())->CalculateTracking();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_624_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_624_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Track *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Track[n];
     } else {
       p = new((void*) gvp) S800Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Track;
     } else {
       p = new((void*) gvp) S800Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_624_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Track(*(S800Track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Track G__TS800Track;
static int G__S800Dict_624_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Track*) (soff+(sizeof(S800Track)*i)))->~G__TS800Track();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Track*) (soff))->~G__TS800Track();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_624_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Track* dest = (S800Track*) G__getstructoffset();
   *dest = *(S800Track*) libp->para[0].ref;
   const S800Track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800FpIonChamber */
static int G__S800Dict_625_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpIonChamber*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpIonChamber*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800FpIonChamber*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpIonChamber*) G__getstructoffset())->BuildLookUp();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpIonChamber*) G__getstructoffset())->CalibrateIcSum();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800FpIonChamber::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpIonChamber::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800FpIonChamber::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800FpIonChamber::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpIonChamber*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpIonChamber::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpIonChamber::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpIonChamber::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_625_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpIonChamber::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_625_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpIonChamber *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpIonChamber[n];
     } else {
       p = new((void*) gvp) S800FpIonChamber[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpIonChamber;
     } else {
       p = new((void*) gvp) S800FpIonChamber;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_625_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800FpIonChamber* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800FpIonChamber(*(S800FpIonChamber*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800FpIonChamber G__TS800FpIonChamber;
static int G__S800Dict_625_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800FpIonChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800FpIonChamber*) (soff+(sizeof(S800FpIonChamber)*i)))->~G__TS800FpIonChamber();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800FpIonChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800FpIonChamber*) (soff))->~G__TS800FpIonChamber();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_625_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpIonChamber* dest = (S800FpIonChamber*) G__getstructoffset();
   *dest = *(S800FpIonChamber*) libp->para[0].ref;
   const S800FpIonChamber& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800FpScintillator */
static int G__S800Dict_626_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpScintillator*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpScintillator*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpScintillator*) G__getstructoffset())->Calculate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800FpScintillator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpScintillator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800FpScintillator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800FpScintillator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpScintillator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpScintillator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpScintillator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpScintillator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_626_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpScintillator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_626_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpScintillator *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpScintillator[n];
     } else {
       p = new((void*) gvp) S800FpScintillator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpScintillator;
     } else {
       p = new((void*) gvp) S800FpScintillator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_626_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800FpScintillator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800FpScintillator(*(S800FpScintillator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800FpScintillator G__TS800FpScintillator;
static int G__S800Dict_626_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800FpScintillator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800FpScintillator*) (soff+(sizeof(S800FpScintillator)*i)))->~G__TS800FpScintillator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800FpScintillator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800FpScintillator*) (soff))->~G__TS800FpScintillator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_626_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpScintillator* dest = (S800FpScintillator*) G__getstructoffset();
   *dest = *(S800FpScintillator*) libp->para[0].ref;
   const S800FpScintillator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800FpTrack */
static int G__S800Dict_627_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpTrack*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpTrack*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpTrack*) G__getstructoffset())->CalculateTracking();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800FpTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800FpTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800FpTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_627_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_627_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpTrack *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpTrack[n];
     } else {
       p = new((void*) gvp) S800FpTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpTrack;
     } else {
       p = new((void*) gvp) S800FpTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_627_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800FpTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800FpTrack(*(S800FpTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800FpTrack G__TS800FpTrack;
static int G__S800Dict_627_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800FpTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800FpTrack*) (soff+(sizeof(S800FpTrack)*i)))->~G__TS800FpTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800FpTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800FpTrack*) (soff))->~G__TS800FpTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_627_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpTrack* dest = (S800FpTrack*) G__getstructoffset();
   *dest = *(S800FpTrack*) libp->para[0].ref;
   const S800FpTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800FpHodo */
static int G__S800Dict_628_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpHodo*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpHodo*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800FpHodo*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpHodo*) G__getstructoffset())->CorrectX();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800FpHodo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpHodo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800FpHodo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800FpHodo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FpHodo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpHodo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpHodo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FpHodo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_628_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FpHodo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_628_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpHodo *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpHodo[n];
     } else {
       p = new((void*) gvp) S800FpHodo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FpHodo;
     } else {
       p = new((void*) gvp) S800FpHodo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpHodo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_628_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800FpHodo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800FpHodo(*(S800FpHodo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FpHodo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800FpHodo G__TS800FpHodo;
static int G__S800Dict_628_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800FpHodo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800FpHodo*) (soff+(sizeof(S800FpHodo)*i)))->~G__TS800FpHodo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800FpHodo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800FpHodo*) (soff))->~G__TS800FpHodo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_628_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FpHodo* dest = (S800FpHodo*) G__getstructoffset();
   *dest = *(S800FpHodo*) libp->para[0].ref;
   const S800FpHodo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800FocalPlane */
static int G__S800Dict_629_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FocalPlane*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FocalPlane*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FocalPlane*) G__getstructoffset())->LoadValues();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800FocalPlane*) G__getstructoffset())->ScintUnpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800FocalPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FocalPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800FocalPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800FocalPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800FocalPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FocalPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FocalPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800FocalPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_629_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800FocalPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_629_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FocalPlane *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FocalPlane[n];
     } else {
       p = new((void*) gvp) S800FocalPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800FocalPlane;
     } else {
       p = new((void*) gvp) S800FocalPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_629_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800FocalPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800FocalPlane(*(S800FocalPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800FocalPlane G__TS800FocalPlane;
static int G__S800Dict_629_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800FocalPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800FocalPlane*) (soff+(sizeof(S800FocalPlane)*i)))->~G__TS800FocalPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800FocalPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800FocalPlane*) (soff))->~G__TS800FocalPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_629_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800FocalPlane* dest = (S800FocalPlane*) G__getstructoffset();
   *dest = *(S800FocalPlane*) libp->para[0].ref;
   const S800FocalPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800ClassicPpac */
static int G__S800Dict_630_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800ClassicPpac*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800ClassicPpac*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800ClassicPpac*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800ClassicPpac::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800ClassicPpac::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800ClassicPpac::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800ClassicPpac::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800ClassicPpac*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800ClassicPpac::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800ClassicPpac::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800ClassicPpac::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_630_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800ClassicPpac::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_630_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800ClassicPpac *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800ClassicPpac[n];
     } else {
       p = new((void*) gvp) S800ClassicPpac[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800ClassicPpac;
     } else {
       p = new((void*) gvp) S800ClassicPpac;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800ClassicPpac));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_630_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800ClassicPpac* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800ClassicPpac(*(S800ClassicPpac*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800ClassicPpac));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800ClassicPpac G__TS800ClassicPpac;
static int G__S800Dict_630_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800ClassicPpac*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800ClassicPpac*) (soff+(sizeof(S800ClassicPpac)*i)))->~G__TS800ClassicPpac();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800ClassicPpac*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800ClassicPpac*) (soff))->~G__TS800ClassicPpac();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_630_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800ClassicPpac* dest = (S800ClassicPpac*) G__getstructoffset();
   *dest = *(S800ClassicPpac*) libp->para[0].ref;
   const S800ClassicPpac& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Image */
static int G__S800Dict_631_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Image*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Image*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Image*) G__getstructoffset())->Calculate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Image::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Image::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Image::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Image::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Image*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Image::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Image::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Image::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_631_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Image::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_631_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Image *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Image[n];
     } else {
       p = new((void*) gvp) S800Image[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Image;
     } else {
       p = new((void*) gvp) S800Image;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Image));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_631_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Image* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Image(*(S800Image*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Image));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Image G__TS800Image;
static int G__S800Dict_631_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Image*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Image*) (soff+(sizeof(S800Image)*i)))->~G__TS800Image();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Image*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Image*) (soff))->~G__TS800Image();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_631_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Image* dest = (S800Image*) G__getstructoffset();
   *dest = *(S800Image*) libp->para[0].ref;
   const S800Image& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800TimeStamp */
static int G__S800Dict_632_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800TimeStamp*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800TimeStamp*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800TimeStamp*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800TimeStamp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800TimeStamp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800TimeStamp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800TimeStamp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800TimeStamp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800TimeStamp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800TimeStamp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800TimeStamp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_632_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800TimeStamp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_632_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800TimeStamp *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800TimeStamp[n];
     } else {
       p = new((void*) gvp) S800TimeStamp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800TimeStamp;
     } else {
       p = new((void*) gvp) S800TimeStamp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_632_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800TimeStamp* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800TimeStamp(*(S800TimeStamp*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800TimeStamp G__TS800TimeStamp;
static int G__S800Dict_632_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800TimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800TimeStamp*) (soff+(sizeof(S800TimeStamp)*i)))->~G__TS800TimeStamp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800TimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800TimeStamp*) (soff))->~G__TS800TimeStamp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_632_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800TimeStamp* dest = (S800TimeStamp*) G__getstructoffset();
   *dest = *(S800TimeStamp*) libp->para[0].ref;
   const S800TimeStamp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800EventNumber */
static int G__S800Dict_633_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800EventNumber*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800EventNumber*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800EventNumber*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800EventNumber::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800EventNumber::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800EventNumber::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800EventNumber::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800EventNumber*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800EventNumber::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800EventNumber::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800EventNumber::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_633_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800EventNumber::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_633_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800EventNumber *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800EventNumber[n];
     } else {
       p = new((void*) gvp) S800EventNumber[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800EventNumber;
     } else {
       p = new((void*) gvp) S800EventNumber;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800EventNumber));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_633_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800EventNumber* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800EventNumber(*(S800EventNumber*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800EventNumber));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800EventNumber G__TS800EventNumber;
static int G__S800Dict_633_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800EventNumber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800EventNumber*) (soff+(sizeof(S800EventNumber)*i)))->~G__TS800EventNumber();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800EventNumber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800EventNumber*) (soff))->~G__TS800EventNumber();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_633_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800EventNumber* dest = (S800EventNumber*) G__getstructoffset();
   *dest = *(S800EventNumber*) libp->para[0].ref;
   const S800EventNumber& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Trigger */
static int G__S800Dict_634_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Trigger*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Trigger*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800Trigger*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Trigger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Trigger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Trigger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Trigger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Trigger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Trigger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Trigger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Trigger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_634_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Trigger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_634_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Trigger *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Trigger[n];
     } else {
       p = new((void*) gvp) S800Trigger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Trigger;
     } else {
       p = new((void*) gvp) S800Trigger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Trigger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_634_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Trigger* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Trigger(*(S800Trigger*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Trigger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Trigger G__TS800Trigger;
static int G__S800Dict_634_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Trigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Trigger*) (soff+(sizeof(S800Trigger)*i)))->~G__TS800Trigger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Trigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Trigger*) (soff))->~G__TS800Trigger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_634_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Trigger* dest = (S800Trigger*) G__getstructoffset();
   *dest = *(S800Trigger*) libp->para[0].ref;
   const S800Trigger& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800TimeOfFlight */
static int G__S800Dict_635_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800TimeOfFlight*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800TimeOfFlight*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800TimeOfFlight*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800TimeOfFlight*) G__getstructoffset())->CalculateTOF();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800TimeOfFlight::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800TimeOfFlight::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800TimeOfFlight::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800TimeOfFlight::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800TimeOfFlight*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800TimeOfFlight::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800TimeOfFlight::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800TimeOfFlight::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_635_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800TimeOfFlight::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_635_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800TimeOfFlight *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800TimeOfFlight[n];
     } else {
       p = new((void*) gvp) S800TimeOfFlight[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800TimeOfFlight;
     } else {
       p = new((void*) gvp) S800TimeOfFlight;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_635_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800TimeOfFlight* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800TimeOfFlight(*(S800TimeOfFlight*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800TimeOfFlight G__TS800TimeOfFlight;
static int G__S800Dict_635_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800TimeOfFlight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800TimeOfFlight*) (soff+(sizeof(S800TimeOfFlight)*i)))->~G__TS800TimeOfFlight();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800TimeOfFlight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800TimeOfFlight*) (soff))->~G__TS800TimeOfFlight();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_635_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800TimeOfFlight* dest = (S800TimeOfFlight*) G__getstructoffset();
   *dest = *(S800TimeOfFlight*) libp->para[0].ref;
   const S800TimeOfFlight& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Pin */
static int G__S800Dict_636_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Pin*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Pin*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800Pin*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Pin*) G__getstructoffset())->PinCorrect();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Pin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Pin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Pin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Pin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Pin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Pin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Pin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Pin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_636_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Pin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_636_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Pin *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Pin[n];
     } else {
       p = new((void*) gvp) S800Pin[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Pin;
     } else {
       p = new((void*) gvp) S800Pin;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Pin));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_636_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Pin* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Pin(*(S800Pin*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Pin));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Pin G__TS800Pin;
static int G__S800Dict_636_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Pin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Pin*) (soff+(sizeof(S800Pin)*i)))->~G__TS800Pin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Pin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Pin*) (soff))->~G__TS800Pin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_636_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Pin* dest = (S800Pin*) G__getstructoffset();
   *dest = *(S800Pin*) libp->para[0].ref;
   const S800Pin& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800LaBr */
static int G__S800Dict_637_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800LaBr*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800LaBr*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800LaBr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800LaBr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800LaBr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800LaBr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800LaBr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800LaBr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800LaBr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800LaBr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_637_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800LaBr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_637_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800LaBr *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800LaBr[n];
     } else {
       p = new((void*) gvp) S800LaBr[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800LaBr;
     } else {
       p = new((void*) gvp) S800LaBr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800LaBr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_637_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800LaBr* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800LaBr(*(S800LaBr*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800LaBr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800LaBr G__TS800LaBr;
static int G__S800Dict_637_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800LaBr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800LaBr*) (soff+(sizeof(S800LaBr)*i)))->~G__TS800LaBr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800LaBr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800LaBr*) (soff))->~G__TS800LaBr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_637_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800LaBr* dest = (S800LaBr*) G__getstructoffset();
   *dest = *(S800LaBr*) libp->para[0].ref;
   const S800LaBr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Object */
static int G__S800Dict_638_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Object*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Object*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Object::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Object::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Object::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Object::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Object*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Object::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Object::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Object::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_638_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Object::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_638_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Object *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Object[n];
     } else {
       p = new((void*) gvp) S800Object[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Object;
     } else {
       p = new((void*) gvp) S800Object;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Object));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_638_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Object* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Object(*(S800Object*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Object));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Object G__TS800Object;
static int G__S800Dict_638_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Object*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Object*) (soff+(sizeof(S800Object)*i)))->~G__TS800Object();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Object*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Object*) (soff))->~G__TS800Object();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_638_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Object* dest = (S800Object*) G__getstructoffset();
   *dest = *(S800Object*) libp->para[0].ref;
   const S800Object& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Ppac */
static int G__S800Dict_639_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Ppac*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Ppac*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((S800Ppac*) G__getstructoffset())->Unpack((UShort_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Ppac*) G__getstructoffset())->Calibrate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Ppac*) G__getstructoffset())->CalculatePosition();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Ppac::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Ppac::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Ppac::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Ppac::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Ppac*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Ppac::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Ppac::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Ppac::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_639_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Ppac::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_639_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Ppac *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Ppac[n];
     } else {
       p = new((void*) gvp) S800Ppac[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Ppac;
     } else {
       p = new((void*) gvp) S800Ppac;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Ppac));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_639_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Ppac* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Ppac(*(S800Ppac*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Ppac));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Ppac G__TS800Ppac;
static int G__S800Dict_639_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Ppac*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Ppac*) (soff+(sizeof(S800Ppac)*i)))->~G__TS800Ppac();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Ppac*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Ppac*) (soff))->~G__TS800Ppac();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_639_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Ppac* dest = (S800Ppac*) G__getstructoffset();
   *dest = *(S800Ppac*) libp->para[0].ref;
   const S800Ppac& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Target */
static int G__S800Dict_640_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Target*) G__getstructoffset())->Initialize((S800Full*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Target*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Target*) G__getstructoffset())->Calculate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Target::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Target::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Target::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Target::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Target*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Target::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Target::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Target::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_640_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Target::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S800Dict_640_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Target *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Target[n];
     } else {
       p = new((void*) gvp) S800Target[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Target;
     } else {
       p = new((void*) gvp) S800Target;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Target));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_640_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Target* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Target(*(S800Target*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Target));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Target G__TS800Target;
static int G__S800Dict_640_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Target*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Target*) (soff+(sizeof(S800Target)*i)))->~G__TS800Target();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Target*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Target*) (soff))->~G__TS800Target();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_640_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Target* dest = (S800Target*) G__getstructoffset();
   *dest = *(S800Target*) libp->para[0].ref;
   const S800Target& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* s800Phys */
// automatic default constructor
static int G__S800Dict_641_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   s800Phys *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new s800Phys[n];
     } else {
       p = new((void*) gvp) s800Phys[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new s800Phys;
     } else {
       p = new((void*) gvp) s800Phys;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_s800Phys));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_641_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   s800Phys* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new s800Phys(*(s800Phys*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_s800Phys));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef s800Phys G__Ts800Phys;
static int G__S800Dict_641_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (s800Phys*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((s800Phys*) (soff+(sizeof(s800Phys)*i)))->~G__Ts800Phys();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (s800Phys*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((s800Phys*) (soff))->~G__Ts800Phys();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_641_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   s800Phys* dest = (s800Phys*) G__getstructoffset();
   *dest = *(s800Phys*) libp->para[0].ref;
   const s800Phys& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S800Physics */
static int G__S800Dict_642_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Physics* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Physics[n];
     } else {
       p = new((void*) gvp) S800Physics[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S800Physics;
     } else {
       p = new((void*) gvp) S800Physics;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Physics));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Physics*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S800Physics::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Physics::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S800Physics::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S800Physics::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S800Physics*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Physics::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Physics::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S800Physics::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S800Dict_642_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S800Physics::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S800Dict_642_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S800Physics* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S800Physics(*(S800Physics*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S800DictLN_S800Physics));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S800Physics G__TS800Physics;
static int G__S800Dict_642_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S800Physics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S800Physics*) (soff+(sizeof(S800Physics)*i)))->~G__TS800Physics();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S800Physics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S800Physics*) (soff))->~G__TS800Physics();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S800Dict_642_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S800Physics* dest = (S800Physics*) G__getstructoffset();
   *dest = *(S800Physics*) libp->para[0].ref;
   const S800Physics& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* S800Full */

/* S800Scaler */

/* S800ImMap */

/* S800Map */

/* S800FpCrdcCalc */

/* S800FpCrdcPads */

/* S800FpCrdc */

/* S800Tppac */

/* S800Track */

/* S800FpIonChamber */

/* S800FpScintillator */

/* S800FpTrack */

/* S800FpHodo */

/* S800FocalPlane */

/* S800ClassicPpac */

/* S800Image */

/* S800TimeStamp */

/* S800EventNumber */

/* S800Trigger */

/* S800TimeOfFlight */

/* S800Pin */

/* S800LaBr */

/* S800Object */

/* S800Ppac */

/* S800Target */

/* s800Phys */

/* S800Physics */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncS800Dict {
 public:
  G__Sizep2memfuncS800Dict(): p(&G__Sizep2memfuncS800Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncS800Dict::*p)();
};

size_t G__get_sizep2memfuncS800Dict()
{
  G__Sizep2memfuncS800Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceS800Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Full))) {
     S800Full *G__Lderived;
     G__Lderived=(S800Full*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Full),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Scaler))) {
     S800Scaler *G__Lderived;
     G__Lderived=(S800Scaler*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Scaler),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800ImMap))) {
     S800ImMap *G__Lderived;
     G__Lderived=(S800ImMap*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800ImMap),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Map))) {
     S800Map *G__Lderived;
     G__Lderived=(S800Map*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Map),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc))) {
     S800FpCrdcCalc *G__Lderived;
     G__Lderived=(S800FpCrdcCalc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads))) {
     S800FpCrdcPads *G__Lderived;
     G__Lderived=(S800FpCrdcPads*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc))) {
     S800FpCrdc *G__Lderived;
     G__Lderived=(S800FpCrdc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Tppac))) {
     S800Tppac *G__Lderived;
     G__Lderived=(S800Tppac*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Tppac),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Track))) {
     S800Track *G__Lderived;
     G__Lderived=(S800Track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Track),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber))) {
     S800FpIonChamber *G__Lderived;
     G__Lderived=(S800FpIonChamber*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator))) {
     S800FpScintillator *G__Lderived;
     G__Lderived=(S800FpScintillator*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800FpTrack))) {
     S800FpTrack *G__Lderived;
     G__Lderived=(S800FpTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpTrack),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800FpHodo))) {
     S800FpHodo *G__Lderived;
     G__Lderived=(S800FpHodo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpHodo),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane))) {
     S800FocalPlane *G__Lderived;
     G__Lderived=(S800FocalPlane*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800ClassicPpac))) {
     S800ClassicPpac *G__Lderived;
     G__Lderived=(S800ClassicPpac*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800ClassicPpac),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Image))) {
     S800Image *G__Lderived;
     G__Lderived=(S800Image*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Image),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp))) {
     S800TimeStamp *G__Lderived;
     G__Lderived=(S800TimeStamp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800EventNumber))) {
     S800EventNumber *G__Lderived;
     G__Lderived=(S800EventNumber*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800EventNumber),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Trigger))) {
     S800Trigger *G__Lderived;
     G__Lderived=(S800Trigger*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Trigger),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight))) {
     S800TimeOfFlight *G__Lderived;
     G__Lderived=(S800TimeOfFlight*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Pin))) {
     S800Pin *G__Lderived;
     G__Lderived=(S800Pin*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Pin),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800LaBr))) {
     S800LaBr *G__Lderived;
     G__Lderived=(S800LaBr*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800LaBr),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Object))) {
     S800Object *G__Lderived;
     G__Lderived=(S800Object*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Object),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Ppac))) {
     S800Ppac *G__Lderived;
     G__Lderived=(S800Ppac*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Ppac),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Target))) {
     S800Target *G__Lderived;
     G__Lderived=(S800Target*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Target),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S800DictLN_S800Physics))) {
     S800Physics *G__Lderived;
     G__Lderived=(S800Physics*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S800DictLN_S800Physics),G__get_linked_tagnum(&G__S800DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableS800Dict() {

   /* Setting up typedef entry */
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__S800DictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__S800DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__S800DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__S800DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__S800DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__S800DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__S800DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__S800DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__S800DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__S800DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Short_t>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEshortcOallocatorlEshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g3ChannelEvent>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g3CrystalEvent>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<historyEvent>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g2IntPt>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g2CrystalEvent>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<trackedGamma>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g1GammaEvent>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<g4Sim_abcd1234>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__S800DictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S800DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S800DictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* S800Full */
static void G__setup_memvarS800Full(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Full));
   { S800Full *p; p=(S800Full*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->s800data)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"s800data[8192]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->InvalidBitReg)-(long)(p)),105,0,0,-1,-1,-1,1,"InvalidBitReg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->debugMode)-(long)(p)),103,0,0,-1,-1,-1,1,"debugMode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->evtreset)-(long)(p)),103,0,0,-1,-1,-1,1,"evtreset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->invalid)-(long)(p)),105,0,0,-1,-1,-1,1,"invalid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->evtlength)-(long)(p)),100,0,0,-1,-1,-1,1,"evtlength=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->evtcount)-(long)(p)),100,0,0,-1,-1,-1,1,"evtcount=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->evtNumber)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"evtNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lastEvtNumber)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"lastEvtNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->evtReset)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"evtReset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reportEvtIncrease)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"reportEvtIncrease=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->labr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800LaBr),-1,-1,1,"labr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane),-1,-1,1,"fp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->target)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Target),-1,-1,1,"target=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->im)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Image),-1,-1,1,"im=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->obj)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Object),-1,-1,1,"obj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trigger)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Trigger),-1,-1,1,"trigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->evtnum)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800EventNumber),-1,-1,1,"evtnum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp),-1,-1,1,"ts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tof)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight),-1,-1,1,"tof=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phys)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Physics),-1,-1,1,"phys=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Scaler */
static void G__setup_memvarS800Scaler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Scaler));
   { S800Scaler *p; p=(S800Scaler*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->start)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"start=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->end)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"end=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->globalTS)-(long)(p)),110,0,0,-1,-1,-1,1,"globalTS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nScaler)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"nScaler=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Id)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,1,"Id=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"value[260]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->valueOld)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"valueOld[260]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rate)-(long)(p)),109,0,0,-1,G__defined_typename("ULong64_t"),-1,1,"rate[260]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->auxData)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"auxData[8192]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800ImMap */
static void G__setup_memvarS800ImMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800ImMap));
   { S800ImMap *p; p=(S800ImMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxcoefficient)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"maxcoefficient[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->order)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"order[6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->exponent)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"exponent[6][6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->coefficient)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"coefficient[6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxcoefficients)-(long)(p)),100,0,0,-1,-1,-1,1,"maxcoefficients=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxparameters)-(long)(p)),100,0,0,-1,-1,-1,1,"maxparameters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxorder)-(long)(p)),100,0,0,-1,-1,-1,1,"maxorder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->imMapFilename)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_TString),-1,-1,1,"imMapFilename=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Map */
static void G__setup_memvarS800Map(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Map));
   { S800Map *p; p=(S800Map*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxcoefficient)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"maxcoefficient[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->order)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"order[6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->exponent)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"exponent[6][6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->coefficient)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"coefficient[6][200]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxcoefficients)-(long)(p)),100,0,0,-1,-1,-1,1,"maxcoefficients=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxparameters)-(long)(p)),100,0,0,-1,-1,-1,1,"maxparameters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxorder)-(long)(p)),100,0,0,-1,-1,-1,1,"maxorder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mapFilename)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_TString),-1,-1,1,"mapFilename=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800FpCrdcCalc */
static void G__setup_memvarS800FpCrdcCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc));
   { S800FpCrdcCalc *p; p=(S800FpCrdcCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"m_badpad[224]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_saturationvalue=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->padmax)-(long)(p)),100,0,0,-1,-1,-1,1,"padmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->padsum)-(long)(p)),100,0,0,-1,-1,-1,1,"padsum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->padused)-(long)(p)),100,0,0,-1,-1,-1,1,"padused=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxpad)-(long)(p)),100,0,0,-1,-1,-1,1,"maxpad[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxpad0)-(long)(p)),100,0,0,-1,-1,-1,1,"maxpad0[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->padcalc)-(long)(p)),100,0,0,-1,-1,-1,1,"padcalc[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->saturationWidth)-(long)(p)),100,0,0,-1,-1,-1,1,"saturationWidth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_gravity)-(long)(p)),100,0,0,-1,-1,-1,1,"x_gravity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gravity_width)-(long)(p)),100,0,0,-1,-1,-1,1,"gravity_width=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fit_width)-(long)(p)),100,0,0,-1,-1,-1,1,"fit_width=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->method)-(long)(p)),100,0,0,-1,-1,-1,1,"method=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->saturation)-(long)(p)),100,0,0,-1,-1,-1,1,"saturation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_saturation)-(long)(p)),100,0,0,-1,-1,-1,1,"m_saturation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badpads)-(long)(p)),100,0,0,-1,-1,-1,1,"badpads=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badpad)-(long)(p)),100,0,0,-1,-1,-1,1,"badpad[99]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_pad)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads),-1,-1,1,"m_pad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_parent)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc),-1,-1,1,"m_parent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800FpCrdcPads */
static void G__setup_memvarS800FpCrdcPads(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads));
   { S800FpCrdcPads *p; p=(S800FpCrdcPads*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_width=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"m_dprojX[224]=",0,"For classic SpecTcl method */");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_caltable[224][1024]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_minChn)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"m_minChn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_maxChn)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"m_maxChn=",0,"Actually max+1 (easier loops) */");
   G__memvar_setup((void*)((long)(&p->m_padlist)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"m_padlist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_padlist_iter)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator),-1,-1,1,"m_padlist_iter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_samples)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"m_samples[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->raw)-(long)(p)),100,0,0,-1,-1,-1,1,"raw[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cal)-(long)(p)),100,0,0,-1,-1,-1,1,"cal[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->samples)-(long)(p)),105,0,0,-1,-1,-1,1,"samples[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->samplemax)-(long)(p)),100,0,0,-1,-1,-1,1,"samplemax[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->samplemin)-(long)(p)),100,0,0,-1,-1,-1,1,"samplemin[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->delta)-(long)(p)),100,0,0,-1,-1,-1,1,"delta[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_samplemax)-(long)(p)),105,0,0,-1,-1,-1,1,"m_samplemax[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_samplemin)-(long)(p)),105,0,0,-1,-1,-1,1,"m_samplemin[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ped)-(long)(p)),100,0,0,-1,-1,-1,1,"ped[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minsamples)-(long)(p)),100,0,0,-1,-1,-1,1,"minsamples[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_thresh)-(long)(p)),100,0,0,-1,-1,-1,1,"m_thresh[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slope)-(long)(p)),100,0,0,-1,-1,-1,1,"slope[224]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->offset)-(long)(p)),100,0,0,-1,-1,-1,1,"offset[224]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800FpCrdc */
static void G__setup_memvarS800FpCrdc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc));
   { S800FpCrdc *p; p=(S800FpCrdc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pad)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads),-1,-1,1,"pad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->calc)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc),-1,-1,1,"calc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,-1,-1,1,"x=",0,"! CRDC x position, in mm */");
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,-1,-1,1,"y=",0,"! CRDC y position, in mm */");
   G__memvar_setup((void*)((long)(&p->tac)-(long)(p)),100,0,0,-1,-1,-1,1,"tac=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->anode)-(long)(p)),100,0,0,-1,-1,-1,1,"anode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->evtlength)-(long)(p)),100,0,0,-1,-1,-1,1,"evtlength=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"x_offset=",0,"! CRDC x calibration offset, in mm */");
   G__memvar_setup((void*)((long)(&p->x_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"x_slope=",0,"! CRDC x calibration slope, in mm/pad */");
   G__memvar_setup((void*)((long)(&p->y_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"y_offset=",0,"! CRDC y calibration offset, in mm */");
   G__memvar_setup((void*)((long)(&p->y_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"y_slope=",0,"! CRDC y calibration slope, in mm/ns */");
   G__memvar_setup((void*)((long)(&p->xy_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"xy_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xy_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"xy_slope=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Tppac */
static void G__setup_memvarS800Tppac(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Tppac));
   { S800Tppac *p; p=(S800Tppac*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"m_badxstrip[64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"m_badystrip[64]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xstrip)-(long)(p)),100,0,0,-1,-1,-1,1,"xstrip[64]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ystrip)-(long)(p)),100,0,0,-1,-1,-1,1,"ystrip[64]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xsum)-(long)(p)),100,0,0,-1,-1,-1,1,"xsum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ysum)-(long)(p)),100,0,0,-1,-1,-1,1,"ysum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xmult)-(long)(p)),100,0,0,-1,-1,-1,1,"xmult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ymult)-(long)(p)),100,0,0,-1,-1,-1,1,"ymult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,-1,-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,-1,-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badxstrips)-(long)(p)),100,0,0,-1,-1,-1,1,"badxstrips=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badxstrip)-(long)(p)),100,0,0,-1,-1,-1,1,"badxstrip[20]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badystrips)-(long)(p)),100,0,0,-1,-1,-1,1,"badystrips=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->badystrip)-(long)(p)),100,0,0,-1,-1,-1,1,"badystrip[20]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->width)-(long)(p)),100,0,0,-1,-1,-1,1,"width=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xcenter)-(long)(p)),100,0,0,-1,-1,-1,1,"xcenter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ycenter)-(long)(p)),100,0,0,-1,-1,-1,1,"ycenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Track */
static void G__setup_memvarS800Track(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Track));
   { S800Track *p; p=(S800Track*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_thresh=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_projX[4][64]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_minChn[4]=",0,"x(det1) y(det1) x(det2) y(det2) */");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_maxChn[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_width=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tppac1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Tppac),-1,-1,1,"tppac1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tppac2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Tppac),-1,-1,1,"tppac2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xim)-(long)(p)),100,0,0,-1,-1,-1,1,"xim=",0,"!< dispersive direction position at S800 image, in m */");
   G__memvar_setup((void*)((long)(&p->yim)-(long)(p)),100,0,0,-1,-1,-1,1,"yim=",0,"!< non-dispersive direction position at S800 image, in m */");
   G__memvar_setup((void*)((long)(&p->aim)-(long)(p)),100,0,0,-1,-1,-1,1,"aim=",0,"!< dispersive angle at S800 image, in radians */");
   G__memvar_setup((void*)((long)(&p->bim)-(long)(p)),100,0,0,-1,-1,-1,1,"bim=",0,"!< dispersive angle at S800 image, in radians */");
   G__memvar_setup((void*)((long)(&p->dim)-(long)(p)),100,0,0,-1,-1,-1,1,"dim=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xta)-(long)(p)),100,0,0,-1,-1,-1,1,"xta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yta)-(long)(p)),100,0,0,-1,-1,-1,1,"yta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ata)-(long)(p)),100,0,0,-1,-1,-1,1,"ata=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bta)-(long)(p)),100,0,0,-1,-1,-1,1,"bta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->order)-(long)(p)),100,0,0,-1,-1,-1,1,"order=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->map)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800ImMap),-1,-1,1,"map=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800FpIonChamber */
static void G__setup_memvarS800FpIonChamber(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber));
   { S800FpIonChamber *p; p=(S800FpIonChamber*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"m_activeChannels=",0,"buildcaltable figures this out */");
   G__memvar_setup((void*)((long)(&p->caltable_cal)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"caltable_cal[16][4095]=",0,"raw c[0..0x0fff] */");
   G__memvar_setup((void*)((long)(&p->caltable_de)-(long)(p)),114,0,0,-1,G__defined_typename("UShort_t"),-1,1,"caltable_de[4095]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->caltable_xtilt)-(long)(p)),100,0,0,-1,-1,-1,1,"caltable_xtilt[4095]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->caltable_ytilt)-(long)(p)),100,0,0,-1,-1,-1,1,"caltable_ytilt[4095]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->raw)-(long)(p)),100,0,0,-1,-1,-1,1,"raw[16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cal)-(long)(p)),100,0,0,-1,-1,-1,1,"cal[16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tac1)-(long)(p)),100,0,0,-1,-1,-1,1,"tac1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tac2)-(long)(p)),100,0,0,-1,-1,-1,1,"tac2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sum)-(long)(p)),100,0,0,-1,-1,-1,1,"sum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->de)-(long)(p)),100,0,0,-1,-1,-1,1,"de=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slope)-(long)(p)),100,0,0,-1,-1,-1,1,"slope[16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->offset)-(long)(p)),100,0,0,-1,-1,-1,1,"offset[16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->active)-(long)(p)),100,0,0,-1,-1,-1,1,"active[16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->de_x0tilt)-(long)(p)),100,0,0,-1,-1,-1,1,"de_x0tilt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->de_xtilt)-(long)(p)),100,0,0,-1,-1,-1,1,"de_xtilt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->de_ytilt)-(long)(p)),100,0,0,-1,-1,-1,1,"de_ytilt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->de_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"de_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->de_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"de_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800FpScintillator */
static void G__setup_memvarS800FpScintillator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator));
   { S800FpScintillator *p; p=(S800FpScintillator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->de_up)-(long)(p)),100,0,0,-1,-1,-1,1,"de_up=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->de_down)-(long)(p)),100,0,0,-1,-1,-1,1,"de_down=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time_up)-(long)(p)),100,0,0,-1,-1,-1,1,"time_up=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time_down)-(long)(p)),100,0,0,-1,-1,-1,1,"time_down=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->de)-(long)(p)),100,0,0,-1,-1,-1,1,"de=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pos)-(long)(p)),100,0,0,-1,-1,-1,1,"pos=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800FpTrack */
static void G__setup_memvarS800FpTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpTrack));
   { S800FpTrack *p; p=(S800FpTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfp)-(long)(p)),100,0,0,-1,-1,-1,1,"xfp=",0,"!< Focal plane dispersive direction position, in m */");
   G__memvar_setup((void*)((long)(&p->afp)-(long)(p)),100,0,0,-1,-1,-1,1,"afp=",0,"!< FP dispersive angle, in radians */");
   G__memvar_setup((void*)((long)(&p->yfp)-(long)(p)),100,0,0,-1,-1,-1,1,"yfp=",0,"!< FP non-dispersive direction, in m */");
   G__memvar_setup((void*)((long)(&p->bfp)-(long)(p)),100,0,0,-1,-1,-1,1,"bfp=",0,"!< FP non-dispersive angle, in radians */");
   G__memvar_setup((void*)((long)(&p->ata)-(long)(p)),100,0,0,-1,-1,-1,1,"ata=",0,"!< Dispersive angle at the target, in radians */");
   G__memvar_setup((void*)((long)(&p->yta)-(long)(p)),100,0,0,-1,-1,-1,1,"yta=",0,"!< Non-dispersive position at the target, in m */");
   G__memvar_setup((void*)((long)(&p->bta)-(long)(p)),100,0,0,-1,-1,-1,1,"bta=",0,"!< Non-dispersive angle at the target, in radians */");
   G__memvar_setup((void*)((long)(&p->dta)-(long)(p)),100,0,0,-1,-1,-1,1,"dta=",0,"!< Fractional energy at the target, (E-E0)/E0, in parts */");
   G__memvar_setup((void*)((long)(&p->azita)-(long)(p)),100,0,0,-1,-1,-1,1,"azita=",0,"!< Phi polar angle at target, in radians */");
   G__memvar_setup((void*)((long)(&p->scatter)-(long)(p)),100,0,0,-1,-1,-1,1,"scatter=",0,"!< Theta polar angle at target, in mradians */");
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,-1,-1,1,"energy=",0,"!< Energy at target, in MeV */");
   G__memvar_setup((void*)((long)(&p->ptot)-(long)(p)),100,0,0,-1,-1,-1,1,"ptot=",0,"!< Total momentum, in MeV/c */");
   G__memvar_setup((void*)((long)(&p->ppar)-(long)(p)),100,0,0,-1,-1,-1,1,"ppar=",0,"!< Parallel momentum, in MeV/c */");
   G__memvar_setup((void*)((long)(&p->ptra)-(long)(p)),100,0,0,-1,-1,-1,1,"ptra=",0,"!< Transverse momentum, in MeV/c */");
   G__memvar_setup((void*)((long)(&p->ata_cor)-(long)(p)),100,0,0,-1,-1,-1,1,"ata_cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bta_cor)-(long)(p)),100,0,0,-1,-1,-1,1,"bta_cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->azita_cor)-(long)(p)),100,0,0,-1,-1,-1,1,"azita_cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scatter_cor)-(long)(p)),100,0,0,-1,-1,-1,1,"scatter_cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->anglea)-(long)(p)),100,0,0,-1,-1,-1,1,"anglea=",0,"!< Dispersive angle offset, in radians */");
   G__memvar_setup((void*)((long)(&p->angleb)-(long)(p)),100,0,0,-1,-1,-1,1,"angleb=",0,"!< Non-dispersive angle offset, in radians */");
   G__memvar_setup((void*)((long)(&p->brho)-(long)(p)),100,0,0,-1,-1,-1,1,"brho=",0,"!< Brho of the S800, i.e. rigidity of a particle ");
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),100,0,0,-1,-1,-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),100,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->order)-(long)(p)),100,0,0,-1,-1,-1,1,"order=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zfp)-(long)(p)),100,0,0,-1,-1,-1,1,"zfp=",0,"!< Displacement of FP position from CRDC1, ");
   G__memvar_setup((void*)((long)(&p->gecorr)-(long)(p)),100,0,0,-1,-1,-1,1,"gecorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->anglea_cor)-(long)(p)),100,0,0,-1,-1,-1,1,"anglea_cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->angleb_cor)-(long)(p)),100,0,0,-1,-1,-1,1,"angleb_cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ata_dtacor)-(long)(p)),100,0,0,-1,-1,-1,1,"ata_dtacor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bta_ytacor)-(long)(p)),100,0,0,-1,-1,-1,1,"bta_ytacor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->map)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Map),-1,-1,1,"map=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beta0)-(long)(p)),100,0,0,-1,-1,-1,1,"beta0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltabeta)-(long)(p)),100,0,0,-1,-1,-1,1,"deltabeta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800FpHodo */
static void G__setup_memvarS800FpHodo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpHodo));
   { S800FpHodo *p; p=(S800FpHodo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->raw)-(long)(p)),100,0,0,-1,-1,-1,1,"raw[32]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cal)-(long)(p)),100,0,0,-1,-1,-1,1,"cal[32]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->max)-(long)(p)),100,0,0,-1,-1,-1,1,"max=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sum)-(long)(p)),100,0,0,-1,-1,-1,1,"sum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mult)-(long)(p)),100,0,0,-1,-1,-1,1,"mult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slope)-(long)(p)),100,0,0,-1,-1,-1,1,"slope[32]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->offset)-(long)(p)),100,0,0,-1,-1,-1,1,"offset[32]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xCorr)-(long)(p)),100,0,0,-1,-1,-1,1,"xCorr[32]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800FocalPlane */
static void G__setup_memvarS800FocalPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane));
   { S800FocalPlane *p; p=(S800FocalPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator),-1,-1,4,"m_e[3]=",0,"Internal for ScintUnpack() */");
   G__memvar_setup((void*)((long)(&p->e1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator),-1,-1,1,"e1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator),-1,-1,1,"e2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e3)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator),-1,-1,1,"e3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ic)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber),-1,-1,1,"ic=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crdc1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc),-1,-1,1,"crdc1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crdc2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc),-1,-1,1,"crdc2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->track)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpTrack),-1,-1,1,"track=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hodo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_S800FpHodo),-1,-1,1,"hodo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gap)-(long)(p)),100,0,0,-1,-1,-1,1,"gap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800ClassicPpac */
static void G__setup_memvarS800ClassicPpac(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800ClassicPpac));
   { S800ClassicPpac *p; p=(S800ClassicPpac*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->up)-(long)(p)),100,0,0,-1,-1,-1,1,"up=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->down)-(long)(p)),100,0,0,-1,-1,-1,1,"down=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->left)-(long)(p)),100,0,0,-1,-1,-1,1,"left=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->right)-(long)(p)),100,0,0,-1,-1,-1,1,"right=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,-1,-1,1,"x=",0,"mm */");
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,-1,-1,1,"y=",0,"mm */");
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,-1,-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->u_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"u_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->u_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"u_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"d_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"d_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->l_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"l_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->l_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"l_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"r_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"r_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"x_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"x_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"y_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"y_slope=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Image */
static void G__setup_memvarS800Image(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Image));
   { S800Image *p; p=(S800Image*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,-1,-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),100,0,0,-1,-1,-1,1,"theta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,-1,-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dp)-(long)(p)),100,0,0,-1,-1,-1,1,"dp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,-1,-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gap)-(long)(p)),100,0,0,-1,-1,-1,1,"gap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dpphi)-(long)(p)),100,0,0,-1,-1,-1,1,"dpphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trigger)-(long)(p)),103,0,0,-1,-1,-1,1,"trigger=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800TimeStamp */
static void G__setup_memvarS800TimeStamp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp));
   { S800TimeStamp *p; p=(S800TimeStamp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"m_prevStamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stampHigh)-(long)(p)),100,0,0,-1,-1,-1,1,"stampHigh=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stampMid)-(long)(p)),100,0,0,-1,-1,-1,1,"stampMid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stampLow)-(long)(p)),100,0,0,-1,-1,-1,1,"stampLow=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stampLowest)-(long)(p)),100,0,0,-1,-1,-1,1,"stampLowest=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diff)-(long)(p)),100,0,0,-1,-1,-1,1,"diff=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timestamp)-(long)(p)),110,0,0,-1,-1,-1,1,"timestamp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800EventNumber */
static void G__setup_memvarS800EventNumber(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800EventNumber));
   { S800EventNumber *p; p=(S800EventNumber*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eventNum)-(long)(p)),110,0,0,-1,-1,-1,1,"eventNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Trigger */
static void G__setup_memvarS800Trigger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Trigger));
   { S800Trigger *p; p=(S800Trigger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"m_prevStamp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->reg)-(long)(p)),100,0,0,-1,-1,-1,1,"reg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->s800)-(long)(p)),100,0,0,-1,-1,-1,1,"s800=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->external1)-(long)(p)),100,0,0,-1,-1,-1,1,"external1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->external2)-(long)(p)),100,0,0,-1,-1,-1,1,"external2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->secondary)-(long)(p)),100,0,0,-1,-1,-1,1,"secondary=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800TimeOfFlight */
static void G__setup_memvarS800TimeOfFlight(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight));
   { S800TimeOfFlight *p; p=(S800TimeOfFlight*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rf)-(long)(p)),100,0,0,-1,-1,-1,1,"rf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->obj)-(long)(p)),100,0,0,-1,-1,-1,1,"obj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfp)-(long)(p)),100,0,0,-1,-1,-1,1,"xfp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfp_obj)-(long)(p)),100,0,0,-1,-1,-1,1,"xfp_obj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rfe1)-(long)(p)),100,0,0,-1,-1,-1,1,"rfe1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->obje1)-(long)(p)),100,0,0,-1,-1,-1,1,"obje1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfpe1)-(long)(p)),100,0,0,-1,-1,-1,1,"xfpe1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->obje2)-(long)(p)),100,0,0,-1,-1,-1,1,"obje2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfpe2)-(long)(p)),100,0,0,-1,-1,-1,1,"xfpe2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tac_obj)-(long)(p)),100,0,0,-1,-1,-1,1,"tac_obj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tac_obje1)-(long)(p)),100,0,0,-1,-1,-1,1,"tac_obje1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tac_xfp)-(long)(p)),100,0,0,-1,-1,-1,1,"tac_xfp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tac_xfpe1)-(long)(p)),100,0,0,-1,-1,-1,1,"tac_xfpe1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diaor)-(long)(p)),100,0,0,-1,-1,-1,1,"diaor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia1)-(long)(p)),100,0,0,-1,-1,-1,1,"dia1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia2)-(long)(p)),100,0,0,-1,-1,-1,1,"dia2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia3)-(long)(p)),100,0,0,-1,-1,-1,1,"dia3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia4)-(long)(p)),100,0,0,-1,-1,-1,1,"dia4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia1RF)-(long)(p)),100,0,0,-1,-1,-1,1,"dia1RF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia2RF)-(long)(p)),100,0,0,-1,-1,-1,1,"dia2RF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia3RF)-(long)(p)),100,0,0,-1,-1,-1,1,"dia3RF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia4RF)-(long)(p)),100,0,0,-1,-1,-1,1,"dia4RF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diaRF)-(long)(p)),100,0,0,-1,-1,-1,1,"diaRF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia1Cor)-(long)(p)),100,0,0,-1,-1,-1,1,"dia1Cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia2Cor)-(long)(p)),100,0,0,-1,-1,-1,1,"dia2Cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia3Cor)-(long)(p)),100,0,0,-1,-1,-1,1,"dia3Cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia4Cor)-(long)(p)),100,0,0,-1,-1,-1,1,"dia4Cor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diaCor)-(long)(p)),100,0,0,-1,-1,-1,1,"diaCor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->obj_shift)-(long)(p)),100,0,0,-1,-1,-1,1,"obj_shift=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rfCorrection)-(long)(p)),100,0,0,-1,-1,-1,1,"rfCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rfe1Correction)-(long)(p)),100,0,0,-1,-1,-1,1,"rfe1Correction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->objCorrection)-(long)(p)),100,0,0,-1,-1,-1,1,"objCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diaCorrection)-(long)(p)),100,0,0,-1,-1,-1,1,"diaCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->diax)-(long)(p)),100,0,0,-1,-1,-1,1,"diax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia2ndCor)-(long)(p)),100,0,0,-1,-1,-1,1,"dia2ndCor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia2ndCorOffset)-(long)(p)),100,0,0,-1,-1,-1,1,"dia2ndCorOffset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia1offset)-(long)(p)),100,0,0,-1,-1,-1,1,"dia1offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia2offset)-(long)(p)),100,0,0,-1,-1,-1,1,"dia2offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia3offset)-(long)(p)),100,0,0,-1,-1,-1,1,"dia3offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dia4offset)-(long)(p)),100,0,0,-1,-1,-1,1,"dia4offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfpCorrection)-(long)(p)),100,0,0,-1,-1,-1,1,"xfpCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->obje1Correction)-(long)(p)),100,0,0,-1,-1,-1,1,"obje1Correction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfpe1Correction)-(long)(p)),100,0,0,-1,-1,-1,1,"xfpe1Correction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->obje2Correction)-(long)(p)),100,0,0,-1,-1,-1,1,"obje2Correction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xfpe2Correction)-(long)(p)),100,0,0,-1,-1,-1,1,"xfpe2Correction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->im2objCorrection)-(long)(p)),100,0,0,-1,-1,-1,1,"im2objCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tacobjCorrection)-(long)(p)),100,0,0,-1,-1,-1,1,"tacobjCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tacobje1Correction)-(long)(p)),100,0,0,-1,-1,-1,1,"tacobje1Correction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tacxfpCorrection)-(long)(p)),100,0,0,-1,-1,-1,1,"tacxfpCorrection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tacxfpe1Correction)-(long)(p)),100,0,0,-1,-1,-1,1,"tacxfpe1Correction=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Pin */
static void G__setup_memvarS800Pin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Pin));
   { S800Pin *p; p=(S800Pin*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),100,0,0,-1,-1,-1,1,"e=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->t)-(long)(p)),100,0,0,-1,-1,-1,1,"t=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecorr)-(long)(p)),100,0,0,-1,-1,-1,1,"ecorr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dE)-(long)(p)),100,0,0,-1,-1,-1,1,"dE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"e_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"e_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pin_cor)-(long)(p)),100,0,0,-1,-1,-1,1,"pin_cor=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800LaBr */
static void G__setup_memvarS800LaBr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800LaBr));
   { S800LaBr *p; p=(S800LaBr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),100,0,0,-1,-1,-1,1,"energy[16]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,-1,-1,1,"time[16]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Object */
static void G__setup_memvarS800Object(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Object));
   { S800Object *p; p=(S800Object*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Ppac */
static void G__setup_memvarS800Ppac(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Ppac));
   { S800Ppac *p; p=(S800Ppac*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"hasdata=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->up)-(long)(p)),100,0,0,-1,-1,-1,1,"up=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->down)-(long)(p)),100,0,0,-1,-1,-1,1,"down=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->left)-(long)(p)),100,0,0,-1,-1,-1,1,"left=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->right)-(long)(p)),100,0,0,-1,-1,-1,1,"right=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->a)-(long)(p)),100,0,0,-1,-1,-1,1,"a=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),100,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumx)-(long)(p)),100,0,0,-1,-1,-1,1,"sumx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sumy)-(long)(p)),100,0,0,-1,-1,-1,1,"sumy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,-1,-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),100,0,0,-1,-1,-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),100,0,0,-1,-1,-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->u_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"u_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->u_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"u_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"d_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"d_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->l_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"l_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->l_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"l_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"r_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"r_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"x_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"x_slope=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_offset)-(long)(p)),100,0,0,-1,-1,-1,1,"y_offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y_slope)-(long)(p)),100,0,0,-1,-1,-1,1,"y_slope=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Target */
static void G__setup_memvarS800Target(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Target));
   { S800Target *p; p=(S800Target*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_S800Full),-1,-1,4,"m_top=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* s800Phys */
static void G__setup_memvars800Phys(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_s800Phys));
   { s800Phys *p; p=(s800Phys*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,G__defined_typename("int32_t"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crdc1_x)-(long)(p)),102,0,0,-1,-1,-1,1,"crdc1_x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crdc1_y)-(long)(p)),102,0,0,-1,-1,-1,1,"crdc1_y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crdc2_x)-(long)(p)),102,0,0,-1,-1,-1,1,"crdc2_x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crdc2_y)-(long)(p)),102,0,0,-1,-1,-1,1,"crdc2_y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ic_sum)-(long)(p)),102,0,0,-1,-1,-1,1,"ic_sum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tof_xfp)-(long)(p)),102,0,0,-1,-1,-1,1,"tof_xfp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tof_obj)-(long)(p)),102,0,0,-1,-1,-1,1,"tof_obj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rf)-(long)(p)),102,0,0,-1,-1,-1,1,"rf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trigger)-(long)(p)),105,0,0,-1,G__defined_typename("int32_t"),-1,1,"trigger=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ic_de)-(long)(p)),102,0,0,-1,-1,-1,1,"ic_de=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tof_xfpe1)-(long)(p)),102,0,0,-1,-1,-1,1,"tof_xfpe1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tof_obje1)-(long)(p)),102,0,0,-1,-1,-1,1,"tof_obje1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tof_rfe1)-(long)(p)),102,0,0,-1,-1,-1,1,"tof_rfe1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ata)-(long)(p)),102,0,0,-1,-1,-1,1,"ata=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bta)-(long)(p)),102,0,0,-1,-1,-1,1,"bta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dta)-(long)(p)),102,0,0,-1,-1,-1,1,"dta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yta)-(long)(p)),102,0,0,-1,-1,-1,1,"yta=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S800Physics */
static void G__setup_memvarS800Physics(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S800DictLN_S800Physics));
   { S800Physics *p; p=(S800Physics*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->s800Ph)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__S800DictLN_s800Phys),-1,-1,1,"s800Ph=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S800DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarS800Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncS800Full(void) {
   /* S800Full */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Full));
   G__memfunc_setup("S800Full",638,G__S800Dict_612_0_1, 105, G__get_linked_tagnum(&G__S800DictLN_S800Full), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__S800Dict_612_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_612_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoInvalidBitReg",1463,G__S800Dict_612_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAndProcessS800",1565,G__S800Dict_612_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"E - - 0 - inf i - 'Int_t' 0 - length", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNextValue",1212,G__S800Dict_612_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "E - - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeS800Variables",2198,G__S800Dict_612_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - inputFilename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateS800RunVariables",2076,G__S800Dict_612_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDoppler",1046,G__S800Dict_612_0_9, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'TVector3' - 0 - xyz f - 'Float_t' 0 - beta "
"U 'GRETINAVariables' - 0 - gVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhysics",1059,G__S800Dict_612_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - inf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_612_0_11, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Full::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_612_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Full::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_612_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Full::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_612_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Full::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_612_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_612_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Full::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_612_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Full::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_612_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Full::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_612_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Full::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S800Full", 638, G__S800Dict_612_0_23, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Full), -1, 0, 1, 1, 1, 0, "u 'S800Full' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Full", 764, G__S800Dict_612_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_612_0_25, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Full), -1, 1, 1, 1, 1, 0, "u 'S800Full' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Scaler(void) {
   /* S800Scaler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Scaler));
   G__memfunc_setup("S800Scaler",837,G__S800Dict_613_0_1, 105, G__get_linked_tagnum(&G__S800DictLN_S800Scaler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__S800Dict_613_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeS800ScalerParameters",2923,G__S800Dict_613_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - inputFilename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_613_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAndProcessS800Aux",1867,G__S800Dict_613_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"E - - 0 - inf i - 'Int_t' 0 - length "
"n - - 0 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_613_0_6, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Scaler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_613_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Scaler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_613_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Scaler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_613_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Scaler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_613_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_613_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Scaler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_613_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Scaler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_613_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Scaler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_613_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Scaler::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S800Scaler", 837, G__S800Dict_613_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Scaler), -1, 0, 1, 1, 1, 0, "u 'S800Scaler' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Scaler", 963, G__S800Dict_613_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_613_0_20, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Scaler), -1, 1, 1, 1, 1, 0, "u 'S800Scaler' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800ImMap(void) {
   /* S800ImMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800ImMap));
   G__memfunc_setup("Initialize",1042,G__S800Dict_614_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadInverseMap",1402,G__S800Dict_614_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_614_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WasLoaded",884,G__S800Dict_614_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__S800Dict_614_0_5, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - calcorder i - - 0 - parameter "
"D - - 0 - input", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_614_0_6, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800ImMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_614_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800ImMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_614_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800ImMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_614_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800ImMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_614_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_614_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800ImMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_614_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800ImMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_614_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800ImMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_614_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800ImMap::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800ImMap", 703, G__S800Dict_614_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800ImMap), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800ImMap", 703, G__S800Dict_614_0_19, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800ImMap), -1, 0, 1, 1, 1, 0, "u 'S800ImMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800ImMap", 829, G__S800Dict_614_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_614_0_21, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800ImMap), -1, 1, 1, 1, 1, 0, "u 'S800ImMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Map(void) {
   /* S800Map */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Map));
   G__memfunc_setup("Initialize",1042,G__S800Dict_615_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadInverseMap",1402,G__S800Dict_615_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_615_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WasLoaded",884,G__S800Dict_615_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__S800Dict_615_0_5, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - calcorder i - - 0 - parameter "
"D - - 0 - input", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_615_0_6, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Map::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_615_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Map::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_615_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Map::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_615_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Map::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_615_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_615_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Map::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_615_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Map::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_615_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Map::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_615_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Map::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800Map", 521, G__S800Dict_615_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Map), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800Map", 521, G__S800Dict_615_0_19, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Map), -1, 0, 1, 1, 1, 0, "u 'S800Map' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Map", 647, G__S800Dict_615_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_615_0_21, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Map), -1, 1, 1, 1, 1, 0, "u 'S800Map' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800FpCrdcCalc(void) {
   /* S800FpCrdcCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc));
   G__memfunc_setup("FindPadMax",956,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcSkew",781,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - - 0 - left i - - 0 - right "
"d - - 0 - center", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__S800Dict_616_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'S800Full' - 0 - s800 U 'S800FpCrdcPads' - 0 - pad "
"U 'S800FpCrdc' - 0 - fpcrdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_616_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateGravity",1652,G__S800Dict_616_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateGravityClassic",2358,G__S800Dict_616_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBadPads",1133,G__S800Dict_616_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isbadpad",824,G__S800Dict_616_0_8, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - chn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_616_0_9, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800FpCrdcCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_616_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpCrdcCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_616_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800FpCrdcCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_616_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800FpCrdcCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_616_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_616_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpCrdcCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_616_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpCrdcCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_616_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpCrdcCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_616_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpCrdcCalc::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800FpCrdcCalc", 1168, G__S800Dict_616_0_21, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800FpCrdcCalc", 1168, G__S800Dict_616_0_22, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc), -1, 0, 1, 1, 1, 0, "u 'S800FpCrdcCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800FpCrdcCalc", 1294, G__S800Dict_616_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_616_0_24, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcCalc), -1, 1, 1, 1, 1, 0, "u 'S800FpCrdcCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800FpCrdcPads(void) {
   /* S800FpCrdcPads */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads));
   G__memfunc_setup("UnpackRawDataFastClassic",2390,(G__InterfaceMethod) NULL, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 4, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnpackRawDataFast",1684,(G__InterfaceMethod) NULL, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 4, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDelta",861,G__S800Dict_617_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - center U 'S800FpCrdcCalc' - 0 - calc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__S800Dict_617_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_617_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnpackRawData",1286,G__S800Dict_617_0_6, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnpackRawDataClassic",1992,G__S800Dict_617_0_7, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AverageCal",971,G__S800Dict_617_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - integration", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildLookUp",1098,G__S800Dict_617_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_617_0_10, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800FpCrdcPads::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_617_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpCrdcPads::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_617_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800FpCrdcPads::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_617_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800FpCrdcPads::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_617_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_617_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpCrdcPads::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_617_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpCrdcPads::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_617_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpCrdcPads::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_617_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpCrdcPads::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800FpCrdcPads", 1189, G__S800Dict_617_0_22, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800FpCrdcPads", 1189, G__S800Dict_617_0_23, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads), -1, 0, 1, 1, 1, 0, "u 'S800FpCrdcPads' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800FpCrdcPads", 1315, G__S800Dict_617_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_617_0_25, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800FpCrdcPads), -1, 1, 1, 1, 1, 0, "u 'S800FpCrdcPads' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800FpCrdc(void) {
   /* S800FpCrdc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc));
   G__memfunc_setup("Initialize",1042,G__S800Dict_622_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_622_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculatePosition",1763,G__S800Dict_622_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_622_0_4, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_622_0_5, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800FpCrdc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_622_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpCrdc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_622_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800FpCrdc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_622_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800FpCrdc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_622_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_622_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpCrdc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_622_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpCrdc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_622_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpCrdc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_622_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpCrdc::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800FpCrdc", 797, G__S800Dict_622_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800FpCrdc", 797, G__S800Dict_622_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc), -1, 0, 1, 1, 1, 0, "u 'S800FpCrdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800FpCrdc", 923, G__S800Dict_622_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_622_0_20, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800FpCrdc), -1, 1, 1, 1, 1, 0, "u 'S800FpCrdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Tppac(void) {
   /* S800Tppac */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Tppac));
   G__memfunc_setup("Initialize",1042,G__S800Dict_623_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_623_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckBadStrips",1386,G__S800Dict_623_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__S800Dict_623_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - xleft i - - 0 - xright "
"i - - 0 - yleft i - - 0 - yright", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_623_0_5, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Tppac::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_623_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Tppac::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_623_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Tppac::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_623_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Tppac::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_623_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_623_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Tppac::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_623_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Tppac::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_623_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Tppac::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_623_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Tppac::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800Tppac", 739, G__S800Dict_623_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Tppac), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800Tppac", 739, G__S800Dict_623_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Tppac), -1, 0, 1, 1, 1, 0, "u 'S800Tppac' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Tppac", 865, G__S800Dict_623_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_623_0_20, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Tppac), -1, 1, 1, 1, 1, 0, "u 'S800Tppac' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Track(void) {
   /* S800Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Track));
   G__memfunc_setup("Initialize",1042,G__S800Dict_624_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_624_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnpackRawData",1286,G__S800Dict_624_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateTracking",1729,G__S800Dict_624_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_624_0_5, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_624_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_624_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_624_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_624_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_624_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_624_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_624_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_624_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Track::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800Track", 736, G__S800Dict_624_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Track), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800Track", 736, G__S800Dict_624_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Track), -1, 0, 1, 1, 1, 0, "u 'S800Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Track", 862, G__S800Dict_624_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_624_0_20, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Track), -1, 1, 1, 1, 1, 0, "u 'S800Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800FpIonChamber(void) {
   /* S800FpIonChamber */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber));
   G__memfunc_setup("Initialize",1042,G__S800Dict_625_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_625_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_625_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildLookUp",1098,G__S800Dict_625_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrateIcSum",1384,G__S800Dict_625_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_625_0_6, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800FpIonChamber::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_625_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpIonChamber::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_625_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800FpIonChamber::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_625_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800FpIonChamber::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_625_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_625_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpIonChamber::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_625_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpIonChamber::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_625_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpIonChamber::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_625_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpIonChamber::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800FpIonChamber", 1401, G__S800Dict_625_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800FpIonChamber", 1401, G__S800Dict_625_0_19, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber), -1, 0, 1, 1, 1, 0, "u 'S800FpIonChamber' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800FpIonChamber", 1527, G__S800Dict_625_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_625_0_21, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800FpIonChamber), -1, 1, 1, 1, 1, 0, "u 'S800FpIonChamber' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800FpScintillator(void) {
   /* S800FpScintillator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator));
   G__memfunc_setup("Initialize",1042,G__S800Dict_626_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_626_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__S800Dict_626_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_626_0_4, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800FpScintillator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_626_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpScintillator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_626_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800FpScintillator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_626_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800FpScintillator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_626_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_626_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpScintillator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_626_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpScintillator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_626_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpScintillator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_626_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpScintillator::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800FpScintillator", 1689, G__S800Dict_626_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800FpScintillator", 1689, G__S800Dict_626_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator), -1, 0, 1, 1, 1, 0, "u 'S800FpScintillator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800FpScintillator", 1815, G__S800Dict_626_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_626_0_19, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800FpScintillator), -1, 1, 1, 1, 1, 0, "u 'S800FpScintillator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800FpTrack(void) {
   /* S800FpTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpTrack));
   G__memfunc_setup("Initialize",1042,G__S800Dict_627_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_627_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateTracking",1729,G__S800Dict_627_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_627_0_4, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800FpTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_627_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_627_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800FpTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_627_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800FpTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_627_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_627_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_627_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_627_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_627_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpTrack::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800FpTrack", 918, G__S800Dict_627_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpTrack), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800FpTrack", 918, G__S800Dict_627_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpTrack), -1, 0, 1, 1, 1, 0, "u 'S800FpTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800FpTrack", 1044, G__S800Dict_627_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_627_0_19, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800FpTrack), -1, 1, 1, 1, 1, 0, "u 'S800FpTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800FpHodo(void) {
   /* S800FpHodo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800FpHodo));
   G__memfunc_setup("Initialize",1042,G__S800Dict_628_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_628_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_628_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectX",810,G__S800Dict_628_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_628_0_5, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800FpHodo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_628_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpHodo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_628_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800FpHodo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_628_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800FpHodo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_628_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_628_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpHodo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_628_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpHodo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_628_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FpHodo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_628_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FpHodo::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800FpHodo", 811, G__S800Dict_628_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpHodo), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800FpHodo", 811, G__S800Dict_628_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FpHodo), -1, 0, 1, 1, 1, 0, "u 'S800FpHodo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800FpHodo", 937, G__S800Dict_628_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_628_0_20, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800FpHodo), -1, 1, 1, 1, 1, 0, "u 'S800FpHodo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800FocalPlane(void) {
   /* S800FocalPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane));
   G__memfunc_setup("Initialize",1042,G__S800Dict_629_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_629_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadValues",1008,G__S800Dict_629_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScintUnpack",1123,G__S800Dict_629_0_4, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_629_0_5, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800FocalPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_629_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FocalPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_629_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800FocalPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_629_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800FocalPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_629_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_629_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FocalPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_629_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FocalPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_629_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800FocalPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_629_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800FocalPlane::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800FocalPlane", 1216, G__S800Dict_629_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800FocalPlane", 1216, G__S800Dict_629_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane), -1, 0, 1, 1, 1, 0, "u 'S800FocalPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800FocalPlane", 1342, G__S800Dict_629_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_629_0_20, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800FocalPlane), -1, 1, 1, 1, 1, 0, "u 'S800FocalPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800ClassicPpac(void) {
   /* S800ClassicPpac */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800ClassicPpac));
   G__memfunc_setup("Initialize",1042,G__S800Dict_630_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_630_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_630_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 2, 1, 1, 0, 
"R - 'UShort_t' 0 - p i - - 0 - ChnOffSet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_630_0_4, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800ClassicPpac::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_630_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800ClassicPpac::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_630_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800ClassicPpac::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_630_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800ClassicPpac::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_630_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_630_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800ClassicPpac::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_630_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800ClassicPpac::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_630_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800ClassicPpac::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_630_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800ClassicPpac::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800ClassicPpac", 1329, G__S800Dict_630_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800ClassicPpac), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800ClassicPpac", 1329, G__S800Dict_630_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800ClassicPpac), -1, 0, 1, 1, 1, 0, "u 'S800ClassicPpac' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800ClassicPpac", 1455, G__S800Dict_630_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_630_0_19, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800ClassicPpac), -1, 1, 1, 1, 1, 0, "u 'S800ClassicPpac' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Image(void) {
   /* S800Image */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Image));
   G__memfunc_setup("Initialize",1042,G__S800Dict_631_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_631_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__S800Dict_631_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_631_0_4, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Image::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_631_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Image::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_631_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Image::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_631_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Image::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_631_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_631_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Image::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_631_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Image::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_631_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Image::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_631_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Image::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800Image", 718, G__S800Dict_631_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Image), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800Image", 718, G__S800Dict_631_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Image), -1, 0, 1, 1, 1, 0, "u 'S800Image' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Image", 844, G__S800Dict_631_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_631_0_19, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Image), -1, 1, 1, 1, 1, 0, "u 'S800Image' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800TimeStamp(void) {
   /* S800TimeStamp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp));
   G__memfunc_setup("Initialize",1042,G__S800Dict_632_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_632_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_632_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_632_0_4, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800TimeStamp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_632_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800TimeStamp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_632_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800TimeStamp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_632_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800TimeStamp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_632_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_632_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800TimeStamp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_632_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800TimeStamp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_632_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800TimeStamp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_632_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800TimeStamp::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800TimeStamp", 1151, G__S800Dict_632_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800TimeStamp", 1151, G__S800Dict_632_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp), -1, 0, 1, 1, 1, 0, "u 'S800TimeStamp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800TimeStamp", 1277, G__S800Dict_632_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_632_0_19, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800TimeStamp), -1, 1, 1, 1, 1, 0, "u 'S800TimeStamp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800EventNumber(void) {
   /* S800EventNumber */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800EventNumber));
   G__memfunc_setup("Initialize",1042,G__S800Dict_633_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_633_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_633_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_633_0_4, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800EventNumber::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_633_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800EventNumber::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_633_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800EventNumber::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_633_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800EventNumber::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_633_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_633_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800EventNumber::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_633_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800EventNumber::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_633_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800EventNumber::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_633_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800EventNumber::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800EventNumber", 1366, G__S800Dict_633_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800EventNumber), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800EventNumber", 1366, G__S800Dict_633_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800EventNumber), -1, 0, 1, 1, 1, 0, "u 'S800EventNumber' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800EventNumber", 1492, G__S800Dict_633_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_633_0_19, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800EventNumber), -1, 1, 1, 1, 1, 0, "u 'S800EventNumber' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Trigger(void) {
   /* S800Trigger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Trigger));
   G__memfunc_setup("Initialize",1042,G__S800Dict_634_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - m_s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_634_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_634_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_634_0_4, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Trigger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_634_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Trigger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_634_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Trigger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_634_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Trigger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_634_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_634_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Trigger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_634_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Trigger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_634_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Trigger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_634_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Trigger::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800Trigger", 959, G__S800Dict_634_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Trigger), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800Trigger", 959, G__S800Dict_634_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Trigger), -1, 0, 1, 1, 1, 0, "u 'S800Trigger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Trigger", 1085, G__S800Dict_634_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_634_0_19, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Trigger), -1, 1, 1, 1, 1, 0, "u 'S800Trigger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800TimeOfFlight(void) {
   /* S800TimeOfFlight */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight));
   G__memfunc_setup("Initialize",1042,G__S800Dict_635_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_635_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_635_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateTOF",1143,G__S800Dict_635_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_635_0_5, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800TimeOfFlight::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_635_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800TimeOfFlight::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_635_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800TimeOfFlight::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_635_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800TimeOfFlight::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_635_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_635_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800TimeOfFlight::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_635_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800TimeOfFlight::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_635_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800TimeOfFlight::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_635_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800TimeOfFlight::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800TimeOfFlight", 1421, G__S800Dict_635_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800TimeOfFlight", 1421, G__S800Dict_635_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight), -1, 0, 1, 1, 1, 0, "u 'S800TimeOfFlight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800TimeOfFlight", 1547, G__S800Dict_635_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_635_0_20, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800TimeOfFlight), -1, 1, 1, 1, 1, 0, "u 'S800TimeOfFlight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Pin(void) {
   /* S800Pin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Pin));
   G__memfunc_setup("Initialize",1042,G__S800Dict_636_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_636_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_636_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PinCorrect",1017,G__S800Dict_636_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_636_0_5, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Pin::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_636_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Pin::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_636_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Pin::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_636_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Pin::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_636_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_636_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Pin::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_636_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Pin::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_636_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Pin::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_636_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Pin::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800Pin", 530, G__S800Dict_636_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Pin), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800Pin", 530, G__S800Dict_636_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Pin), -1, 0, 1, 1, 1, 0, "u 'S800Pin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Pin", 656, G__S800Dict_636_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_636_0_20, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Pin), -1, 1, 1, 1, 1, 0, "u 'S800Pin' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800LaBr(void) {
   /* S800LaBr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800LaBr));
   G__memfunc_setup("Initialize",1042,G__S800Dict_637_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_637_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_637_0_3, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800LaBr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_637_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800LaBr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_637_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800LaBr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_637_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800LaBr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_637_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_637_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800LaBr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_637_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800LaBr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_637_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800LaBr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_637_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800LaBr::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800LaBr", 588, G__S800Dict_637_0_15, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800LaBr), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800LaBr", 588, G__S800Dict_637_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800LaBr), -1, 0, 1, 1, 1, 0, "u 'S800LaBr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800LaBr", 714, G__S800Dict_637_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_637_0_18, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800LaBr), -1, 1, 1, 1, 1, 0, "u 'S800LaBr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Object(void) {
   /* S800Object */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Object));
   G__memfunc_setup("Initialize",1042,G__S800Dict_638_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_638_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_638_0_3, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Object::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_638_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Object::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_638_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Object::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_638_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Object::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_638_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_638_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Object::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_638_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Object::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_638_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Object::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_638_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Object::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800Object", 834, G__S800Dict_638_0_15, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Object), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800Object", 834, G__S800Dict_638_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Object), -1, 0, 1, 1, 1, 0, "u 'S800Object' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Object", 960, G__S800Dict_638_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_638_0_18, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Object), -1, 1, 1, 1, 1, 0, "u 'S800Object' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Ppac(void) {
   /* S800Ppac */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Ppac));
   G__memfunc_setup("Initialize",1042,G__S800Dict_639_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_639_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unpack",610,G__S800Dict_639_0_3, 82, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 0, "R - 'UShort_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calibrate",903,G__S800Dict_639_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculatePosition",1763,G__S800Dict_639_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_639_0_6, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Ppac::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_639_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Ppac::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_639_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Ppac::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_639_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Ppac::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_639_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_639_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Ppac::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_639_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Ppac::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_639_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Ppac::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_639_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Ppac::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800Ppac", 623, G__S800Dict_639_0_18, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Ppac), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800Ppac", 623, G__S800Dict_639_0_19, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Ppac), -1, 0, 1, 1, 1, 0, "u 'S800Ppac' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Ppac", 749, G__S800Dict_639_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_639_0_21, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Ppac), -1, 1, 1, 1, 1, 0, "u 'S800Ppac' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Target(void) {
   /* S800Target */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Target));
   G__memfunc_setup("Initialize",1042,G__S800Dict_640_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S800Full' - 0 - s800", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_640_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calculate",910,G__S800Dict_640_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_640_0_4, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Target::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_640_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Target::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_640_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Target::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_640_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Target::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_640_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_640_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Target::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_640_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Target::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_640_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Target::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_640_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Target::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("S800Target", 850, G__S800Dict_640_0_16, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Target), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S800Target", 850, G__S800Dict_640_0_17, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Target), -1, 0, 1, 1, 1, 0, "u 'S800Target' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Target", 976, G__S800Dict_640_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_640_0_19, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Target), -1, 1, 1, 1, 1, 0, "u 'S800Target' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncs800Phys(void) {
   /* s800Phys */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_s800Phys));
   // automatic default constructor
   G__memfunc_setup("s800Phys", 687, G__S800Dict_641_0_1, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_s800Phys), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("s800Phys", 687, G__S800Dict_641_0_2, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_s800Phys), -1, 0, 1, 1, 1, 0, "u 's800Phys' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~s800Phys", 813, G__S800Dict_641_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_641_0_4, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_s800Phys), -1, 1, 1, 1, 1, 0, "u 's800Phys' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS800Physics(void) {
   /* S800Physics */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S800DictLN_S800Physics));
   G__memfunc_setup("S800Physics",974,G__S800Dict_642_0_1, 105, G__get_linked_tagnum(&G__S800DictLN_S800Physics), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__S800Dict_642_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S800Dict_642_0_3, 85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S800Physics::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S800Dict_642_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Physics::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S800Dict_642_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S800Physics::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S800Dict_642_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S800Physics::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S800DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S800Dict_642_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S800Dict_642_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Physics::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S800Dict_642_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Physics::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S800Dict_642_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S800Physics::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S800Dict_642_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S800Physics::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S800Physics", 974, G__S800Dict_642_0_15, (int) ('i'), G__get_linked_tagnum(&G__S800DictLN_S800Physics), -1, 0, 1, 1, 1, 0, "u 'S800Physics' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S800Physics", 1100, G__S800Dict_642_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S800Dict_642_0_17, (int) ('u'), G__get_linked_tagnum(&G__S800DictLN_S800Physics), -1, 1, 1, 1, 1, 0, "u 'S800Physics' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncS800Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalS800Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcS800Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__S800DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__S800DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__S800DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_GRETINAVariables = { "GRETINAVariables" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR = { "vector<g3ChannelEvent,allocator<g3ChannelEvent> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g3ChannelEvent,allocator<g3ChannelEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR = { "vector<g3CrystalEvent,allocator<g3CrystalEvent> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g3CrystalEvent,allocator<g3CrystalEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR = { "vector<historyEvent,allocator<historyEvent> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<historyEvent,allocator<historyEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR = { "vector<g2IntPt,allocator<g2IntPt> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g2IntPt,allocator<g2IntPt> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR = { "vector<g2CrystalEvent,allocator<g2CrystalEvent> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g2CrystalEvent,allocator<g2CrystalEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR = { "vector<trackedGamma,allocator<trackedGamma> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<trackedGamma,allocator<trackedGamma> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR = { "vector<g1GammaEvent,allocator<g1GammaEvent> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g1GammaEvent,allocator<g1GammaEvent> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR = { "vector<g4Sim_abcd1234,allocator<g4Sim_abcd1234> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR = { "reverse_iterator<vector<g4Sim_abcd1234,allocator<g4Sim_abcd1234> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Full = { "S800Full" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Scaler = { "S800Scaler" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800ImMap = { "S800ImMap" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Map = { "S800Map" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800FpCrdcCalc = { "S800FpCrdcCalc" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800FpCrdcPads = { "S800FpCrdcPads" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator = { "vector<int,allocator<int> >::iterator" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800FpCrdc = { "S800FpCrdc" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Tppac = { "S800Tppac" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Track = { "S800Track" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800FpIonChamber = { "S800FpIonChamber" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800FpScintillator = { "S800FpScintillator" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800FpTrack = { "S800FpTrack" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800FpHodo = { "S800FpHodo" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800FocalPlane = { "S800FocalPlane" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800ClassicPpac = { "S800ClassicPpac" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Image = { "S800Image" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800TimeStamp = { "S800TimeStamp" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800EventNumber = { "S800EventNumber" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Trigger = { "S800Trigger" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800TimeOfFlight = { "S800TimeOfFlight" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Pin = { "S800Pin" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800LaBr = { "S800LaBr" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Object = { "S800Object" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Ppac = { "S800Ppac" , 99 , -1 };
G__linked_taginfo G__S800DictLN_S800Target = { "S800Target" , 99 , -1 };
G__linked_taginfo G__S800DictLN_s800Phys = { "s800Phys" , 115 , -1 };
G__linked_taginfo G__S800DictLN_S800Physics = { "S800Physics" , 99 , -1 };
G__linked_taginfo G__S800DictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__S800DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableS800Dict() {
  G__S800DictLN_TClass.tagnum = -1 ;
  G__S800DictLN_TBuffer.tagnum = -1 ;
  G__S800DictLN_TMemberInspector.tagnum = -1 ;
  G__S800DictLN_TObject.tagnum = -1 ;
  G__S800DictLN_TString.tagnum = -1 ;
  G__S800DictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__S800DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__S800DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__S800DictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__S800DictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__S800DictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__S800DictLN_TVector3.tagnum = -1 ;
  G__S800DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__S800DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__S800DictLN_GRETINAVariables.tagnum = -1 ;
  G__S800DictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_S800Full.tagnum = -1 ;
  G__S800DictLN_S800Scaler.tagnum = -1 ;
  G__S800DictLN_S800ImMap.tagnum = -1 ;
  G__S800DictLN_S800Map.tagnum = -1 ;
  G__S800DictLN_S800FpCrdcCalc.tagnum = -1 ;
  G__S800DictLN_S800FpCrdcPads.tagnum = -1 ;
  G__S800DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__S800DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S800DictLN_S800FpCrdc.tagnum = -1 ;
  G__S800DictLN_S800Tppac.tagnum = -1 ;
  G__S800DictLN_S800Track.tagnum = -1 ;
  G__S800DictLN_S800FpIonChamber.tagnum = -1 ;
  G__S800DictLN_S800FpScintillator.tagnum = -1 ;
  G__S800DictLN_S800FpTrack.tagnum = -1 ;
  G__S800DictLN_S800FpHodo.tagnum = -1 ;
  G__S800DictLN_S800FocalPlane.tagnum = -1 ;
  G__S800DictLN_S800ClassicPpac.tagnum = -1 ;
  G__S800DictLN_S800Image.tagnum = -1 ;
  G__S800DictLN_S800TimeStamp.tagnum = -1 ;
  G__S800DictLN_S800EventNumber.tagnum = -1 ;
  G__S800DictLN_S800Trigger.tagnum = -1 ;
  G__S800DictLN_S800TimeOfFlight.tagnum = -1 ;
  G__S800DictLN_S800Pin.tagnum = -1 ;
  G__S800DictLN_S800LaBr.tagnum = -1 ;
  G__S800DictLN_S800Object.tagnum = -1 ;
  G__S800DictLN_S800Ppac.tagnum = -1 ;
  G__S800DictLN_S800Target.tagnum = -1 ;
  G__S800DictLN_s800Phys.tagnum = -1 ;
  G__S800DictLN_S800Physics.tagnum = -1 ;
  G__S800DictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__S800DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableS800Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__S800DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TString);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEshortcOallocatorlEshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__S800DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_GRETINAVariables);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEg3ChannelEventcOallocatorlEg3ChannelEventgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEg3CrystalEventcOallocatorlEg3CrystalEventgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEhistoryEventcOallocatorlEhistoryEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEhistoryEventcOallocatorlEhistoryEventgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEg2IntPtcOallocatorlEg2IntPtgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEg2IntPtcOallocatorlEg2IntPtgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEg2CrystalEventcOallocatorlEg2CrystalEventgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEtrackedGammacOallocatorlEtrackedGammagRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEtrackedGammacOallocatorlEtrackedGammagRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEg1GammaEventcOallocatorlEg1GammaEventgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEg4Sim_abcd1234cOallocatorlEg4Sim_abcd1234gRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Full),sizeof(S800Full),-1,291072,(char*)NULL,G__setup_memvarS800Full,G__setup_memfuncS800Full);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Scaler),sizeof(S800Scaler),-1,291072,(char*)NULL,G__setup_memvarS800Scaler,G__setup_memfuncS800Scaler);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800ImMap),sizeof(S800ImMap),-1,290816,(char*)NULL,G__setup_memvarS800ImMap,G__setup_memfuncS800ImMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Map),sizeof(S800Map),-1,290816,(char*)NULL,G__setup_memvarS800Map,G__setup_memfuncS800Map);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800FpCrdcCalc),sizeof(S800FpCrdcCalc),-1,290816,(char*)NULL,G__setup_memvarS800FpCrdcCalc,G__setup_memfuncS800FpCrdcCalc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800FpCrdcPads),sizeof(S800FpCrdcPads),-1,290816,(char*)NULL,G__setup_memvarS800FpCrdcPads,G__setup_memfuncS800FpCrdcPads);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800FpCrdc),sizeof(S800FpCrdc),-1,290816,(char*)NULL,G__setup_memvarS800FpCrdc,G__setup_memfuncS800FpCrdc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Tppac),sizeof(S800Tppac),-1,290816,(char*)NULL,G__setup_memvarS800Tppac,G__setup_memfuncS800Tppac);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Track),sizeof(S800Track),-1,290816,(char*)NULL,G__setup_memvarS800Track,G__setup_memfuncS800Track);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800FpIonChamber),sizeof(S800FpIonChamber),-1,290816,(char*)NULL,G__setup_memvarS800FpIonChamber,G__setup_memfuncS800FpIonChamber);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800FpScintillator),sizeof(S800FpScintillator),-1,290816,(char*)NULL,G__setup_memvarS800FpScintillator,G__setup_memfuncS800FpScintillator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800FpTrack),sizeof(S800FpTrack),-1,290816,(char*)NULL,G__setup_memvarS800FpTrack,G__setup_memfuncS800FpTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800FpHodo),sizeof(S800FpHodo),-1,290816,(char*)NULL,G__setup_memvarS800FpHodo,G__setup_memfuncS800FpHodo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800FocalPlane),sizeof(S800FocalPlane),-1,290816,(char*)NULL,G__setup_memvarS800FocalPlane,G__setup_memfuncS800FocalPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800ClassicPpac),sizeof(S800ClassicPpac),-1,290816,(char*)NULL,G__setup_memvarS800ClassicPpac,G__setup_memfuncS800ClassicPpac);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Image),sizeof(S800Image),-1,290816,(char*)NULL,G__setup_memvarS800Image,G__setup_memfuncS800Image);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800TimeStamp),sizeof(S800TimeStamp),-1,290816,(char*)NULL,G__setup_memvarS800TimeStamp,G__setup_memfuncS800TimeStamp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800EventNumber),sizeof(S800EventNumber),-1,290816,(char*)NULL,G__setup_memvarS800EventNumber,G__setup_memfuncS800EventNumber);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Trigger),sizeof(S800Trigger),-1,290816,(char*)NULL,G__setup_memvarS800Trigger,G__setup_memfuncS800Trigger);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800TimeOfFlight),sizeof(S800TimeOfFlight),-1,290816,(char*)NULL,G__setup_memvarS800TimeOfFlight,G__setup_memfuncS800TimeOfFlight);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Pin),sizeof(S800Pin),-1,290816,(char*)NULL,G__setup_memvarS800Pin,G__setup_memfuncS800Pin);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800LaBr),sizeof(S800LaBr),-1,290816,(char*)NULL,G__setup_memvarS800LaBr,G__setup_memfuncS800LaBr);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Object),sizeof(S800Object),-1,290816,(char*)NULL,G__setup_memvarS800Object,G__setup_memfuncS800Object);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Ppac),sizeof(S800Ppac),-1,290816,(char*)NULL,G__setup_memvarS800Ppac,G__setup_memfuncS800Ppac);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Target),sizeof(S800Target),-1,290816,(char*)NULL,G__setup_memvarS800Target,G__setup_memfuncS800Target);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_s800Phys),sizeof(s800Phys),-1,262144,(char*)NULL,G__setup_memvars800Phys,G__setup_memfuncs800Phys);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S800DictLN_S800Physics),sizeof(S800Physics),-1,292096,(char*)NULL,G__setup_memvarS800Physics,G__setup_memfuncS800Physics);
   G__get_linked_tagnum_fwd(&G__S800DictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__S800DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupS800Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupS800Dict()");
  G__set_cpp_environmentS800Dict();
  G__cpp_setup_tagtableS800Dict();

  G__cpp_setup_inheritanceS800Dict();

  G__cpp_setup_typetableS800Dict();

  G__cpp_setup_memvarS800Dict();

  G__cpp_setup_memfuncS800Dict();
  G__cpp_setup_globalS800Dict();
  G__cpp_setup_funcS800Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncS800Dict();
  return;
}
class G__cpp_setup_initS800Dict {
  public:
    G__cpp_setup_initS800Dict() { G__add_setup_func("S800Dict",(G__incsetup)(&G__cpp_setupS800Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initS800Dict() { G__remove_setup_func("S800Dict"); }
};
G__cpp_setup_initS800Dict G__cpp_setup_initializerS800Dict;

